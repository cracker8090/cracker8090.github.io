<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无拘无束的猪</title>
  
  <subtitle>hellolinux的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hellolinux.xyz/"/>
  <updated>2022-07-31T12:55:25.000Z</updated>
  <id>https://hellolinux.xyz/</id>
  
  <author>
    <name>hellolinux</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>费曼学习法</title>
    <link href="https://hellolinux.xyz/posts/c68c675d.html"/>
    <id>https://hellolinux.xyz/posts/c68c675d.html</id>
    <published>2022-07-31T12:55:25.000Z</published>
    <updated>2022-07-31T12:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/cracker8090/personal_books/blob/master/%E8%AE%A4%E7%9F%A5%E6%95%88%E7%8E%87/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95.png" target="_blank" rel="noopener">本文思维导图和PNG生成文件链接</a> </p><ul><li><p>何为“费曼学习法”</p><pre><code>- 费曼学习法提供了四个关键词：Concept（概念），Teach（以教代学），Review（评价），Simplify（简化）- 在这个基础上，本书提炼总结出了五个步骤：确立目标；理解目标；输出；回顾；简化。通过这五个步骤，我们能够充分地将费曼“以教代学”的学习方式开发到最高的效率，吸收有用的知识，创造自己的知识体系。 </code></pre></li><li><p>高效能的“费曼学习法” </p><ul><li><p>第一，确立你要学习的目标。找到和列出自己想要了解的知识，可以是一本书，也可以是一门技术，甚至是你能想象到的任意领域和事物。</p><ul><li><p>目标明确的学习可以极大地改变一个人的思维，对于训练和改进我们的思维方式而言，这是一个必不可少的基础。它主要体现在四个方面</p><ul><li>第一，开放性思维。 </li><li>第二，批判性思维。 </li><li>第三，逻辑性思维。 </li><li>第四，清晰凝练的表达力。 </li></ul></li><li><p>如何找到正确的方向？ </p><ul><li><p>第一，对自己提出的一些关键问题</p><ul><li>“对我而言最重要的那件事是什么？ </li><li>未来的方向 </li><li>当下的焦点 </li></ul></li><li><p>第二，把“最重要的那件事”变成自己的方向</p></li><li><p>有没有更好的方向？ </p><ul><li>著名的“SMART原则”提供了一个简单明了的判断标准。<ul><li>S：（Specific）明确和具体的。——目标必须清晰和可以形容。</li><li>M：（Measurable）可以衡量/量化的。——目标必须量化和能够评估。 </li><li>A：（Achievable）自身能力可以达到的。——目标必须在能力范围内。 </li><li>R：（Rewarding）能产生满足感/成就感的。——目标必须有积极的意义。</li><li>T：（Time-bound）有时间限制的。——目标必须有实现的期限。 </li></ul></li></ul></li></ul></li></ul></li><li><p>第二，理解你要学习的对象。针对这个目标，准备好和筛选相关的资料，选择可靠和多个角度的信息来源，把这些内容系统化地归纳整理出来。</p><ul><li>规划一条高效能学习之路 <ul><li>学习的舒适区有两个标准<ul><li>第一， 一个正确而适合自己的学习方向，它符合自身的兴趣。 </li><li>第二， 一个在自己能力范围内的合理目标。它符合自身的能力。 </li></ul></li><li>做学习规划时，我们要先为三件事预留出足够的时间。 <ul><li>留出锁定最重要目标的时间。 最高效的人总能锁定自己最重要的目标，把主要的精力聚焦到这个目标上。 </li><li>留出做正确规划的时间。 在兴趣、目标和规划之间找到内在的联系，建立一座坚固的桥梁，才能制订正确的学习计划。不要还没做好准备就匆匆地开始学习。 </li><li>留出调整目标和规划的时间。 在计划和行动的过程中根据反馈随时修正目标，改善或改变学习的计划，保证自己始终处在一条正确的轨道上。 </li></ul></li><li>学习不只是为了记住什么，而是我们通过学习建立自己行之有效的思维框架，并将知识运用到实践中，解决生活和工作中的实际问题。</li></ul></li></ul></li><li><p>第三，以教代学，用输出代替输入。模拟一个传授的场景，用自己的语言把这些知识讲给别人，用以检查自己是否已经掌握了这些知识。</p><ul><li>STEP THREE 理解我们要学习的知识 <ul><li>对我们要学习的知识和概念进行归类对比，系统地理解这些内容，建立筛选和学习的原则。 </li><li>画出一个“学习流程” <ul><li>“思维和流程导图”有助于我们解决以下的五个问题<ul><li>快速地获取自己需要的信息——不论一本书，一门学科，还是一种技能，速度可以得到保证。 </li><li>掌握理解和分析知识的方法——和文字语言比起来，思维导图的形式为大脑创造了一条视觉化的路径。</li><li>除了读书外，我们要借鉴图片、视频等工具输入内容。 </li><li>建立自己思考问题的框架——思维导图从整体和宏观的角度重新组织了知识，为我们提供了一个系统化思考问题的架构。 </li><li>形成高质量的学习笔记——组织和绘制思维导图的同时，我们也会完成高质量的学习笔记。</li></ul></li><li>横向拓展：让知识“可视化” <ul><li>将知识系统化的一个重要步骤，是要通过读书笔记以及思维导图等形式对学到的和即将学习的内容进行加深和巩固。我们要做的不仅是画一张思维导图，还是一个清晰的流程说明，整个过程是可视化的。</li></ul></li><li>为知识的输出做好准备——思维导图是以教代学的一个必要工具，如果你不能为所学的知识画出一个整体框架，就无法向别人输出知识。 </li></ul></li></ul></li></ul></li><li><p>第四，进行回顾和反思。对其中遇到阻碍、模糊不清和有疑义的知识重新学习、回顾和反思。如有必要，可以重整旗鼓，进行再一次输出。</p><ul><li>回归知识的本质 <ul><li>思考一下这几个问题： 为什么听完一场激动人心的演讲后的次日，你的行为模式依旧遵循着过去的习惯，生活和工作都没有任何改变？ 为什么读完一本管理学方面的书籍后，你其实并不会按照上面的理论在企业/部门中实践？ 为什么你近十年、二十年的每一天都在学习，却发现自己仍然不能明事理和断是非？ 为什么肚子里积累了那么多的学问，考下了那么多的专业证书，遇到棘手的麻烦时还是觉得自己缺乏解决办法？ </li><li>费曼曾经说：“我们为何学习呢？知识对我们究竟意味着什么？知识的本质又是什么？解决了这三个问题，我们也就找到了人生的答案。无论我们去学习何种知识，都能把它融入我们的生活场景中，化作属于自己的力量。”</li></ul></li></ul></li><li><p>第五，实现知识的简化和吸收。最后，通过针对性的简化和整合，实现这些知识的内化和有效的应用。</p></li></ul></li><li><p>重要观点</p><ul><li>学习的目的是输出 </li><li>与真实的世界建立有效联系 </li></ul><ul><li>远见·穿透力·智慧 <ul><li>真正高质量的学习，一定能够让人融入真实的世界。学习最重要的是“真实”，它必须让人可以与时代同步，理解身边正在发生的一切，促进我们对知识的运用和创新。换言之，通过学习，我们要与真实的世界建立有效的联系</li></ul></li><li>简单高效的思维模式 <ul><li>第一，好的思维需要正反馈。 </li><li>第二，输出加快思考的成熟。 <ul><li>“任何个体、群体或地区，一旦在某一个方面（如金钱、名誉、地位等）获得成功和进步，就会产生一种积累优势，就会有更多的机会取得更大的成功和进步</li></ul></li><li>第三，费曼学习法让思考可以量化。 </li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/cracker8090/personal_books/blob/master/%E8%AE%A4%E7%9F%A5%E6%95%88%E7%8E%87/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;本文思维导图和PNG生成文件链接&lt;/a&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;何为“费曼学习法”&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- 费曼学习法提供了四个关键词：Concept（概念），Teach（以教代学），Review（评价），Simplify（简化）
- 在这个基础上，本书提炼总结出了五个步骤：确立目标；理解目标；输出；回顾；简化。通过这五个步骤，我们能够充分地将费曼“以教代学”的学习方式开发到最高的效率，吸收有用的知识，创造自己的知识体系。 &lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;高效能的“费曼学习法” &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一，确立你要学习的目标。找到和列出自己想要了解的知识，可以是一本书，也可以是一门技术，甚至是你能想象到的任意领域和事物。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;目标明确的学习可以极大地改变一个人的思维，对于训练和改进我们的思维方式而言，这是一个必不可少的基础。它主要体现在四个方面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一，开放性思维。 &lt;/li&gt;
&lt;li&gt;第二，批判性思维。 &lt;/li&gt;
&lt;li&gt;第三，逻辑性思维。 &lt;/li&gt;
&lt;li&gt;第四，清晰凝练的表达力。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何找到正确的方向？ &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一，对自己提出的一些关键问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“对我而言最重要的那件事是什么？ &lt;/li&gt;
&lt;li&gt;未来的方向 &lt;/li&gt;
&lt;li&gt;当下的焦点 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二，把“最重要的那件事”变成自己的方向&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有没有更好的方向？ &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;著名的“SMART原则”提供了一个简单明了的判断标准。&lt;ul&gt;
&lt;li&gt;S：（Specific）明确和具体的。——目标必须清晰和可以形容。&lt;/li&gt;
&lt;li&gt;M：（Measurable）可以衡量/量化的。——目标必须量化和能够评估。 &lt;/li&gt;
&lt;li&gt;A：（Achievable）自身能力可以达到的。——目标必须在能力范围内。 &lt;/li&gt;
&lt;li&gt;R：（Rewarding）能产生满足感/成就感的。——目标必须有积极的意义。&lt;/li&gt;
&lt;li&gt;T：（Time-bound）有时间限制的。——目标必须有实现的期限。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二，理解你要学习的对象。针对这个目标，准备好和筛选相关的资料，选择可靠和多个角度的信息来源，把这些内容系统化地归纳整理出来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;规划一条高效能学习之路 &lt;ul&gt;
&lt;li&gt;学习的舒适区有两个标准&lt;ul&gt;
&lt;li&gt;第一， 一个正确而适合自己的学习方向，它符合自身的兴趣。 &lt;/li&gt;
&lt;li&gt;第二， 一个在自己能力范围内的合理目标。它符合自身的能力。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;做学习规划时，我们要先为三件事预留出足够的时间。 &lt;ul&gt;
&lt;li&gt;留出锁定最重要目标的时间。 最高效的人总能锁定自己最重要的目标，把主要的精力聚焦到这个目标上。 &lt;/li&gt;
&lt;li&gt;留出做正确规划的时间。 在兴趣、目标和规划之间找到内在的联系，建立一座坚固的桥梁，才能制订正确的学习计划。不要还没做好准备就匆匆地开始学习。 &lt;/li&gt;
&lt;li&gt;留出调整目标和规划的时间。 在计划和行动的过程中根据反馈随时修正目标，改善或改变学习的计划，保证自己始终处在一条正确的轨道上。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;学习不只是为了记住什么，而是我们通过学习建立自己行之有效的思维框架，并将知识运用到实践中，解决生活和工作中的实际问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三，以教代学，用输出代替输入。模拟一个传授的场景，用自己的语言把这些知识讲给别人，用以检查自己是否已经掌握了这些知识。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STEP THREE 理解我们要学习的知识 &lt;ul&gt;
&lt;li&gt;对我们要学习的知识和概念进行归类对比，系统地理解这些内容，建立筛选和学习的原则。 &lt;/li&gt;
&lt;li&gt;画出一个“学习流程” &lt;ul&gt;
&lt;li&gt;“思维和流程导图”有助于我们解决以下的五个问题&lt;ul&gt;
&lt;li&gt;快速地获取自己需要的信息——不论一本书，一门学科，还是一种技能，速度可以得到保证。 &lt;/li&gt;
&lt;li&gt;掌握理解和分析知识的方法——和文字语言比起来，思维导图的形式为大脑创造了一条视觉化的路径。&lt;/li&gt;
&lt;li&gt;除了读书外，我们要借鉴图片、视频等工具输入内容。 &lt;/li&gt;
&lt;li&gt;建立自己思考问题的框架——思维导图从整体和宏观的角度重新组织了知识，为我们提供了一个系统化思考问题的架构。 &lt;/li&gt;
&lt;li&gt;形成高质量的学习笔记——组织和绘制思维导图的同时，我们也会完成高质量的学习笔记。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;横向拓展：让知识“可视化” &lt;ul&gt;
&lt;li&gt;将知识系统化的一个重要步骤，是要通过读书笔记以及思维导图等形式对学到的和即将学习的内容进行加深和巩固。我们要做的不仅是画一张思维导图，还是一个清晰的流程说明，整个过程是可视化的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为知识的输出做好准备——思维导图是以教代学的一个必要工具，如果你不能为所学的知识画出一个整体框架，就无法向别人输出知识。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第四，进行回顾和反思。对其中遇到阻碍、模糊不清和有疑义的知识重新学习、回顾和反思。如有必要，可以重整旗鼓，进行再一次输出。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回归知识的本质 &lt;ul&gt;
&lt;li&gt;思考一下这几个问题： 为什么听完一场激动人心的演讲后的次日，你的行为模式依旧遵循着过去的习惯，生活和工作都没有任何改变？ 为什么读完一本管理学方面的书籍后，你其实并不会按照上面的理论在企业/部门中实践？ 为什么你近十年、二十年的每一天都在学习，却发现自己仍然不能明事理和断是非？ 为什么肚子里积累了那么多的学问，考下了那么多的专业证书，遇到棘手的麻烦时还是觉得自己缺乏解决办法？ &lt;/li&gt;
&lt;li&gt;费曼曾经说：“我们为何学习呢？知识对我们究竟意味着什么？知识的本质又是什么？解决了这三个问题，我们也就找到了人生的答案。无论我们去学习何种知识，都能把它融入我们的生活场景中，化作属于自己的力量。”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第五，实现知识的简化和吸收。最后，通过针对性的简化和整合，实现这些知识的内化和有效的应用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重要观点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学习的目的是输出 &lt;/li&gt;
&lt;li&gt;与真实的世界建立有效联系 &lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;远见·穿透力·智慧 &lt;ul&gt;
&lt;li&gt;真正高质量的学习，一定能够让人融入真实的世界。学习最重要的是“真实”，它必须让人可以与时代同步，理解身边正在发生的一切，促进我们对知识的运用和创新。换言之，通过学习，我们要与真实的世界建立有效的联系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;简单高效的思维模式 &lt;ul&gt;
&lt;li&gt;第一，好的思维需要正反馈。 &lt;/li&gt;
&lt;li&gt;第二，输出加快思考的成熟。 &lt;ul&gt;
&lt;li&gt;“任何个体、群体或地区，一旦在某一个方面（如金钱、名誉、地位等）获得成功和进步，就会产生一种积累优势，就会有更多的机会取得更大的成功和进步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三，费曼学习法让思考可以量化。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="效率" scheme="https://hellolinux.xyz/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="效率" scheme="https://hellolinux.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="学习" scheme="https://hellolinux.xyz/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>git基础使用</title>
    <link href="https://hellolinux.xyz/posts/c68c675c.html"/>
    <id>https://hellolinux.xyz/posts/c68c675c.html</id>
    <published>2022-07-20T12:55:25.000Z</published>
    <updated>2022-07-20T12:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git介绍"><a href="#git介绍" class="headerlink" title="git介绍"></a>git介绍</h1><p>CVS、SVN，集中式的版本控制系统不但速度慢，而且必须联网才能使用，而且有些要付费。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-all</span><br></pre></td></tr></table></figure><p>windows就直接下载安装包安装，电脑中找到“Git”-&gt;“Git Bash”运行即可，这是一个mingw64的环境，一个windows模拟出的linux环境，可以使用linux下基本常用的命令。<br>配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure><p>–global是配置全局，对某个仓库使用特定就另外配置。<br>ssh-keygen -t rsa -C “youremail”<br>按回车即表示默认这个文件路径名，接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，不是github管理者的密码），一般情况都回车，主要是推送代码时不需要输入密码<br>找到id_rsa.pub文件，复制内容到github中，路径：Settings - SSH and GPG keys - New SSH Key（gitlab类似）。<br>测试：ssh -T <a href="mailto:git@github.com">git@github.com</a> （如果其他gitlab就修改对应服务器地址）</p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/Pasted%20image%2020220720092232.png" alt=""></p><h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><p><strong>git clone</strong>、<strong>git push</strong>、<strong>git add</strong> 、<strong>git commit</strong>、<strong>git checkout</strong>、<strong>git pull</strong> </p><ul><li><p>git add .</p></li><li><p>添加文件到暂存区，这个是添加所有文件，添加单个文件需要git add filename</p></li><li><p>git commit </p><ul><li>将暂存区内容添加到仓库中，后面可以加-m，也可不加-m，不加就会进入vi编辑器添加提交记录</li><li>git commit –amend 不产生新的commitId</li></ul></li><li><p>恢复</p><ul><li>git reset –hard commit_id 回退版本，意思是自己的修改都会被删除并恢复到commit_id的版本<ul><li>git reset –hard HEAD^  这里的HEAD意思就是git指针指向的位置，gitlog查看到的head</li><li>git checkout file.txt 意思放弃file.txt的修改</li></ul></li></ul></li><li><p>分支</p><ul><li><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/Pasted%20image%2020220720093008.png" alt=""> </li><li>git branch -a 查看所有分支</li><li>查看分支：git branch 查看当前分支</li><li>创建分支：<code>git branch &lt;name&gt;</code></li><li>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></li><li>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></li><li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li><li>删除分支：<code>git branch -d &lt;name&gt;</code>   -D一般是强行删除</li></ul></li><li><p>标签</p><ul><li>git tag v1.0 这个是标记</li><li>git tag v0.9 f52c633</li><li>git tag -d v0.1 删除一个本地标签</li><li>git push origin v1.0</li><li>git push origin –tags 可以推送全部未推送过的本地标签</li><li>git push origin :refs/tags/tagname 可以删除一个远程标签。</li></ul></li><li><p>git merge</p><pre><code>- git merge dev 把dev分支合并到默认HEAD（通常是master或者main分支）</code></pre></li><li><p>git push</p><pre><code>- git push -u origin master 第一次推送master分支的所有内容，后续推送不需要带-u，这里面还有些其他的用法，有遇到再学3</code></pre></li><li><p>git remote</p><ul><li>git remote -v 远端仓库信息<ul><li>git remote rm origin 删除<h1 id="git高级命令"><a href="#git高级命令" class="headerlink" title="git高级命令"></a>git高级命令</h1></li></ul></li></ul></li><li><p>git stash</p><p>  git stash save ‘message‘ 作用同上，只是标记信息<br>  git stash list<br>  git stash apply &lt;可以跟list对应的id&gt;恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除<br>  git stash pop &lt;可以跟list对应的id&gt; 恢复的同时把stash内容也删了</p></li><li><p>git cherry-pick</p><p>  git cherry-pick commitId 复制一个特定的提交到当前分支，这个commitId一般是其他分支的</p></li><li><p>git rebase</p><p>  git rebase 一般是回滚基线，意思就是在git log查看的时候时间线上会很清晰<br>  一般git push之前一般都会git pull，但是这样操作之后会产生一些额外的git log（类似git merge），所以通常会使用 git pull –rebase</p><h1 id="github-gitlab的开始使用"><a href="#github-gitlab的开始使用" class="headerlink" title="github/gitlab的开始使用"></a>github/gitlab的开始使用</h1></li><li><p>创建新仓库</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"# github-upload"</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git branch -M master</span><br><span class="line">git remote add origin git@github.com:gavinlook/github-upload.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ul><li>推送一个存在的仓库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:gavinlook/github-upload.git</span><br><span class="line">git branch -M master</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ul><li><p>使用已经存在的仓库</p><p>  克隆代码到本地——这个是通用的代码操作方式</p><p>  git status 修改文件后查看修改<br>  默认查看全部，查看某文件后面对应文件，可以查看帮助文档 git status –help</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:torvalds/linux.git</span><br><span class="line">touch readme.txt</span><br><span class="line">git add readme.txt</span><br><span class="line">git commit -m <span class="string">"wrote a readme file"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>-m后面跟随提交说明，也就是常用git log查看到的提交记录，所以最好简洁明了</p><h1 id="git常用问题"><a href="#git常用问题" class="headerlink" title="git常用问题"></a>git常用问题</h1><ul><li><p>git status提示old mode改动问题</p><pre><code>- 单个项目配置    git config --add core.filemode false    忽略掉chmod改动</code></pre><ul><li><p>git全局配置：</p><p>  git config –global core.filemode false</p></li></ul></li><li><p>git出现换行符^m问题</p><pre><code>- git config --global core.autocrlf true</code></pre><ul><li>具体是true还是false看情况，也可配全局的，有问题时候再解决</li></ul></li><li><p>git config -list查看配置</p></li><li><p>clone代码方式</p><pre><code>- `https`除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用`ssh`协议而只能用`https`</code></pre></li><li><p>git log</p><pre><code>- git log --stat 简略统计信息</code></pre><ul><li>git log –pretty=oneline 简洁查看</li><li>git log –pretty=format:”%h - %an, %ar : %s”</li><li>git log –pretty=format:”%h %s” –graph</li><li>git log –author=Linus –oneline -5</li><li>git log –reverse –oneline</li><li>git log –oneline –before={3.weeks.ago} –after={2010-04-18} –no-merges</li><li>git log –since=2.weeks</li><li>git log –oneline –decorate –graph –all你自己提交历史、各个分支的指向以及项目的分支分叉情况</li><li><a href="http://git-scm.com/docs/git-log" target="_blank" rel="noopener">http://git-scm.com/docs/git-log</a> <h1 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h1></li></ul></li><li><p>vscode</p><pre><code>- 插件：Git Graph，GitLens。</code></pre></li><li><p>tortoise git</p><pre><code>- 这个右键选择git log可以查看所有的记录。</code></pre></li><li><p>目前我的选择</p><pre><code>- 目前代码服务器有些问题，使用tortoise git响应很慢，所以一般使用vscode的Git Graph查看提交记录。另外也可以用SourceTree。</code></pre></li></ul><blockquote><p>这篇文章是内部培训整理的文章，得出的结论就是，如果毕业的学生git都密接触过的话，看你的一定程度说明学校教育一定程度水平不是很好，会用的话也不一定好。</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">使用教程参考</a><br><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro git2</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git介绍&quot;&gt;&lt;a href=&quot;#git介绍&quot; class=&quot;headerlink&quot; title=&quot;git介绍&quot;&gt;&lt;/a&gt;git介绍&lt;/h1&gt;&lt;p&gt;CVS、SVN，集中式的版本控制系统不但速度慢，而且必须联网才能使用，而且有些要付费。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://hellolinux.xyz/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://hellolinux.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="git" scheme="https://hellolinux.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>obsidian的annotator插件</title>
    <link href="https://hellolinux.xyz/posts/c68c675b.html"/>
    <id>https://hellolinux.xyz/posts/c68c675b.html</id>
    <published>2022-07-18T23:55:25.000Z</published>
    <updated>2022-07-18T23:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li><p>基于 Hypothesis 标注的 本地/网络 pdf 或者 epub 标注插件</p></li><li><p>标注数据存在本地，所以支持本地块引对应的标注，也支持 Dataview 索引所有标注。</p></li><li><p>前提是需要把pdf或者epub文件放在obsidian库所在文件夹内</p></li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul><li><p>annotator安装好后可以在设置里面设置默认读取pdf或者epub的目录</p></li><li><p>新建pdf或者epub的标注文件时，需要在文件的开头加上如下内容</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">annotation-target: 文档.pdf</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li><p>这里的文档.pdf为文件名，设置的某特定目录下读取。</p></li><li><p>然后在点击三个点的地方会看到annotator的提示，点击即可出现pdf或者epub文档阅读，在上面就可以进行标注或加亮，跟hypothesis时一样的。</p></li><li><p>另外文件太大需要注意的是打开的时候会出现第一次加载需要一些时间。</p></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/432892362" target="_blank" rel="noopener">Annotator：让你的ob和PDF文件完美结合</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基于 Hypothesis 标注的 本地/网络 pdf 或者 epub 标注插件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;标注数据存在本地，所以支持本地块引对应的标注，也支持 Dataview 索引所有标注。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前提是需要把pdf或者epub文件放在obsidian库所在文件夹内&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://hellolinux.xyz/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="效率" scheme="https://hellolinux.xyz/categories/%E5%B7%A5%E5%85%B7/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="工具" scheme="https://hellolinux.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="效率" scheme="https://hellolinux.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="obsidian" scheme="https://hellolinux.xyz/tags/obsidian/"/>
    
  </entry>
  
  <entry>
    <title>读书这件事和安倍</title>
    <link href="https://hellolinux.xyz/posts/c68c675a.html"/>
    <id>https://hellolinux.xyz/posts/c68c675a.html</id>
    <published>2022-07-10T14:55:25.000Z</published>
    <updated>2022-07-10T14:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="读书，不确定时代中那件唯一确定的事"><a href="#读书，不确定时代中那件唯一确定的事" class="headerlink" title="读书，不确定时代中那件唯一确定的事"></a>读书，不确定时代中那件唯一确定的事</h1><ul><li><p>《未知的力量：未来生存指南》一书的作者杰米·霍姆斯（Jamie Holmes）说，在一个越来越复杂、不可预测的世界里，对我们的生存来说，最重要的不是智商，不是意志力，甚至不是自信，而是我们如何应对那些我们不理解的东西。  </p></li><li><p>当一件事情发生，我们需要调动已有的认知（或者说信念）对它进行消化，作出自己能够接受的解释。如此，我们才能恢复对外部世界的掌控感，从而继续在复杂的环境中生活。但很多时候，我们既有的信念会受到挑战，而这时人们又急于找到一种解释，这种认知失调带来的不适感，该如何调适、应对？  </p></li><li><p>《未知的力量》一书中，杰米·霍姆斯总结了五种常见的应对方式：  </p><ul><li><p>第一种，否认新认知；  </p></li><li><p>第二种，寻求肯定（affirmation），在不确定的境况中强化既有信念；  </p></li><li><p>第三种，寻求新认知相关讯息，验证其可信度，从而彻底取代旧认知；  </p></li><li><p>第四种，抽取（abstraction），搜寻新模式。人类的大脑善于搜寻模式，据称能够跟踪40多个环境线索，潜意识甚至可以跟踪200万个；  </p></li><li><p>第五种，组装（assembly），通过连接和重组，产生新想法。  </p></li></ul></li><li><p>概括地说，积极获取新连接、新知识，新论据，是应对不确定性的良策。米兰·昆德拉就建议人们通过不同类型的阅读广涉猎，尝试理解新知新事，去持续打破自己的旧认知与思维定式。他在《小说的艺术》中所批判了人性中渴望非黑即白、固守确定性的部分：“人希望有一个世界，其中的善与恶泾渭分明，因为人心里有一个天生的不可驯服的欲望：在理解之前先进行判断。”  </p></li><li><p>从另一方面来说，阅读本身也为充满无序与偶然的生活，确立了某种秩序感。它像是生活的「锚」，帮你在混乱中平稳前进。阅读这一行为简单、容易坚持，而收效可观——著名舞蹈动作设计师崔拉·夏普这样度过她的一天：5:30准时起床，打车到健身中心，跟随同一个教练锻炼，然后冲凉，吃三个煮熟的鸡蛋白，喝杯咖啡，再打一个小时电话，之后在工作室里工作半小时，与舞伴一起排练，回家吃饭，花几个小时阅读，然后睡觉。每一天都是如此。  </p></li><li><p>她说：“舞蹈家的生活，就是重复。”而简单的重复，已足以训练、塑造一个人强大的心智。  </p></li></ul><p>本来像概括，但是发现，我没法下手，原滋原味事最好的。——三联周刊文章，原文参考最后链接。</p><blockquote><p>喜欢这句话：阅读本身也为充满无序与偶然的生活，确立了某种秩序感。</p></blockquote><h1 id="对于安倍事件"><a href="#对于安倍事件" class="headerlink" title="对于安倍事件"></a>对于安倍事件</h1><ul><li>其实应该分开说利弊好坏：<br>有功有过，在日本经历失落的二十年，政策余地其实并不多，他可能是在做他能力范围之内的事，采取的货币或者经济政策，对于国家（日本）而言，可能只有这样，确实存在出卖日本国家的经济利益，但是本身可选的余地就有限，在保证国家实力的前提下才去了这些政策（只是目前日本本国的科技实力还是存在的）。但是对于社会层面的问题，阶层固化，财富极度集中，虽然说能做的有限，但是安倍家族本身就是历史悠久的顶层阶级，不由得去想这背后的利益，而他做的不是从内部解决，而是拉别的国家的人（移民），没说不好，难道日本本国人就不需要改善或者其他吗？仅仅只是交给时间。</li></ul><p>我阴谋论一下，安倍事件背后要么是民间自发，要么就是对立面的政客跟民间合作的结果，矛盾到了一定阶段，肯定会推动一些改革，不管好坏吧。<br>想到了“《可惜不是你》”。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://lifeweek.com.cn/article/170945" target="_blank" rel="noopener">读书，不确定时代中那件唯一确定的事</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;读书，不确定时代中那件唯一确定的事&quot;&gt;&lt;a href=&quot;#读书，不确定时代中那件唯一确定的事&quot; class=&quot;headerlink&quot; title=&quot;读书，不确定时代中那件唯一确定的事&quot;&gt;&lt;/a&gt;读书，不确定时代中那件唯一确定的事&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;《未知的力量：未来生存指南》一书的作者杰米·霍姆斯（Jamie Holmes）说，在一个越来越复杂、不可预测的世界里，对我们的生存来说，最重要的不是智商，不是意志力，甚至不是自信，而是我们如何应对那些我们不理解的东西。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当一件事情发生，我们需要调动已有的认知（或者说信念）对它进行消化，作出自己能够接受的解释。如此，我们才能恢复对外部世界的掌控感，从而继续在复杂的环境中生活。但很多时候，我们既有的信念会受到挑战，而这时人们又急于找到一种解释，这种认知失调带来的不适感，该如何调适、应对？  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《未知的力量》一书中，杰米·霍姆斯总结了五种常见的应对方式：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一种，否认新认知；  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二种，寻求肯定（affirmation），在不确定的境况中强化既有信念；  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三种，寻求新认知相关讯息，验证其可信度，从而彻底取代旧认知；  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第四种，抽取（abstraction），搜寻新模式。人类的大脑善于搜寻模式，据称能够跟踪40多个环境线索，潜意识甚至可以跟踪200万个；  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第五种，组装（assembly），通过连接和重组，产生新想法。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;概括地说，积极获取新连接、新知识，新论据，是应对不确定性的良策。米兰·昆德拉就建议人们通过不同类型的阅读广涉猎，尝试理解新知新事，去持续打破自己的旧认知与思维定式。他在《小说的艺术》中所批判了人性中渴望非黑即白、固守确定性的部分：“人希望有一个世界，其中的善与恶泾渭分明，因为人心里有一个天生的不可驯服的欲望：在理解之前先进行判断。”  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从另一方面来说，阅读本身也为充满无序与偶然的生活，确立了某种秩序感。它像是生活的「锚」，帮你在混乱中平稳前进。阅读这一行为简单、容易坚持，而收效可观——著名舞蹈动作设计师崔拉·夏普这样度过她的一天：5:30准时起床，打车到健身中心，跟随同一个教练锻炼，然后冲凉，吃三个煮熟的鸡蛋白，喝杯咖啡，再打一个小时电话，之后在工作室里工作半小时，与舞伴一起排练，回家吃饭，花几个小时阅读，然后睡觉。每一天都是如此。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;她说：“舞蹈家的生活，就是重复。”而简单的重复，已足以训练、塑造一个人强大的心智。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://hellolinux.xyz/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="https://hellolinux.xyz/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>hypothesis同步obsidian</title>
    <link href="https://hellolinux.xyz/posts/c68c6759.html"/>
    <id>https://hellolinux.xyz/posts/c68c6759.html</id>
    <published>2022-07-07T14:55:25.000Z</published>
    <updated>2022-07-07T14:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hypothesis注册及使用"><a href="#hypothesis注册及使用" class="headerlink" title="hypothesis注册及使用"></a>hypothesis注册及使用</h1><p><a href="https://hypothes.is/" target="_blank" rel="noopener">https://hypothes.is/</a></p><p>注册账号，了解基本的使用，标签、分组、私有和公共。</p><p>在账号设置中找到develop，获取api token，后面再obsidian中需要使用。</p><h1 id="obsidian中使用hypothesis插件"><a href="#obsidian中使用hypothesis插件" class="headerlink" title="obsidian中使用hypothesis插件"></a>obsidian中使用hypothesis插件</h1><p>保证能正常访问国际网络，社区插件中找到hypothesis插件</p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/hypothesis.png" alt=""></p><p>这里需要填写上面的token进行连接，另外配置一下同的文件夹，最好设置成手动同步，在obsidian左侧栏会出现一个hypothesis图标，点击及进行同步。</p><p>对于修改同步模板，参考下面。</p><p>主要修改了标签中的:-&gt;::，因为两个引号在obsidian中会被识别成标签，后续可以被再处理（dataview）。</p><h1 id="插件中的模板"><a href="#插件中的模板" class="headerlink" title="插件中的模板"></a>插件中的模板</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if is_new_article %&#125;</span><br><span class="line"># &#123;&#123;title&#125;&#125;</span><br><span class="line"></span><br><span class="line">## Metadata</span><br><span class="line">&#123;% if author %&#125;- Author: [&#123;&#123;author&#125;&#125;](&#123;&#123;authorUrl&#125;&#125;)&#123;% endif %&#125;</span><br><span class="line">- Title: &#123;&#123;title&#125;&#125;</span><br><span class="line">&#123;% if url %&#125;- Reference: &#123;&#123;url&#125;&#125;&#123;% endif %&#125;</span><br><span class="line">- Category: #article</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;%- if is_new_article %&#125;</span><br><span class="line">## Page Notes</span><br><span class="line">&#123;% for highlight in page_notes -%&#125;</span><br><span class="line">&#123;&#123;highlight.annotation&#125;&#125;</span><br><span class="line">&#123;%- if highlight.tags | length %&#125;</span><br><span class="line">Tags: &#123;% for tag in highlight.tags -%&#125; #&#123;&#123;tag | replace(" ", "-")+" "&#125;&#125;&#123;%- endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;%- endif -%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%- if is_new_article -%&#125;</span><br><span class="line">## Highlights</span><br><span class="line">&#123;% for highlight in highlights -%&#125;</span><br><span class="line">- &#123;&#123;highlight.text&#125;&#125; — [Updated on &#123;&#123;highlight.updated&#125;&#125;](&#123;&#123;highlight.incontext&#125;&#125;)</span><br><span class="line">&#123;%- if 'Private' != highlight.group %&#125; — Group: #&#123;&#123;highlight.group | replace(" ", "-")&#125;&#125;&#123;% endif %&#125;</span><br><span class="line">&#123;% if highlight.tags | length %&#125;    - Tags: &#123;% for tag in highlight.tags %&#125; #&#123;&#123;tag | replace(" ", "-")+" "&#125;&#125;&#123;% endfor %&#125;</span><br><span class="line">&#123;% endif -%&#125;</span><br><span class="line">&#123;% if highlight.annotation %&#125;    - Annotation: &#123;&#123;highlight.annotation&#125;&#125;&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h1 id="修改中模板"><a href="#修改中模板" class="headerlink" title="修改中模板"></a>修改中模板</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if is_new_article %&#125;</span><br><span class="line"># &#123;&#123;title&#125;&#125;</span><br><span class="line"></span><br><span class="line">## Metadata</span><br><span class="line">&#123;% if author %&#125;- Author:: [&#123;&#123;author&#125;&#125;](&#123;&#123;authorUrl&#125;&#125;)&#123;% endif %&#125;</span><br><span class="line">- Title:: &#123;&#123;title&#125;&#125;</span><br><span class="line">- Created:: &#123;&#123;created&#125;&#125;</span><br><span class="line">&#123;% if url %&#125;- Reference:: &#123;&#123;url&#125;&#125;&#123;% endif %&#125;</span><br><span class="line">- Category:: #source/hypothesis</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;%- if is_new_article %&#125;</span><br><span class="line">## Page Notes</span><br><span class="line">&#123;% for highlight in page_notes -%&#125;</span><br><span class="line">&#123;&#123;highlight.annotation&#125;&#125;</span><br><span class="line">&#123;%- if highlight.tags | length %&#125;</span><br><span class="line">Tags: &#123;% for tag in highlight.tags -%&#125; #&#123;&#123;tag | replace(" ", "-")+" "&#125;&#125;&#123;%- endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;%- endif -%&#125;</span><br><span class="line"></span><br><span class="line">&#123;%- if is_new_article -%&#125;</span><br><span class="line">## Highlights</span><br><span class="line">&#123;% for highlight in highlights -%&#125;</span><br><span class="line">- &#123;&#123;highlight.text&#125;&#125;</span><br><span class="line">&#123;%- if 'Private' != highlight.group %&#125; — Group: #&#123;&#123;highlight.group | replace(" ", "-")&#125;&#125;&#123;% endif %&#125;</span><br><span class="line">&#123;% if highlight.tags | length %&#125;    - Tags: &#123;% for tag in highlight.tags %&#125; #&#123;&#123;tag | replace(" ", "-")+" "&#125;&#125;&#123;% endfor %&#125;</span><br><span class="line">&#123;% endif -%&#125;</span><br><span class="line">&#123;% if highlight.annotation %&#125;    - Annotation: &#123;&#123;highlight.annotation&#125;&#125;&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ul><li> — [Updated on ]() </li></ul><h1 id="设置参考"><a href="#设置参考" class="headerlink" title="设置参考"></a>设置参考</h1><p><a href="https://momentjs.com/docs/#/displaying/format/" target="_blank" rel="noopener">https://momentjs.com/docs/#/displaying/format/</a></p><p><a href="https://mozilla.github.io/nunjucks/" target="_blank" rel="noopener">模板参考文档</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hypothesis注册及使用&quot;&gt;&lt;a href=&quot;#hypothesis注册及使用&quot; class=&quot;headerlink&quot; title=&quot;hypothesis注册及使用&quot;&gt;&lt;/a&gt;hypothesis注册及使用&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://hypothes.is/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hypothes.is/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="效率" scheme="https://hellolinux.xyz/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="工具" scheme="https://hellolinux.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="效率" scheme="https://hellolinux.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>自动获取Pocket发送到Telegram</title>
    <link href="https://hellolinux.xyz/posts/c68c6758.html"/>
    <id>https://hellolinux.xyz/posts/c68c6758.html</id>
    <published>2022-07-06T09:55:25.000Z</published>
    <updated>2022-07-06T09:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>分享到的每日资讯telegram频道：<a href="https://t.me/hellolinuxRss" target="_blank" rel="noopener">https://t.me/hellolinuxRss</a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li><p>创建一个机器人</p><ul><li>在 Teletram 中搜索用户 <code>@BotFather</code></li></ul></li><li><p>发送命令 <code>/newbot</code> 并为你的机器人指定 <code>name</code> 和 <code>username</code></p><ul><li>拿到 token 并记录在一个安全的地方，后边会用到。</li></ul></li><li><p>Use this token to access the HTTP API:</p><ul><li>For a description of the Bot API, see this page: <a href="https://core.telegram.org/bots/api" target="_blank" rel="noopener">https://core.telegram.org/bots/api</a></li></ul></li><li><p>创建一个频道并把这个bot添加进去作为管理员</p><ul><li>并在频道中@bot 发送任何消息，再在浏览器中输入：<a href="https://api.telegram.org/bot{token}/getUpdates，" target="_blank" rel="noopener">https://api.telegram.org/bot{token}/getUpdates，</a> 获取对应chat_id，后面会用到，如果有多个，可以后面试下，确认哪个是自己需要的。</li></ul></li></ul><h1 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h1><h2 id="curl测试"><a href="#curl测试" class="headerlink" title="curl测试"></a>curl测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s -X POST https://api.telegram.org/bot&#123;token&#125;/sendMessage -d chat_id=&#123;chatId&#125; -d text=<span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure><h2 id="requests测试"><a href="#requests测试" class="headerlink" title="requests测试"></a>requests测试</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">import</span> requests</span><br><span class="line"><span class="attr">token</span> = <span class="string">"1876xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx2NhVRI"</span> <span class="comment"># 替换成你自己的token</span></span><br><span class="line"><span class="attr">chat_id</span> = <span class="number">130000006</span> <span class="comment"># 替换成你自己的chat_id</span></span><br><span class="line"><span class="attr">r</span> = requests.post(f'https://api.telegram.org/bot&#123;token&#125;/sendMessage', <span class="attr">json=&#123;"chat_id":</span> chat_id, <span class="string">"text"</span>: <span class="string">"【机器人】测试消息"</span>&#125;)</span><br><span class="line">print(r.json())</span><br></pre></td></tr></table></figure><h2 id="python-telegram-bot"><a href="#python-telegram-bot" class="headerlink" title="python-telegram-bot"></a>python-telegram-bot</h2><p><a href="https://docs.python-telegram-bot.org/en/stable" target="_blank" rel="noopener">https://docs.python-telegram-bot.org/en/stable</a></p><p>安装python库：pip install python-telegram-bot –upgrade</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> telegram</span><br><span class="line"></span><br><span class="line">chat_id = <span class="string">''</span></span><br><span class="line">token = <span class="string">''</span></span><br><span class="line">bot = telegram.Bot(token)</span><br><span class="line"></span><br><span class="line">bot.send_message(chat_id=chat_id,text=<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line">bot.send_message(</span><br><span class="line">    chat_id=chat_id,</span><br><span class="line">    text=<span class="string">'&lt;a href="https://hellolinux.xyz/"&gt;hellolinux的个人博客&lt;/a&gt;'</span>,</span><br><span class="line">    parse_mode=telegram.ParseMode.HTML</span><br><span class="line">)</span><br><span class="line">bot.send_message(chat_id=chat_id,text=<span class="string">'[hellolinux的个人博客](https://hellolinux.xyz/)'</span>,parse_mode=telegram.ParseMode.MARKDOWN)</span><br></pre></td></tr></table></figure><h3 id="对话机器人"><a href="#对话机器人" class="headerlink" title="对话机器人"></a>对话机器人</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> telegram.ext.updater <span class="keyword">import</span> Updater</span><br><span class="line"><span class="keyword">from</span> telegram.update <span class="keyword">import</span> Update</span><br><span class="line"><span class="keyword">from</span> telegram.ext.callbackcontext <span class="keyword">import</span> CallbackContext</span><br><span class="line"><span class="keyword">from</span> telegram.ext.commandhandler <span class="keyword">import</span> CommandHandler</span><br><span class="line"><span class="keyword">from</span> telegram.ext.messagehandler <span class="keyword">import</span> MessageHandler</span><br><span class="line"><span class="keyword">from</span> telegram.ext.filters <span class="keyword">import</span> Filters</span><br><span class="line"></span><br><span class="line">updater = Updater(<span class="string">"your_own_API_Token got from BotFather"</span>,</span><br><span class="line">        use_context=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(update: Update, context: CallbackContext)</span>:</span></span><br><span class="line">  update.message.reply_text(</span><br><span class="line">    <span class="string">"Hello sir, Welcome to the Bot.Please write\</span></span><br><span class="line"><span class="string">    /help to see the commands available."</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">help</span><span class="params">(update: Update, context: CallbackContext)</span>:</span></span><br><span class="line">  update.message.reply_text(<span class="string">"""Available Commands :-</span></span><br><span class="line"><span class="string">  /youtube - To get the youtube URL</span></span><br><span class="line"><span class="string">  /linkedin - To get the LinkedIn profile URL</span></span><br><span class="line"><span class="string">  /gmail - To get gmail URL</span></span><br><span class="line"><span class="string">  /geeks - To get the GeeksforGeeks URL"""</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gmail_url</span><span class="params">(update: Update, context: CallbackContext)</span>:</span></span><br><span class="line">  update.message.reply_text(</span><br><span class="line">    <span class="string">"Your gmail link here (I am not\</span></span><br><span class="line"><span class="string">    giving mine one for security reasons)"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">youtube_url</span><span class="params">(update: Update, context: CallbackContext)</span>:</span></span><br><span class="line">  update.message.reply_text(<span class="string">"Youtube Link =&gt;\</span></span><br><span class="line"><span class="string">  https://www.youtube.com/"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linkedIn_url</span><span class="params">(update: Update, context: CallbackContext)</span>:</span></span><br><span class="line">  update.message.reply_text(</span><br><span class="line">    <span class="string">"LinkedIn URL =&gt; \</span></span><br><span class="line"><span class="string">    https://www.linkedin.com/in/dwaipayan-bandyopadhyay-007a/"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geeks_url</span><span class="params">(update: Update, context: CallbackContext)</span>:</span></span><br><span class="line">  update.message.reply_text(</span><br><span class="line">    <span class="string">"GeeksforGeeks URL =&gt; https://www.geeksforgeeks.org/"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unknown</span><span class="params">(update: Update, context: CallbackContext)</span>:</span></span><br><span class="line">  update.message.reply_text(</span><br><span class="line">    <span class="string">"Sorry '%s' is not a valid command"</span> % update.message.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unknown_text</span><span class="params">(update: Update, context: CallbackContext)</span>:</span></span><br><span class="line">  update.message.reply_text(</span><br><span class="line">    <span class="string">"Sorry I can't recognize you , you said '%s'"</span> % update.message.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">updater.dispatcher.add_handler(CommandHandler(<span class="string">'start'</span>, start))</span><br><span class="line">updater.dispatcher.add_handler(CommandHandler(<span class="string">'youtube'</span>, youtube_url))</span><br><span class="line">updater.dispatcher.add_handler(CommandHandler(<span class="string">'help'</span>, help))</span><br><span class="line">updater.dispatcher.add_handler(CommandHandler(<span class="string">'linkedin'</span>, linkedIn_url))</span><br><span class="line">updater.dispatcher.add_handler(CommandHandler(<span class="string">'gmail'</span>, gmail_url))</span><br><span class="line">updater.dispatcher.add_handler(CommandHandler(<span class="string">'geeks'</span>, geeks_url))</span><br><span class="line">updater.dispatcher.add_handler(MessageHandler(Filters.text, unknown))</span><br><span class="line">updater.dispatcher.add_handler(MessageHandler(</span><br><span class="line">  Filters.command, unknown)) <span class="comment"># Filters out unknown commands</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Filters out unknown messages.</span></span><br><span class="line">updater.dispatcher.add_handler(MessageHandler(Filters.text, unknown_text))</span><br><span class="line"></span><br><span class="line">updater.start_polling()</span><br></pre></td></tr></table></figure><h2 id="pyTelegramBotAPI库"><a href="#pyTelegramBotAPI库" class="headerlink" title="pyTelegramBotAPI库"></a>pyTelegramBotAPI库</h2><p><a href="https://github.com/eternnoir/pyTelegramBotAPI" target="_blank" rel="noopener">https://github.com/eternnoir/pyTelegramBotAPI</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://core.telegram.org/bots/api#sendmessage" target="_blank" rel="noopener">https://core.telegram.org/bots/api#sendmessage</a></p><p><a href="https://docs.python-telegram-bot.org/en/stable/telegram.parsemode.html" target="_blank" rel="noopener">https://docs.python-telegram-bot.org/en/stable/telegram.parsemode.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享到的每日资讯telegram频道：&lt;a href=&quot;https://t.me/hellolinuxRss&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://t.me/hellolinuxRss&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://hellolinux.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://hellolinux.xyz/categories/%E6%8A%80%E6%9C%AF/python/"/>
    
    
      <category term="python" scheme="https://hellolinux.xyz/tags/python/"/>
    
      <category term="telegram" scheme="https://hellolinux.xyz/tags/telegram/"/>
    
      <category term="pocket" scheme="https://hellolinux.xyz/tags/pocket/"/>
    
  </entry>
  
  <entry>
    <title>自动获取Pocket发送到mastodon</title>
    <link href="https://hellolinux.xyz/posts/c68c6757.html"/>
    <id>https://hellolinux.xyz/posts/c68c6757.html</id>
    <published>2022-07-03T12:55:25.000Z</published>
    <updated>2022-07-03T12:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pocket操作"><a href="#Pocket操作" class="headerlink" title="Pocket操作"></a>Pocket操作</h1><ul><li>pip install pocket-api<ul><li><a href="https://pypi.org/project/pocket-api/" target="_blank" rel="noopener">https://pypi.org/project/pocket-api/</a></li></ul></li></ul><p>主要是获取CONSUMER KEY和access token</p><ul><li><p>获取CONSUMER KEY</p><ul><li><a href="https://getpocket.com/developer/apps/new" target="_blank" rel="noopener">https://getpocket.com/developer/apps/new</a></li><li>设置对应名字和权限，然后得到CONSUMER KEY，名字后面会用到。</li></ul></li><li><p>oauth 取得code</p><ul><li><p>post请求 <a href="https://getpocket.com/v3/oauth/request" target="_blank" rel="noopener">https://getpocket.com/v3/oauth/request</a></p><p>consumer_key=<consumer_key></p><p>redirect_uri=<app_name>:authorizationFinished</p></li></ul><p>返回类似：code=a546cd87-2546-86ea-b213-3d5de4</p></li><li><p>激活授权</p><ul><li>浏览器输入：<a href="https://getpocket.com/auth/authorize?request_token=a546cd87-2546-86ea-b213-3d5de4&amp;redirect_uri=" target="_blank" rel="noopener">https://getpocket.com/auth/authorize?request_token=a546cd87-2546-86ea-b213-3d5de4&amp;redirect_uri=</a><app_name>:authorizationFinished</li></ul></li><li><p>获取access_token</p><ul><li><p>post请求：<a href="https%3A%2F%2Fgetpocket.com%2Fv3%2Foauth%2Fauthorize">https://getpocket.com/v3/oauth/authorize</a> </p><p>consumer_key=</p><p>code=</p></li></ul><p>返回access_token=</p></li></ul><p>参考<a href="https://getpocket.com/developer/docs/v3/retrieve" target="_blank" rel="noopener">https://getpocket.com/developer/docs/v3/retrieve</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = Pocket(consumer_key=<span class="string">''</span>,access_token=<span class="string">''</span>)</span><br><span class="line">p.retrieve(offset=<span class="number">0</span>,count=<span class="number">5</span>,tag=<span class="string">'hk'</span>,since=test_timestamp)</span><br><span class="line"><span class="comment"># 根据返回值读取 resolved_url和resolved_title</span></span><br></pre></td></tr></table></figure><h1 id="发送消息到mastodon"><a href="#发送消息到mastodon" class="headerlink" title="发送消息到mastodon"></a>发送消息到mastodon</h1><ul><li><p>获取对应参数：应用 ID，应用密钥，你的访问令牌</p></li><li><p>pip install mastodon.py</p><ul><li><a href="https://mastodonpy.readthedocs.io/en/stable/" target="_blank" rel="noopener">https://mastodonpy.readthedocs.io/en/stable/</a></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mastodon = Mastodon(</span><br><span class="line">    client_id=<span class="string">''</span>,</span><br><span class="line">    client_secret=<span class="string">''</span>,</span><br><span class="line">    access_token = <span class="string">''</span>,</span><br><span class="line">    api_base_url = <span class="string">'https://domain'</span></span><br><span class="line">)</span><br><span class="line">mastodon.toot(str)</span><br><span class="line"><span class="comment"># str为发送文本，其他参数参考docs</span></span><br></pre></td></tr></table></figure><h1 id="定时执行"><a href="#定时执行" class="headerlink" title="定时执行"></a>定时执行</h1><p>每天1点定时执行</p><p>0 1 * * * python /home/youScript.py</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://getpocket.com/developer/docs/v3/retrieve" target="_blank" rel="noopener">https://getpocket.com/developer/docs/v3/retrieve</a></p><p><a href="https://www.jianshu.com/p/5b5a9031a193" target="_blank" rel="noopener">Pocket API + Python 學習筆記</a> </p><p><a href="https://segmentfault.com/a/1190000000800369" target="_blank" rel="noopener">利用Pocket API实现分享自己的阅读列表</a> </p><p><a href="https://mantyke.icu/posts/2022/weibo2toot/" target="_blank" rel="noopener">Mastodon | 微博转发到 Mastodon bot</a> </p><p><a href="https://mastodonpy.readthedocs.io/en/stable/" target="_blank" rel="noopener">https://mastodonpy.readthedocs.io/en/stable/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Pocket操作&quot;&gt;&lt;a href=&quot;#Pocket操作&quot; class=&quot;headerlink&quot; title=&quot;Pocket操作&quot;&gt;&lt;/a&gt;Pocket操作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;pip install pocket-api&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pypi.org/project/pocket-api/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pypi.org/project/pocket-api/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://hellolinux.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://hellolinux.xyz/categories/%E6%8A%80%E6%9C%AF/python/"/>
    
    
      <category term="python" scheme="https://hellolinux.xyz/tags/python/"/>
    
      <category term="pocket" scheme="https://hellolinux.xyz/tags/pocket/"/>
    
      <category term="mastodon" scheme="https://hellolinux.xyz/tags/mastodon/"/>
    
  </entry>
  
  <entry>
    <title>python selenium自动化操作社交媒体</title>
    <link href="https://hellolinux.xyz/posts/c68c6756.html"/>
    <id>https://hellolinux.xyz/posts/c68c6756.html</id>
    <published>2022-07-02T10:55:25.000Z</published>
    <updated>2022-07-02T10:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>读取cookie，判断cookie的有效性，定时操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> WebDriverException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">urlsocial = <span class="string">""</span> <span class="comment">#loginurl</span></span><br><span class="line">urlLocal = <span class="string">''</span> <span class="comment">#Requesturl</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_browser</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># path = r'C:/MyEnv/chromedriver.exe '</span></span><br><span class="line">    <span class="comment"># ser = Service(path)</span></span><br><span class="line">    PROXY = <span class="string">"socks5://127.0.0.1:1080"</span></span><br><span class="line">    print(<span class="string">"----------- start loading browser data ------------"</span>)</span><br><span class="line">    chrome_options = webdriver.ChromeOptions()</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--proxy-server=%s'</span> % PROXY)</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line">    <span class="comment"># chrome_options.add_argument("--no-sandbox")</span></span><br><span class="line">    chrome_options.add_argument(<span class="string">'lang=zh-CN'</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">'user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36'</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">"disable-blink-features=AutomationControlled"</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">"disable-infobars"</span>)</span><br><span class="line">    chrome_options.add_experimental_option(<span class="string">'useAutomationExtension'</span>, <span class="literal">False</span>)</span><br><span class="line">    chrome_options.add_experimental_option(<span class="string">"excludeSwitches"</span>, [<span class="string">'enable-automation'</span>])</span><br><span class="line">    chrome_options.add_argument(<span class="string">'blink-settings=imagesEnabled=false'</span>)</span><br><span class="line">    prefs = &#123;</span><br><span class="line">        <span class="string">'profile.default_content_setting_values'</span>:  &#123;</span><br><span class="line">            <span class="string">'images'</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">'notifications'</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    prefs[<span class="string">"credentials_enable_service"</span>] = <span class="literal">False</span></span><br><span class="line">    prefs[<span class="string">"profile.password_manager_enabled"</span>] = <span class="literal">False</span></span><br><span class="line">    chrome_options.add_experimental_option(<span class="string">"prefs"</span>, prefs)</span><br><span class="line">    browser = webdriver.Chrome(options=chrome_options)</span><br><span class="line">    <span class="comment"># browser = webdriver.Chrome(service=ser, options=chrome_options)</span></span><br><span class="line">    browser.maximize_window()</span><br><span class="line">    browser.get(urlsocial)</span><br><span class="line">    <span class="keyword">return</span> browser</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_cookies</span><span class="params">(driver)</span>:</span></span><br><span class="line">    driver.get(urlLocal)</span><br><span class="line">    response = driver.find_element_by_xpath(<span class="string">'//*[contains(text(),"Anything")]'</span>)</span><br><span class="line">    <span class="keyword">if</span> response:</span><br><span class="line">        print(<span class="string">"cookie is OK"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"cookie is bad"</span>)</span><br><span class="line">        print(<span class="string">"res:"</span>,response)</span><br><span class="line">        get_cookies(driver)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookies</span><span class="params">(driver)</span>:</span></span><br><span class="line">    driver.get(urlsocial)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">'//*[@id="user_email"]'</span>).send_keys(<span class="string">'your_email'</span>)</span><br><span class="line">    driver.implicitly_wait(<span class="number">1</span>)</span><br><span class="line">    driver.find_element_by_xpath(<span class="string">'//*[@id="user_password"]'</span>).send_keys(<span class="string">'your_password'</span>)</span><br><span class="line">    driver.implicitly_wait(<span class="number">1</span>)  <span class="comment"># seconds</span></span><br><span class="line">    driver.find_element_by_xpath(<span class="string">'//*[@id="user_password"]'</span>).send_keys(Keys.RETURN)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    Cookies = driver.get_cookies() </span><br><span class="line">    jsCookies = json.dumps(Cookies) </span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'cookies.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(jsCookies)</span><br><span class="line">    print(<span class="string">'cookies already writed'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_cookies</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'cookies.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        Cookies = json.loads(f.read())</span><br><span class="line">    cookies = []</span><br><span class="line">    <span class="keyword">for</span> cookie <span class="keyword">in</span> Cookies:</span><br><span class="line">        cookie_dict = &#123;</span><br><span class="line">            <span class="string">'domain'</span>: <span class="string">'.liker.social'</span>,</span><br><span class="line">            <span class="string">'name'</span>: cookie.get(<span class="string">'name'</span>),</span><br><span class="line">            <span class="string">'value'</span>: cookie.get(<span class="string">'value'</span>),</span><br><span class="line">            <span class="string">'expires'</span>: <span class="string">''</span>,</span><br><span class="line">            <span class="string">'path'</span>: <span class="string">'/'</span>,</span><br><span class="line">            <span class="string">'httpOnly'</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">'HostOnly'</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">'Secure'</span>: <span class="literal">False</span></span><br><span class="line">        &#125;</span><br><span class="line">        cookies.append(cookie_dict)</span><br><span class="line">    <span class="keyword">return</span> cookies</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(driver)</span>:</span></span><br><span class="line">    cookies = read_cookies()</span><br><span class="line">    <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</span><br><span class="line">        driver.add_cookie(cookie)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    driver.refresh()</span><br><span class="line">    check_cookies(driver)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">operate</span><span class="params">(browser)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        browser.get(urlLocal)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        js = <span class="string">"return action=document.body.scrollHeight"</span></span><br><span class="line">        height = browser.execute_script(js)</span><br><span class="line">        browser.execute_script(<span class="string">'window.scrollTo(0,document.body.scrollHeight)'</span>)</span><br><span class="line">        sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="comment"># ...any operation</span></span><br><span class="line">    <span class="keyword">except</span> WebDriverException <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"not find element 1111"</span>, e)</span><br><span class="line">    <span class="keyword">except</span> AssertionError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"no exist keyword 0000"</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># print(browser.page_source)</span></span><br><span class="line">        browser.quit()</span><br><span class="line">        print(<span class="string">'---------end---------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(<span class="string">'start'</span>)</span><br><span class="line">            driver = init_browser()</span><br><span class="line">            <span class="comment"># get_cookies(driver)</span></span><br><span class="line">            login(driver)</span><br><span class="line">            operate(driver)</span><br><span class="line">            sleeptime = random.randrange(<span class="number">18000</span>, <span class="number">24000</span>)</span><br><span class="line">            time.sleep(sleeptime)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      selenium自动化操作社交媒体介绍
    
    </summary>
    
    
      <category term="技术" scheme="https://hellolinux.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://hellolinux.xyz/categories/%E6%8A%80%E6%9C%AF/python/"/>
    
    
      <category term="技术" scheme="https://hellolinux.xyz/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://hellolinux.xyz/tags/python/"/>
    
      <category term="自动化" scheme="https://hellolinux.xyz/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>美元环流及趋势判断</title>
    <link href="https://hellolinux.xyz/posts/c68c6755.html"/>
    <id>https://hellolinux.xyz/posts/c68c6755.html</id>
    <published>2022-07-01T14:55:25.000Z</published>
    <updated>2022-07-01T14:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="美元环流的倒金字塔结构"><a href="#美元环流的倒金字塔结构" class="headerlink" title="美元环流的倒金字塔结构"></a>美元环流的倒金字塔结构</h1><p>准备金下降到3万亿美元以下，很危险，还要发国债。2.7万亿，2.5-2.7万亿经济会出问题。<br>借贷美元最多的国家是新兴市场国家，加息周期最先影响。</p><blockquote><p>新兴市场国家，股市债市汇市三杀</p><p>最先出现——货币基差互换，其中的美元负基差的程度，负数到<br>其次，海外美元的远期合约和OIS之差</p></blockquote><p>美联储救助其他经济体方式：</p><ul><li>央行互换（货币），央行货币互换</li><li>FIMA国际的回购常备借贷利率（国外常备回购便利）——美联储资产负债表中  FIMA海外回购工具，SRF美国的常备回购工具（国内常备回购便利，类似于国内的“酸辣粉”（SLF），政策利率走廊的上限。也就是当市场利率高于SRF利率的时候，金融机构就可以选择向美联储兑换流动性。）<br>Foreign and International Monetary Authorities</li></ul><p><strong>目前基本是0，如果数据大幅飙升，也就是发生了金融危机</strong>  </p><p><a href="https://www.youtube.com/watch?v=IoRo-CSEkL4&ab_channel=%E5%AE%8B%E9%B8%BF%E5%85%B5%E9%B8%BF%E5%AD%A6%E9%99%A2" target="_blank" rel="noopener">新一轮金融风暴引爆点又在何方</a><br><a href="https://www.federalreserve.gov/releases/h41/current/" target="_blank" rel="noopener">https://www.federalreserve.gov/releases/h41/current/</a><br><a href="https://www.federalreserve.gov/monetarypolicy/fima-repo-facility-faqs.htm" target="_blank" rel="noopener">https://www.federalreserve.gov/monetarypolicy/fima-repo-facility-faqs.htm</a></p><h2 id="美联储货币互换网络"><a href="#美联储货币互换网络" class="headerlink" title="美联储货币互换网络"></a>美联储货币互换网络</h2><h3 id="2013年"><a href="#2013年" class="headerlink" title="2013年"></a>2013年</h3><p>为退出QE作准备，解决短期流动性短缺：</p><p>2013年10月31日，美联储、欧洲央行、英国央行、日本央行、加拿大央行和瑞士央行，全球六家主要央行把现有的临时双边流动性互换协议，转换成长期货币互换协议。根据美联储公告，这些互换协议在六国央行间建立起了“双边货币互换网络”，一旦签订双边互换协议的两家央行认为当前市场状况可以保证互换发生，那么有流动性需求的央行就可以按照协议规定获得来自其他五家央行的五种货币流动性。<br>根据该协议，美联储在事实上成为欧、日、英、加、瑞央行的最后贷款人。随着美联储未来逐步退出宽松货币政策，全球正面临新一轮的美元回流，2013年印度、印尼等新兴市场的资本外流，已经凸显了美元国际流动性的稀缺。而美联储等6家央行的货币互换协议，构建了一个美元最后贷款人的垄断机制。美联储承担另外几个经济体最后贷款人职能，改变、分化了国际货币体系，国际货币体系进入“大西洋体系”新阶段。</p><h3 id="2020年"><a href="#2020年" class="headerlink" title="2020年"></a>2020年</h3><p>2020.3，货币互换协议价格下调25个基点</p><p>2020.3，美联储直接支持企业和居民部门，帮助修复企业和居民的资产负债表，直接购买金融市场的商业票据、企业债和市政债券，以及未来可以购买股票，这样美联储从传统意义的华尔街的指导者、裁判者，直接进入华尔街金融市场，成为了最重要的华尔街的交易者，由此华尔街的游戏规则，彻底被改变。</p><p>2020年3月15日，美联储联合加拿大央行、英国央行、日本央行、欧洲央行和瑞士央行宣布采取协调行动，利用现有货币互换额度为美元流动性提供支持，各央行一致同意将货币互换协议价格下调25个基点。3月20日，美联储宣布，将与上述五大央行的互换操作频率从每周提高到每天。</p><p>美联储在美东时间2020年4月16日发布的数据显示，2020年4月15日美联储资产规模达到6.4万亿美元，比一周前高出近3000亿美元。美联储继续走在快速“扩表”的道路上。</p><blockquote><p>未来100年的世界格局彻底发生变革，以北美洲与拉丁美洲为核心的蓝方，与世界其他各国组成的红方，就彻底被划分成两大部分。蓝方用金美元体制，至于红方必然是以人民币为主导的、包括俄罗斯卢布，德国马克，甚至日元，英镑，法国法郎等多种货币体制的构架，因此中东石油各国不再成为世界经济体系的关键因素，各国的内需与人口才是决定国际地位的关键。</p></blockquote><p>世界又回到了拜占庭帝国与奥斯曼帝国的两极争霸的格局。</p><blockquote><p>史无前例地直接进入信用市场购买企业债和债券ETF。与之相应的，则是美联储资产负债表规模连创纪录。美联储资产规模将接近10万亿美元。<br>第一阶段：降息+QE+增加回购，向市场投放流动性。<br>第二阶段：启用特殊流动性工具，直接支持企业和居民部门。<br>第三阶段：开放式QE，直接注资信用市场。</p></blockquote><p><a href="https://www.yicai.com/news/3349950.html" target="_blank" rel="noopener">怎么看美联储货币互换网络</a><br><a href="https://zhuanlan.zhihu.com/p/133370770" target="_blank" rel="noopener">美国与14国央行货币互换体制 构架未来金美元战略 美联储与美政府 既是华尔街救星 也必毁当今美元信用</a><br><a href="https://www.usdebtclock.org/" target="_blank" rel="noopener">https://www.usdebtclock.org/</a></p><h1 id="美元加息环流"><a href="#美元加息环流" class="headerlink" title="美元加息环流"></a>美元加息环流</h1><p>资产负债表最终比现在减少2.5-3w亿美元<br><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/%E7%BC%A9%E8%A1%A8.png" alt="缩表"><br>相关保联系汇率或者保楼市泡沫，中间地带</p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/%E7%BB%8F%E6%B5%8E%E5%91%A8%E6%9C%9F.png" alt="经济周期"><br>里根政府刮骨疗伤，加息到20%，80年代爆发IT革命，PC时代开始，滞涨10年左右。<br>中美 贸易战 供应链，石化产业（绿色）。感觉好点就会放水。大滞涨可能会</p><p>大宗商品(CRB指标)转向，CPI就会跟随，时间会滞后半年以上到一年。<br>WTI原油，95以上不能做任何多头，45块以下疯狂做多头</p><p><a href="https://www.youtube.com/watch?v=YDzJy7bB2e0&ab_channel=%E6%94%BF%E7%B6%93%E5%AD%AB%E8%80%81%E5%B8%ABMr.SunOfficial" target="_blank" rel="noopener">官方承認加息引發衰退</a><br><a href="https://www.youtube.com/watch?v=8jMtogOCW-w" target="_blank" rel="noopener">FED正在犯和70年代一模一樣的錯誤</a><br><a href="https://www.youtube.com/watch?v=PekGfewI3wk&ab_channel=%E6%A5%8A%E4%B8%96%E5%85%89%E5%9C%A8%E9%87%91%E9%8C%A2%E7%88%86" target="_blank" rel="noopener">通脹預期降溫 本益比修正近尾聲？</a> </p><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><ul><li><p>散户：</p><ul><li>只有在自己感觉到舒服的时候才买进股票<br>出现让人反感的坏消息时卖掉手中的股票</li></ul></li><li><p>看法</p><ul><li>房价末端涨价，修养的地方开始涨价的时候，说明泡沫末端，</li><li>大宗商品(CRB指标)转向，CPI就会跟随，时间会滞后半年以上到一年。<br>WTI原油，95以上不能做任何多头，45块以下疯狂做多头</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;美元环流的倒金字塔结构&quot;&gt;&lt;a href=&quot;#美元环流的倒金字塔结构&quot; class=&quot;headerlink&quot; title=&quot;美元环流的倒金字塔结构&quot;&gt;&lt;/a&gt;美元环流的倒金字塔结构&lt;/h1&gt;&lt;p&gt;准备金下降到3万亿美元以下，很危险，还要发国债。2.7万亿，2.5-2.7万亿经济会出问题。&lt;br&gt;借贷美元最多的国家是新兴市场国家，加息周期最先影响。&lt;/p&gt;
    
    </summary>
    
    
      <category term="经济" scheme="https://hellolinux.xyz/categories/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="投资" scheme="https://hellolinux.xyz/categories/%E7%BB%8F%E6%B5%8E/%E6%8A%95%E8%B5%84/"/>
    
    
      <category term="经济" scheme="https://hellolinux.xyz/tags/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="投资" scheme="https://hellolinux.xyz/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>2021年中国95后女性洞察报告</title>
    <link href="https://hellolinux.xyz/posts/c68c6754.html"/>
    <id>https://hellolinux.xyz/posts/c68c6754.html</id>
    <published>2022-06-30T11:55:25.000Z</published>
    <updated>2022-06-30T11:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总体"><a href="#总体" class="headerlink" title="总体"></a>总体</h1><ul><li><p>更加爱国的一代 </p></li><li><p>独立、高话语权</p></li><li><p>悦己主义者 </p></li></ul><h1 id="社交洞察"><a href="#社交洞察" class="headerlink" title="社交洞察"></a>社交洞察</h1><ul><li><p>喜欢养宠物，爱打扮自己，对于脱单的兴趣不大，自己活得开心舒服最重要</p></li><li><p>95后女性移动互联网月活规模达5378万 </p></li><li><p>95后女性高学历、高收入占比均超过男性，是名副其实的“双高”女性 </p></li><li><p>95后女性是资深“手机控”，移动互联网日均使用时长超6.7小时，高于全网平均值 </p></li><li><p>95后女性偏爱使用旅游出行、便捷生活类App，她们不仅有诗和远方，还在乎眼前的生活 </p></li><li><p>装满黑历史的QQ深得95后女性的喜爱，95后女性用户规模近3000万 </p></li><li><p>分享图片已成为95后女性最常见的线上社交形式，谁还不是朋友圈里的“照骗”达人了呢 </p></li></ul><h1 id="消费洞察"><a href="#消费洞察" class="headerlink" title="消费洞察"></a>消费洞察</h1><ul><li><p>对于“线上蹦跶，线下社恐”的95后女性来说，和朋友约个SPA，组队密室，是快速拉近感情的好机会 </p></li><li><p>95后女性是独具个性的一代，他们参加线下同好聚会，热力推广小众文化 </p></li><li><p>95后女性对于脱单很佛系，近5成不愿脱单，对于脱单方式上更倾向于同学朋友升级</p></li><li><p>95后女性是独具个性的一代，他们参加线下同好聚会，热力推广小众文化 </p></li><li><p>95后女性是养宠人群的主力军，她们将萌宠当成家庭成员，为了萌宠花钱毫不手软 </p></li><li><p>95后女生的精致都藏在美妆购物里，37.1%的95后女性年花费超3千用于化妆品消费 </p></li><li><p>抛弃外国大牌，投入国货怀抱，花西子、完美日记等国货品牌凭借高性价比，赢得95后女性喜爱 </p></li><li><p>医美消费：“变美三件套”—双眼皮、玻尿酸、光子嫩肤 </p></li><li><p>变美永无止境，医美消费向年轻化发展，95后女性成为核心用户 </p></li><li><p>火锅是京沪95后女性最爱的中餐类型，没有什么是一顿火锅解决不了的，如果有，那就两顿 </p></li></ul><h1 id="育婴洞察"><a href="#育婴洞察" class="headerlink" title="育婴洞察"></a>育婴洞察</h1><ul><li><p>一线城市生活压力大，生育年龄较高，随着城市等级的降低，95后宝妈占比超过85后，生育年龄逐渐年轻化 </p></li><li><p>95后宝妈孕期最关注的产品是营养滋补品，其中近6成购买了燕窝</p></li><li><p>年轻不怕辛苦的95后，求助长辈帮忙带娃的意愿明显低于85后家庭 </p></li><li><p>95后宝妈有超6成会选择重回职场，相比以孩子为中心的生活，她们更是一个独立的个体 </p></li></ul><p><a href="http://pg.jrj.com.cn/acc/Res/CN_RES/INDUS/2021/3/10/ae4bb44c-5062-4496-8826-134e9fa7124e.pdf" target="_blank" rel="noopener">2021年中国95后女性洞察报告.pdf</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;总体&quot;&gt;&lt;a href=&quot;#总体&quot; class=&quot;headerlink&quot; title=&quot;总体&quot;&gt;&lt;/a&gt;总体&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;更加爱国的一代 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;独立、高话语权&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;悦己主义者 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="报告" scheme="https://hellolinux.xyz/categories/%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="95" scheme="https://hellolinux.xyz/tags/95/"/>
    
      <category term="女性" scheme="https://hellolinux.xyz/tags/%E5%A5%B3%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>如何为自己思考-独立思考（PaulGraham）</title>
    <link href="https://hellolinux.xyz/posts/c68c6753.html"/>
    <id>https://hellolinux.xyz/posts/c68c6753.html</id>
    <published>2022-06-29T11:55:25.000Z</published>
    <updated>2022-06-29T11:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你需要与同龄人不同的想法，需要知道多数人不分享的见解，新的东西。</p><p>思想独立的人通常不知道他们的想法与传统想法有多么不同，至少在他们公开声明之前是这样。</p><p>你和谁在一起很重要。如果你周围都是思想传统的人，它会限制你可以表达的想法，而这反过来又会限制你有哪些想法。但是如果你身边有思想独立的人，你就会有相反的体验：听到别人说令人惊讶的事情会鼓励你去思考更多。</p><p>当你站在足够远的地方，你可以看到想法像波浪一样在人群中传播。最明显的是时尚：你注意到有几个人穿着某种衬衫，然后越来越多，直到你周围有一半的人穿着同样的衬衫。你可能不太在乎你穿什么，但也有知性时尚，你绝对不想参与其中。寻找未被发现的想法的最佳地点是没有其他人在寻找的地方。</p><p>独立思想的内部结构——它包含三个组成部分：对真理的挑剔、拒绝被告知要怎么想（违反直觉），以及好奇心。</p></blockquote><p>2020 年 11 月</p><p>有些工作如果不与同龄人不同的想法，是无法做好的。例如，要成为一名成功的科学家，仅仅正确是不够的。你的想法必须既正确又新颖。你不能发表论文说别人已经知道的事情。你需要说一些其他人还没有意识到的事情。</p><p>对于投资者来说也是如此。对于公开市场投资者来说，正确预测一家公司将如何做是不够的。如果很多人做同样的预测，股价已经反映了，没有赚钱的空间。唯一有价值的见解是大多数其他投资者不分享的见解。</p><p>你也会在初创公司的创始人身上看到这种模式。你不想创办一家创业公司来做每个人都认为是个好主意的事情，或者已经有其他公司在做。你必须做一些在大多数人看来是个坏主意的事情，但你知道事实并非如此——比如为几千名爱好者使用的微型计算机编写软件，或者创建一个网站让人们租用陌生人的气垫床。楼层。</p><p>散文家也是如此。一篇告诉人们他们已经知道的事情的文章会很无聊。你必须告诉他们一些<a href="http://paulgraham.com/useful.html" target="_blank" rel="noopener">新</a>的东西。</p><p>但这种模式并不普遍。事实上，它不适用于大多数类型的工作。在大多数类型的工作中——例如，成为一名管理员——你所需要的只是前半部分。你需要做的就是正确。其他人都错了并不重要。</p><p>大多数类型的工作都有一点新奇的空间，但在实践中，需要独立思想的工作类型和不需要独立思想的工作类型之间存在相当明显的区别。</p><p>我希望有人在我还是个孩子的时候就告诉我这种区别，因为当你决定你想做什么样的工作时，这是最重要的事情之一。您是否想做那种只有通过与其他人不同的想法才能获胜的工作？我怀疑大多数人的潜意识会在他们的意识有机会之前回答这个问题。我知道我的。</p><p>独立思想似乎更多是与生俱来的，而不是后天培养的。这意味着如果你选择了错误的工作类型，你就会不开心。如果你天生思想独立，你会发现做中层经理会很沮丧。而且，如果您天生具有传统观念，那么如果您尝试进行原始研究，那么您将遇到逆风。</p><p>然而，这里的一个困难是，人们经常错误地认为他们在从传统思维到独立思维的范围内属于哪个位置。思想传统的人不喜欢认为自己是思想传统的人。无论如何，对他们来说，他们真的感觉好像他们对所有事情都做出了自己的决定。他们的信念与同龄人相同，这只是一个巧合。与此同时，思想独立的人通常不知道他们的想法与传统想法有多么不同，至少在他们公开声明之前是这样。 [ <a href="http://paulgraham.com/think.html#f1n" target="_blank" rel="noopener">1</a> ]</p><p>到成年时，大多数人大致知道他们有多聪明（狭义上解决预设问题的能力），因为他们不断地接受测试并根据它进行排名。但学校通常忽略独立思想，除非他们试图压制它。所以我们没有得到任何类似的关于我们是多么独立的反馈。</p><p>甚至在工作中可能会出现像邓宁-克鲁格这样的现象，最传统的人相信他们是独立的，而真正独立的人担心他们可能不够独立。</p><hr><p>你能让自己更独立吗？我认同。这种品质可能在很大程度上是与生俱来的，但似乎有办法放大它，或者至少不压制它。</p><p>最有效的技术之一是大多数书呆子无意中实践的技术：只是不太了解传统信念是什么。如果你不知道你应该遵守什么，就很难成为一个循规蹈矩的人。尽管如此，这些人可能已经是独立思想了。一个思想传统的人可能会因为不知道其他人的想法而感到焦虑，并且会更加努力地找出答案。</p><p>你和谁在一起很重要。如果你周围都是思想传统的人，它会限制你可以表达的想法，而这反过来又会限制你有哪些想法。但是如果你身边有思想独立的人，你就会有相反的体验：听到别人说令人惊讶的事情会鼓励你去思考更多。</p><p>因为思想独立的人觉得被思想传统的人包围会感到不舒服，所以一旦有机会，他们就会倾向于自我隔离。高中的问题是他们还没有机会。此外，高中往往是一个内向的小世界，居民缺乏信心，这两者都放大了墨守成规的力量。所以高中通常是一个<a href="http://paulgraham.com/nerds.html" target="_blank" rel="noopener">糟糕的时期</a>对于思想独立的人。但即使在这里也有一些优势：它教你要避免什么。如果你后来发现自己处于一种让你认为“这就像高中一样”的境地，你知道你应该离开。 [ <a href="http://paulgraham.com/think.html#f2n" target="_blank" rel="noopener">2</a> ]</p><p>另一个将独立思想和传统思想融合在一起的地方是成功的初创公司。创始人和早期员工几乎总是思想独立；否则启动不会成功。但是思想传统的人远远多于思想独立的人，所以随着公司的发展，原有的思想独立精神不可避免地被淡化了。除了公司开始烂的明显问题之外，这会导致各种问题。最奇怪的事情之一是，创始人发现自己能够与其他公司的创始人比与自己的员工更自由地交谈。 [ <a href="http://paulgraham.com/think.html#f3n" target="_blank" rel="noopener">3</a> ]</p><p>幸运的是，您不必将所有时间都花在思想独立的人身上。有一两个可以定期交谈的人就足够了。一旦你找到他们，他们通常和你一样渴望交谈；他们也需要你。尽管大学不再像以前那样垄断教育，但好的大学仍然是结识思想独立的人的绝佳方式。大多数学生仍然具有传统思想，但您至少会发现成群的思想独立，而不是您在高中时可能发现的接近于零的思想。</p><p>它还可以朝另一个方向发展：除了培养一小群思想独立的朋友之外，还可以尝试结识尽可能多的不同类型的人。如果您有其他几组同行，它将降低您直接同行的影响力。此外，如果您身处多个不同的世界，您通常可以将想法从一个世界导入另一个世界。</p><p>但我所说的不同类型的人并不是指人口统计学上的不同。为了使这项技术发挥作用，他们必须以不同的方式思考。因此，虽然去其他国家旅行是个好主意，但您可能会在拐角处找到想法不同的人。当我遇到一个对一些不寻常的事情了解很多的人（几乎包括每个人，如果你深入挖掘的话），我会尝试了解他们所知道的其他人不知道的事情。这里几乎总是有惊喜。当你遇到陌生人时，这是一种很好的交谈方式，但我不是为了交谈。我真的很想知道。</p><p>通过阅读历史，您可以扩展时间和空间的影响源。当我阅读历史时，我不仅要了解发生了什么，而且要尝试深入了解过去生活的人们的头脑。事情在他们看来如何？这很难做到，但值得付出努力，因为同样值得远行以三角测量一个点。</p><p>您还可以采取更明确的措施来防止自己自动采纳传统观点。最普遍的就是培养一种怀疑的态度。当你听到有人说什么时，停下来问问自己“这是真的吗？” 不要大声说出来。我并不是建议你让每个与你交谈的人承担证明他们所说的话的责任，而是你自己承担评估他们所说的话的责任。</p><p>把它当作一个谜题。你知道一些被接受的想法后来会被证明是错误的。看看你能不能猜到哪个。最终目标不是在你被告知的事情中找到缺陷，而是找到被破碎的想法所掩盖的新想法。所以这个游戏应该是一个令人兴奋的新奇探索，而不是一个无聊的智力卫生协议。当您开始问“这是真的吗？”时，您会感到惊讶，答案不是立即是肯定的。如果你有任何想象力，你更有可能拥有太多的线索而不是太少。</p><p>更一般地说，您的目标应该是不要让任何事情未经检查就进入您的脑海，并且事情并不总是以陈述的形式进入您的脑海。一些最强大的影响是隐含的。你怎么注意到这些？通过退后一步，观察其他人如何获得他们的想法。</p><p>当你站在足够远的地方，你可以看到想法像波浪一样在人群中传播。最明显的是时尚：你注意到有几个人穿着某种衬衫，然后越来越多，直到你周围有一半的人穿着同样的衬衫。你可能不太在乎你穿什么，但也有知性时尚，你绝对不想参与其中。不只是因为你想要对自己的思想拥有主权，还因为<a href="http://paulgraham.com/nov.html" target="_blank" rel="noopener">不合时宜</a> 想法不成比例地可能导致有趣的地方。寻找未被发现的想法的最佳地点是没有其他人在寻找的地方。 [ <a href="http://paulgraham.com/think.html#f4n" target="_blank" rel="noopener">4</a> ]</p><hr><p>为了超越这个一般建议，我们需要看看独立思想的内部结构——我们需要锻炼的个别肌肉，事实上。在我看来，它包含三个组成部分：对真理的挑剔、拒绝被告知要怎么想，以及好奇心。</p><p>对真理的挑剔不仅仅意味着不相信虚假的事情。这意味着要小心相信的程度。对于大多数人来说，信念的程度未经检验就冲向极端：不可能的变得不可能，而可能的变得确定。 [ <a href="http://paulgraham.com/think.html#f5n" target="_blank" rel="noopener">5</a> ] 对于思想独立的人来说，这似乎是不可原谅的草率。从高度投机的假设到（明显的）重言式，他们愿意在他们的脑海中拥有任何东西，但在他们关心的主题上，每件事都必须贴上经过仔细考虑的信念程度的标签。 [ <a href="http://paulgraham.com/think.html#f6n" target="_blank" rel="noopener">6</a> ]</p><p>思想独立的人因此对意识形态感到恐惧，这需要一个人同时接受一整套信仰，并将它们视为信仰。对于一个思想独立的人来说，这似乎令人反感，就像对一个对食物挑剔的人来说，咬一口装满各种年龄和来源不明的成分的潜艇三明治一样。</p><p>没有这种对真理的挑剔，你就不能真正独立。仅仅抵制被告知要怎么想是不够的。这类人拒绝传统观念，只是用最随意的阴谋论代替它们。而且由于这些阴谋论往往是为了捕捉他们而制造的，他们最终的独立性不如普通人，因为他们受制于一个比单纯的惯例更严格的主人。 [ <a href="http://paulgraham.com/think.html#f7n" target="_blank" rel="noopener">7</a> ]</p><p>你能增加你对真理的挑剔吗？我会这么认为。以我的经验，仅仅想着你挑剔的事情就会导致挑剔的增长。如果是这样，这是我们可以拥有更多的稀有美德之一，而不仅仅是想要它。如果它像其他形式的挑剔一样，也应该可以鼓励孩子。我当然从我父亲那里得到了很多。 [ <a href="http://paulgraham.com/think.html#f8n" target="_blank" rel="noopener">8</a> ]</p><p>独立思想的第二个组成部分，即拒绝被告知该想什么，是这三个组成部分中最明显的。但即使这样也经常被误解。人们对此犯的最大错误是认为它仅仅是一种消极的品质。我们使用的语言强化了这个想法。你<em>不合</em>常规。你<em>不</em>在乎别人怎么想。但这不仅仅是一种免疫力。在思想最独立的人中，不被告知思考什么的愿望是一种积极的力量。这不仅仅是怀疑，而是对颠覆传统智慧的想法的积极<a href="http://paulgraham.com/gba.html" target="_blank" rel="noopener">享受</a>，越违反直觉越好。</p><p>一些最新颖的想法在当时看起来几乎像是恶作剧。想想你对一个新想法的反应是多久笑一次。我不认为这是因为新奇的想法本身很有趣，而是因为新奇和幽默都有某种令人惊讶的地方。但是，虽然不完全相同，但两者足够接近，以至于在具有幽默感和独立思想之间存在一定的相关性——就像没有幽默感和传统思想之间存在一定的相关性一样。 [<a href="http://paulgraham.com/think.html#f9n" target="_blank" rel="noopener">9</a> ]</p><p>我不认为我们可以显着增加我们对被告知该怎么想的抵抗力。它似乎是独立思想的三个组成部分中最先天的；成年后具有这种品质的人通常在孩提时代就表现出明显的迹象。但是，如果我们不能增加对被告知该怎么想的抵抗力，我们至少可以通过与其他思想独立的人在一起来支撑它。</p><p>独立思想的第三个组成部分，好奇心，可能是最有趣的。在某种程度上，我们可以对新颖想法从何而来的问题给出一个简短的回答，那就是好奇心。这就是人们在拥有它们之前通常的感受。</p><p>根据我的经验，独立思想和好奇心可以完美地相互预测。我认识的每个思想独立的人都非常好奇，而我认识的每个思想传统的人都没有。奇怪的是，孩子们除外。所有的小孩子都很好奇。也许是因为即使是有传统观念的人，一开始也必须好奇，才能了解什么是传统。而思想独立的人是好奇的贪吃者，即使吃饱了也会继续吃东西。 [ <a href="http://paulgraham.com/think.html#f10n" target="_blank" rel="noopener">10</a> ]</p><p>独立思想的三个组成部分协同工作：对真理的挑剔和对被告知要思考什么的抵制在你的大脑中留下空间，而好奇心会找到新的想法来填补它。</p><p>有趣的是，这三种成分可以相互替代，就像肌肉一样。如果你对真理足够挑剔，你就不必抗拒被告知要怎么想，因为挑剔本身就会在你的知识中造成足够的空白。任何一种都可以弥补好奇心，因为如果你在大脑中创造了足够的空间，你对由此产生的真空的不适感会增加你的好奇心。或者好奇心可以弥补它们：如果你足够好奇，你不需要清理大脑空间，因为你发现的新想法会推出你默认获得的传统想法。</p><p>因为独立思想的组成部分是可以互换的，你可以在不同程度上拥有它们，但仍然得到相同的结果。因此，不存在独立思想的单一模型。一些思想独立的人是公然颠覆的，而另一些人则是默默地好奇。他们都知道秘密握手。</p><p>有没有培养好奇心的方法？首先，您要避免抑制它的情况。您目前所做的工作在多大程度上激发了您的好奇心？如果答案是“不多”，也许你应该改变一些东西。</p><p>你可以采取的最重要的积极步骤来培养你的好奇心，这可能是寻找与之相关的话题。很少有成年人对每件事都同样好奇，而且似乎您无法选择自己感兴趣的主题。因此，由您决定是否<a href="http://paulgraham.com/genius.html" target="_blank" rel="noopener">找到</a>它们。或者在必要时发明它们。</p><p>增加好奇心的另一种方法是沉迷于它，通过调查你感兴趣的事物。在这方面，好奇心与大多数其他欲望不同：沉迷于它往往会增加而不是满足它。问题导致更多问题。</p><p>好奇心似乎比对真理的挑剔或拒绝被告知要怎么想更具有个人色彩。就人们拥有后两者的程度而言，它们通常非常笼统，而不同的人可能对非常不同的事物感到好奇。所以也许好奇心是这里的指南针。也许，如果你的目标是发现新颖的想法，那么你的座右铭不应该是“做你喜欢的事”，而应该是“做你感兴趣的事”。</p><p><strong>注释</strong></p><p>[ 1 ] 没有人认为是传统思想这一事实的一个方便的结果是，您可以说出您喜欢传统思想的人，而不会遇到太多麻烦。当我写<a href="http://paulgraham.com/conformism.html" target="_blank" rel="noopener">“墨守成规的四个象限”时</a>我预计激进的传统思想会引发一场愤怒的风暴，但实际上它非常平静。他们感觉到这篇文章有一些他们非常不喜欢的地方，但他们很难找到一个特定的段落来固定它。</p><p>[ 2 ] 当我问自己高中生活是什么样的时，答案是推特。它不仅充满了传统思想的人，因为它的大小不可避免地会是这样的，而且还会受到传统思想的猛烈风暴，这让我想起了对木星的描述。但是，虽然花时间在那里可能是一种净损失，但它至少让我更多地思考独立思想和传统思想之间的区别，否则我可能不会这样做。</p><p>[ 3] 在成长中的初创公司中，独立思想的下降仍然是一个悬而未决的问题，但可能会有解决方案。</p><p>创始人可以通过有意识地只雇佣思想独立的人来延缓问题的发生。当然，这也有附带的好处，那就是他们有更好的想法。</p><p>另一种可能的解决方案是制定政策，以某种方式破坏墨守成规的力量，就像控制棒减缓连锁反应一样，使传统思想不那么危险。洛克希德臭鼬工厂的物理分离可能有一个附带好处。最近的例子表明，像 Slack 这样的员工论坛可能不是一个绝对的好东西。</p><p>最激进的解决方案是在不发展公司的情况下增加收入。你认为雇佣那个初级公关人员会比程序员便宜，但是对你公司的独立思想的平均水平有什么影响呢？（员工相对于教职员工的增长似乎对大学产生了类似的影响。）也许关于外包工作的规则应该不是你的“核心能力”，应该增加一个关于外包工作的规则，这些工作是由那些会破坏你的文化的人完成的。雇员。</p><p>一些投资公司似乎已经能够在不增加员工数量的情况下增加收入。自动化加上“技术堆栈”不断增加的清晰度表明，有朝一日这对产品公司来说是可能的。</p><p>[ 4] 每个领域都有知识时尚，但它们的影响各不相同。例如，政治往往很无聊的原因之一是它非常受制于他们。对政治有意见的门槛远<a href="http://paulgraham.com/identity.html" target="_blank" rel="noopener">低于</a>对集合论有意见的门槛。因此，虽然在政治上有一些想法，但在实践中，它们往往会被知识时尚浪潮所淹没。</p><p>[ 5 ] 思想传统的人经常被他们的观点的力量所愚弄，相信他们是独立思想的。但坚定的信念并不是思想独立的标志。而是相反。</p><p>[ 6] 对真理的挑剔并不意味着一个思想独立的人不会不诚实，但他不会被欺骗。这有点像绅士的定义，即永远不会无意粗鲁的人。</p><p>[ 7 ] 你在政治极端分子中尤其看到这一点。他们认为自己是不墨守成规的人，但实际上他们是小众墨守成规的人。他们的观点可能与普通人不同，但他们往往比普通人更受同龄人观点的影响。</p><p>[ 8 ] 如果我们扩大对真理的挑剔的概念，使其排除拉皮、虚假、浮夸以及严格意义上的虚假，我们的独立思想模型可以进一步扩展到艺术。</p><p>] 但是，这种相关性远非完美。哥德尔和狄拉克在幽默部门似乎并不是很强大。但是一个既“神经典型”又没有幽默感的人很可能是传统思想。</p><p>[ 10 ] 例外：八卦。几乎每个人都对八卦感到好奇。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://paulgraham.com/think.html" target="_blank" rel="noopener">http://paulgraham.com/think.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;你需要与同龄人不同的想法，需要知道多数人不分享的见解，新的东西。&lt;/p&gt;
&lt;p&gt;思想独立的人通常不知道他们的想法与传统想法有多么不同，至少在他们公开声明之前是这样。&lt;/p&gt;
&lt;p&gt;你和谁在一起很重要。如果你周围都是思想传统的人，它会限制你可以表达的想法，而这反过来又会限制你有哪些想法。但是如果你身边有思想独立的人，你就会有相反的体验：听到别人说令人惊讶的事情会鼓励你去思考更多。&lt;/p&gt;
&lt;p&gt;当你站在足够远的地方，你可以看到想法像波浪一样在人群中传播。最明显的是时尚：你注意到有几个人穿着某种衬衫，然后越来越多，直到你周围有一半的人穿着同样的衬衫。你可能不太在乎你穿什么，但也有知性时尚，你绝对不想参与其中。寻找未被发现的想法的最佳地点是没有其他人在寻找的地方。&lt;/p&gt;
&lt;p&gt;独立思想的内部结构——它包含三个组成部分：对真理的挑剔、拒绝被告知要怎么想（违反直觉），以及好奇心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2020 年 11 月&lt;/p&gt;
    
    </summary>
    
    
      <category term="翻译" scheme="https://hellolinux.xyz/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="翻译" scheme="https://hellolinux.xyz/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="PaulGraham" scheme="https://hellolinux.xyz/tags/PaulGraham/"/>
    
  </entry>
  
  <entry>
    <title>疯狂的新想法（PaulGraham）</title>
    <link href="https://hellolinux.xyz/posts/c68c6752.html"/>
    <id>https://hellolinux.xyz/posts/c68c6752.html</id>
    <published>2022-06-29T10:55:25.000Z</published>
    <updated>2022-06-29T10:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>新想法的产生必然是孤独的，如果您想自己产生新想法，您可以做的最有价值的事情之一就是了解它们出生时的样子。了解新想法是如何发生的，并尝试让自己进入当时人们的脑海。当新想法只完成了一半，甚至拥有它的人也只是半信半疑地认为它是正确的时候，事情在他们看来如何？</p><p>观察到你周围正在诞生的新想法，只需寻找一个合理的领域专家提出听起来有问题的东西。</p><p>如果你善良、聪明，你不仅会抵制攻击这些人，还会鼓励他们。拥有新想法是一件孤独的事情。只有试过的人才知道寂寞。这些人需要你的帮助。如果你帮助他们，你可能会在这个过程中学到一些东西。</p><p>尝试去接受那些大家都很反感的东西，去接纳那有价值的10%，或许有不一样的收获。——K.K.103建议</p></blockquote><p>2021 年 5 月</p><p>我非常害怕公开表达一种观点。如果我认识的既是领域专家又是理性人的人提出了一个听起来很荒谬的想法，我会非常不愿意说“那永远行不通”。</p><p>任何研究过思想史，尤其是科学史的人都知道，事情就是这样开始的。有人提出了一个听起来很疯狂的想法，大多数人不屑一顾，然后它逐渐占据了世界。</p><p>大多数听起来难以置信的想法实际上都是糟糕的，可以安全地驳回。但是，当它们是由合理的领域专家提出时，则不然。如果提出这个想法的人是合理的，那么他们就会知道这听起来多么难以置信。然而他们无论如何都在提议它。这表明他们知道一些你不知道的事情。如果他们拥有深厚的领域专业知识，那可能就是它的来源。 [ <a href="http://www.paulgraham.com/newideas.html#f1n" target="_blank" rel="noopener">1</a> ]</p><p>这样的想法不仅不安全，而且很可能很有趣。当普通人提出一个听起来不可信的想法时，它的不可信就是他们无能的证据。但是当一个合理的领域专家这样做时，情况就相反了。这里有一个类似于有效市场的东西：平均而言，看起来最疯狂的想法如果正确，就会产生最大的影响。因此，如果您可以消除提出听起来难以置信的想法的人不称职的理论，那么它的不合理性就会从证明它很无聊的证据转变为证明它令人兴奋的证据。 [ <a href="http://www.paulgraham.com/newideas.html#f2n" target="_blank" rel="noopener">2</a> ]</p><p>这样的想法不能保证有效。但他们不必如此。它们只需要足够好的赌注——具有足够高的预期价值。我认为他们平均会这样做。我认为，如果您将赌注押在合理的领域专家提出的所有听起来难以置信的想法上，那么您最终会领先。</p><p>原因是大家都太保守了。“范式”这个词被过度使用了，但这是有道理的。每个人都太受当前范式的控制。即使是那些有新想法的人最初也会低估它们。这意味着在他们达到公开提议的阶段之前，他们已经对他们进行了过于严格的过滤。 [ <a href="http://www.paulgraham.com/newideas.html#f3n" target="_blank" rel="noopener">3</a> ]</p><p>对这种想法的明智回应不是发表声明，而是提出问题，因为这里有一个真正的谜团。为什么这个聪明通情达理的人提出了一个看起来如此错误的想法？是他们弄错了，还是你弄错了？你们中的一个必须是。如果你是错误的人，那会很高兴知道，因为这意味着你的世界模型中有一个漏洞。但即使他们弄错了，了解原因也应该很有趣。专家落入的陷阱也是你必须担心的。</p><p>这一切似乎都很明显。然而，显然有很多人并不像我一样害怕拒绝新想法。他们为什么这样做？为什么要冒险现在看起来像个混蛋，以后看起来像个傻瓜，而不是仅仅保留判断力？</p><p>他们这样做的原因之一是嫉妒。如果你提出一个激进的新想法并且它成功了，你的声誉（也许还有你的财富）将成比例地增加。如果发生这种情况，有些人会嫉妒，这种潜在的嫉妒会传播回一种信念，即你一定是错的。</p><p>人们拒绝新想法的另一个原因是，这是一种看起来很复杂的简单方法。当一个新想法第一次出现时，它通常看起来很微弱。这只是一个孵化。相比之下，公认的智慧是一只成熟的鹰。所以很容易对一个新想法发起毁灭性的攻击，任何这样做的人都会在不理解这种不对称性的人看来很聪明。</p><p>研究新想法的人和攻击他们的人如何获得奖励之间的差异加剧了这种现象。研究新想法的回报取决于结果的价值。因此，如果它能让事情变得好 10 倍以上，那么成功的机会只有 10% 是值得的。而攻击新想法的回报大致是恒定的；无论目标如何，这种攻击似乎都同样聪明。</p><p>当人们对旧思想有既得利益时，他们也会攻击新思想。例如，达尔文的一些最严厉的批评者是教士，这并不奇怪。人们将整个职业生涯建立在一些想法之上。当有人声称他们是虚假或过时的时，他们会感到受到威胁。</p><p>解雇的最低形式是纯粹的派系主义：自动驳回与对立派系相关的任何想法。最简单的形式是因为谁提出一个想法而放弃它。</p><p>但是，导致理性的人摒弃新想法的主要原因与阻止人们提出新想法的原因相同：当前范式的普遍性。它不仅影响我们的思维方式；这是我们构建思想的乐高积木。跳出当前的范式是只有少数人能做的事情。甚至他们通常一开始也不得不压抑自己的直觉，就像飞行员在云层中飞行，他必须相信他的仪器而不是他的平衡感。 [ <a href="http://www.paulgraham.com/newideas.html#f4n" target="_blank" rel="noopener">4</a> ]</p><p>范式不仅仅定义了我们目前的想法。它们还清除了导致它们的碎屑痕迹，使我们对新想法的标准高得不可思议。当前的范式对我们（它的后代）来说似乎是如此完美，以至于我们认为它一被发现就必须被完全接受。无论教会如何看待日心说模型，天文学家在哥白尼提出它时一定已经被说服了。事实上，远非如此。哥白尼在 1532 年发表了日心说模型，但直到 17 世纪中叶，科学观点的天平才转向有利于它的方向。 [ <a href="http://www.paulgraham.com/newideas.html#f5n" target="_blank" rel="noopener">5</a> ]</p><p>很少有人了解新想法首次出现时看起来多么微弱。因此，如果您想自己产生新想法，您可以做的最有价值的事情之一就是了解它们出生时的样子。了解新想法是如何发生的，并尝试让自己进入当时人们的脑海。当新想法只完成了一半，甚至拥有它的人也只是半信半疑地认为它是正确的时候，事情在他们看来如何？</p><p>但你不必停留在历史上。你现在可以观察到你周围正在诞生的新想法。只需寻找一个合理的领域专家提出听起来有问题的东西。</p><p>如果你善良、聪明，你不仅会抵制攻击这些人，还会鼓励他们。拥有新想法是一件孤独的事情。只有试过的人才知道寂寞。这些人需要你的帮助。如果你帮助他们，你可能会在这个过程中学到一些东西。</p><p><strong>注释</strong></p><p>[ 1 ] 此领域的专业知识可能在另一个领域。事实上，这种交叉往往特别有希望。</p><p>[ 2] 我并不是说这个原则远远超出了数学、工程和硬科学。例如，在政治中，听起来很疯狂的想法通常和听起来一样糟糕。尽管可以说这不是一个例外，因为提出这些建议的人实际上并不是领域专家；politicians are domain experts in political tactics, like how to get elected and how to get legislation passed, but not in the world that policy acts upon. 也许没有人可以。</p><p>[ 3 ] 这种“范式”意义是托马斯·库恩在他 <em>的《科学革命结构</em>》中定义的，但我也推荐他的 <em>哥白尼革命</em>，在那里你可以看到他在工作中发展这个想法。</p><p>[ 4] 这就是带有阿斯伯格症候群的人在发现新想法方面可能具有优势的原因之一。他们总是在仪器上飞行。</p><p>[ 5 ] 霍尔，鲁珀特。<em>从伽利略到牛顿。</em>柯林斯，1963 年。这本书特别擅长吸引同时代人的头脑。</p><p><strong>感谢</strong>Trevor Blackwell、Patrick Collison、Suhail Doshi、Daniel Gackle、Jessica Livingston 和 Robert Morris 阅读本文的草稿。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h1><p><a href="http://www.paulgraham.com/newideas.html" target="_blank" rel="noopener">http://www.paulgraham.com/newideas.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;新想法的产生必然是孤独的，如果您想自己产生新想法，您可以做的最有价值的事情之一就是了解它们出生时的样子。了解新想法是如何发生的，并尝试让自己进入当时人们的脑海。当新想法只完成了一半，甚至拥有它的人也只是半信半疑地认为它是正确的时候，事情在他们看来如何？&lt;/p&gt;
&lt;p&gt;观察到你周围正在诞生的新想法，只需寻找一个合理的领域专家提出听起来有问题的东西。&lt;/p&gt;
&lt;p&gt;如果你善良、聪明，你不仅会抵制攻击这些人，还会鼓励他们。拥有新想法是一件孤独的事情。只有试过的人才知道寂寞。这些人需要你的帮助。如果你帮助他们，你可能会在这个过程中学到一些东西。&lt;/p&gt;
&lt;p&gt;尝试去接受那些大家都很反感的东西，去接纳那有价值的10%，或许有不一样的收获。——K.K.103建议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2021 年 5 月&lt;/p&gt;
    
    </summary>
    
    
      <category term="翻译" scheme="https://hellolinux.xyz/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="翻译" scheme="https://hellolinux.xyz/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="PaulGraham" scheme="https://hellolinux.xyz/tags/PaulGraham/"/>
    
  </entry>
  
  <entry>
    <title>OCR识别技术库简介</title>
    <link href="https://hellolinux.xyz/posts/c68c6751.html"/>
    <id>https://hellolinux.xyz/posts/c68c6751.html</id>
    <published>2022-06-29T04:55:25.000Z</published>
    <updated>2022-06-29T04:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、手写体识别"><a href="#一、手写体识别" class="headerlink" title="一、手写体识别"></a>一、手写体识别</h1><h2 id="1-最佳手写识别工具推荐"><a href="#1-最佳手写识别工具推荐" class="headerlink" title="1.最佳手写识别工具推荐"></a>1.最佳手写识别工具推荐</h2><h3 id="1-Mac—Nebo"><a href="#1-Mac—Nebo" class="headerlink" title="(1) Mac—Nebo"></a>(1) Mac—Nebo</h3><p>使用mac电脑的Apple Pencil触控笔，无论线上学习，还是开会时使用，效率都会非常高。使用它，你可以将手写笔记完美存储为图片，以供随时翻看。那么，如何将手写笔记转换成可编辑的电子文档呢？推荐这款适用于mac电脑的手写文字识别软件——Nebo，它支持识别58个国家语言，只要你的字迹不是太潦草，识别率还是较高的。除了识别文字，如果你手工绘制了图标，例如思维导图，流程图，它也可以将转换成干净整洁的电子版图表。</p><h3 id="2-安卓APP—汉王识文"><a href="#2-安卓APP—汉王识文" class="headerlink" title="(2) 安卓APP—汉王识文"></a>(2) 安卓APP—汉王识文</h3><p>它提供了拍照识别功能，无论你是印刷文字还是手写文字，它都可以准确识别并提取出文字内容。在使用手机版手写文字识别软件时，注意拍照时避免抖动，并确保光线充足，但拍摄的图片不要反光，尽量让拍摄的文字整齐地充满拍摄屏幕。这样识别的文字成功率会比较高。</p><h3 id="3-iOS-APP—GoodNotes"><a href="#3-iOS-APP—GoodNotes" class="headerlink" title="(3) iOS APP—GoodNotes"></a>(3) iOS APP—GoodNotes</h3><p>被誉为iOS平台上最好的手写笔记软件APP之一，常年占据效率类APP付费排行榜前列。</p><p>GoodNotes支持各种手文字/涂鸦，用户可以选择电子港币、圆珠笔、画笔，可以设定不同的粗细、颜色，可以插入图表图形，图片，为Word/PPT/PDF添加批注、注释等。GoodNote还提供了手写文字识别功能，支持搜索手写文字并把文字转变成电子文本。总体来说，体验很不错，是一款较为优质的手写笔记软件。</p><h2 id="2-机器学习方法手写识别"><a href="#2-机器学习方法手写识别" class="headerlink" title="2.机器学习方法手写识别"></a>2.机器学习方法手写识别</h2><h3 id="1-基于TensorFlow的Android手写体识别"><a href="#1-基于TensorFlow的Android手写体识别" class="headerlink" title="(1) 基于TensorFlow的Android手写体识别"></a>(1) 基于TensorFlow的Android手写体识别</h3><p><a href="https://blog.csdn.net/qq_29381089/article/details/78757928" target="_blank" rel="noopener">https://blog.csdn.net/qq_29381089/article/details/78757928</a></p><p>将Tensorflow入门级模型，MINIST数据在PC端上训练，保存，恢复，以及用自己的图片来进行识别预测，效果都不错的完成了。于是想将这个模型再移植到android上。折腾一番后，终于搞定了。</p><p><a href="https://towardsdatascience.com/build-a-handwritten-text-recognition-system-using-tensorflow-2326a3487cd5" target="_blank" rel="noopener">https://towardsdatascience.com/build-a-handwritten-text-recognition-system-using-tensorflow-2326a3487cd5</a></p><p><a href="https://github.com/githubharald/SimpleHTR" target="_blank" rel="noopener">https://github.com/githubharald/SimpleHTR</a></p><h2 id="3-手写识别开源库"><a href="#3-手写识别开源库" class="headerlink" title="3.手写识别开源库"></a>3.手写识别开源库</h2><h3 id="1-android使用tesseract识别文字"><a href="#1-android使用tesseract识别文字" class="headerlink" title="(1) android使用tesseract识别文字"></a>(1) android使用tesseract识别文字</h3><p><a href="https://www.jianshu.com/p/2c0cc12cfcf8" target="_blank" rel="noopener">https://www.jianshu.com/p/2c0cc12cfcf8</a></p><p><a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract</a></p><p>Tesseract是一个HP和google先后维护的开源OCR（ocr,optical character Recognition）引擎，3.0以后已经支持中文识别．如何在android上使用它呢，那就不得不提另一个开源项目tess-two，tess-two是一个在android上使用tesseract的实例，tess-two中有三个主要目录:eyes-two 对leptonica的封装tess-two-test　ocr的测试代码tess-two 对Tesseract的封装</p><p>中文手写识别库for android<br><a href="http://cn.voidcc.com/question/p-bnlvspdi-yh.html" target="_blank" rel="noopener">http://cn.voidcc.com/question/p-bnlvspdi-yh.html</a></p><h1 id="二、android使用tesseract识别文字"><a href="#二、android使用tesseract识别文字" class="headerlink" title="二、android使用tesseract识别文字"></a>二、android使用tesseract识别文字</h1><p>目前多数使用的还是tesseract库。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、手写体识别&quot;&gt;&lt;a href=&quot;#一、手写体识别&quot; class=&quot;headerlink&quot; title=&quot;一、手写体识别&quot;&gt;&lt;/a&gt;一、手写体识别&lt;/h1&gt;&lt;h2 id=&quot;1-最佳手写识别工具推荐&quot;&gt;&lt;a href=&quot;#1-最佳手写识别工具推荐&quot; class=&quot;headerlink&quot; title=&quot;1.最佳手写识别工具推荐&quot;&gt;&lt;/a&gt;1.最佳手写识别工具推荐&lt;/h2&gt;
    
    </summary>
    
    
      <category term="OCR" scheme="https://hellolinux.xyz/categories/OCR/"/>
    
    
      <category term="OCR" scheme="https://hellolinux.xyz/tags/OCR/"/>
    
  </entry>
  
  <entry>
    <title>Octopus及NEAR生态项目介绍</title>
    <link href="https://hellolinux.xyz/posts/c68c6750.html"/>
    <id>https://hellolinux.xyz/posts/c68c6750.html</id>
    <published>2022-06-29T04:50:25.000Z</published>
    <updated>2022-06-29T04:50:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NEAR介绍"><a href="#NEAR介绍" class="headerlink" title="NEAR介绍"></a>NEAR介绍</h1><p>Near Protocol作为主打“分片”概念的高性能区块链之一，相比于其它公链，DeFi布局比较缓慢，首个去中心化交易所Ref Finance在2021年4月正式上线，首个跨链预言机Flux 12月份才上线主网。</p><p>NEAR生态的研究和发展公司Proximity Labs成立了价值3亿美金的Grants DAO，用于扶持基于NEAR区块链开发DeFi应用的项目、机构及个人，对标其它公链的生态激励计划。</p><p>在Electric Capital发布的2021年Web3开发者报告中，Near是开发者增速第三快的智能合约平台，次于Terra和Solana。</p><p>除了直接部署在Near主网上的项目之外，Near还借助兼容EVM的Aurora扩展了自己的生态，应用链章鱼网络也正在积极部署中。</p><p>原生项目，如Ref Finance、Burrow、Onomy、Trisolaris，也包括Curve、Sushi、DODO、Kyber、Woo等知名DeFi项目</p><h2 id="Ref-Finance-AMM"><a href="#Ref-Finance-AMM" class="headerlink" title="Ref Finance-AMM"></a>Ref Finance-AMM</h2><p>Near上的首个去中心化交易所。除了简单的AMM功能之外，Ref Finance在2021年第四季度增加了稳定币池、智能路由交易等功能，也就具备了Uniswap V2和Curve的基础功能。它的交易手续费和其它DEX接近，稳定币交易对的兑换手续费为0.05%，其它交易对主要为0.3%。</p><p>帮助它们的代币提供流动性，并提供“双挖”奖励。</p><h2 id="Meta-Pool-流动性质押方案"><a href="#Meta-Pool-流动性质押方案" class="headerlink" title="Meta Pool-流动性质押方案"></a>Meta Pool-流动性质押方案</h2><p>Lido，Solana上的Marinade Finance</p><p>Meta Pool也得到了Near基金会的官方支持，基金会决定将150万NEAR通过Meta Pool进行质押，这代表着Near基金会的信任投票。</p><h2 id="Skyward-Finance-Launchpad平台"><a href="#Skyward-Finance-Launchpad平台" class="headerlink" title="Skyward Finance Launchpad平台"></a>Skyward Finance Launchpad平台</h2><p>采用了流拍卖（Streaming auction）的模式。用户可以在任何时间点参与到拍卖中，拍卖价格将随着区块变化，在每个区块中都将根据资金占比收到代币，若价格过高也可以随时退出。</p><p>拍卖不需要质押平台币SKYWARD，确保了拍卖的公平公开。拍卖代币和拍卖所得资金的1%均会被Skyward财库收取1%的费用，随着拍卖次数的增多，Skyward财库的资产将越来越多。因为用户可以选择销毁SKYWARD赎回财库中的资产，因此SKYWARD的价值也会随着拍卖的次数增加（90%的SKYWARD通过拍卖分发，拍卖资金也进入财库）。</p><p>Near生态中的多个知名项目均通过Skyward进行了拍卖，如Ref Finance、Octopus Network、Paras、Aurora、Meta Pool等。</p><h2 id="Burrow-借贷"><a href="#Burrow-借贷" class="headerlink" title="Burrow 借贷"></a>Burrow 借贷</h2><p>测试网中只支持NEAR、ETH、USDT、USDC、DAI这五种资产的借贷，功能上和其它借贷协议类似。</p><p>三大功能：从基础层解锁收益；解锁跨链收益；允许自偿贷款。</p><p>解锁基础层收益即支持质押的NEAR衍生品，如通过Meta Pool质押所得到的stNEAR进行借贷；跨链收益即跨链的质押衍生品，如stSOL、stFTM等；自偿贷款即类似于Alchemix一样，使用生息抵押品进行借贷。不过这些功能并没有包含在现有的测试网中。</p><h2 id="Pulse-Markets-预测市场"><a href="#Pulse-Markets-预测市场" class="headerlink" title="Pulse Markets 预测市场"></a>Pulse Markets 预测市场</h2><p>建立在Near和Flux（去中心化预言机）上的一个预测市场，因为开放和去中心化的特征，预测市场可以让用户无需许可地交易任何资产。Pulse通过AMM让市场对头寸进行定价，当达到结算日期时，正确的预测可以得到回报。</p><p>参与的用户很少</p><h2 id="Aurora"><a href="#Aurora" class="headerlink" title="Aurora"></a>Aurora</h2><p>Near上的EVM解决方案</p><p>通过Rainbow Bridge可以将资产在以太坊、Near、Aurora三者之前跨链，其中Near与Aurora之间代币转移几乎可以瞬间到账。当前AURORA的总市值达到了200多亿美元，这也说明了它作为EVM解决方案的受欢迎程度。</p><h3 id="Trisolaris-AMM"><a href="#Trisolaris-AMM" class="headerlink" title="Trisolaris AMM"></a>Trisolaris AMM</h3><p>Aurora上最大的DEX</p><p>TRI/AURORA、AURORA/ETH两个交易对提供额外的AURORA挖矿奖励，流通性提供者可同时获得AURORA和TRI代币奖励，这表明Trisolaris得到了Aurora更多的支持。</p><p>除了Near上的Rainbow Bridge之外，Trisolaris上还可使用Multichain、Allbridge、Synapse Bridge跨链桥将资产从BSC、Terra、Avalanche等公链跨链到Aurora，LUNA、UST、AVAX、BNB、MATIC都可以和WNEAR组成交易对，参与Trisolaris的流动性挖矿。1月11日，Terra中关于UST流动性激励计划的165号提案获得通过，将激励UST在Aurora（Trisolaris、Rose）、Oasis和Solana上的使用。</p><h3 id="Wannaswap-DEX"><a href="#Wannaswap-DEX" class="headerlink" title="Wannaswap DEX"></a>Wannaswap DEX</h3><p>AURORA相关的交易对并没有额外的奖励。Wannaswap引入了推荐机制，推荐人可以获得被推荐人所得3%的奖励，若没有推荐人，这部分代币将被销毁。</p><h3 id="NearPad"><a href="#NearPad" class="headerlink" title="NearPad"></a>NearPad</h3><p>NearPad包括三个部分，发行平台、DEX和收益聚合器。其中Launchpad在Aurora上已经发起了3个项目，拍卖池分为白名单和质押参与两种，DEX即为下述的Rose。</p><h3 id="Rose-稳定币DEX"><a href="#Rose-稳定币DEX" class="headerlink" title="Rose 稳定币DEX"></a>Rose 稳定币DEX</h3><p>面向稳定币交易对和跨链资产的交易。其中稳定币池DAI/USDT/USDC有大约830万美元的流动性，交易费率为0.04%，在进行稳定币交易时，体验优于Aurora上的其它DEX。</p><h2 id="其他项目"><a href="#其他项目" class="headerlink" title="其他项目"></a>其他项目</h2><p>Awesomenear.com上收录的Near生态项目一共有237个，在基础设施、DApps、开发工具、生态系统方向均有对应的项目。</p><p>Near生态的发展中也存在不均衡的现象，Near主网上DeFi项目中的资金主要集中在Ref Finance和Meta Pool中，已上线项目还不够多，这可能是因为项目的开发成本更高，用户也需要学习使用Near的钱包。而最近两个月才开始发展生态的Aurora，因为兼容EVM，在TVL上已经超越了Near主网上的项目。</p><h1 id="Octopus-Network"><a href="#Octopus-Network" class="headerlink" title="Octopus Network"></a>Octopus Network</h1><p>章鱼网络是一个NEAR-based的多链互操作加密网络，用于启动和运行基于Web3.0 Substrate-based、EVM兼容的应用特定区块链，即应用链。在Digital Currency Group、Electric Capital等顶级风投的支持下，Octopus Network致力于释放Web3.0的新一轮创新浪潮。</p><ul><li><p>组合 Near Protocol 作为多链网络的跨链枢纽，直接享受到 NEAR Protocol 基于分片的几乎无上限的扩容潜力，直接使用 NEAR 和 ETH 跨链互操作的彩虹桥； NEAR Protocol 也将收获 Octopus Network 围绕 NEAR 构建的多链网络生态，社区也相互融合，双方极大共赢。</p></li><li><p>组合 Cosmos 提出的 IBC 协议，天然的让章鱼生态和 Cosmos 生态实现跨链互操作。</p></li></ul><p>章鱼网络的应用链可以与 Cosmos 分区链和 Polkadot 平行链的互操作；进一步结合 NEAR 的彩虹桥，章鱼应用链、NEAR Protocol 、以太坊、Cosmos 和 Polkadot 之间就实现了跨链互操作，整个区块链互联网就实现了全面的互通互联。</p><p>一套智能合约，运转在NEAR上的Octopus Relay内，与一组验证器节点相结合，应用程序链将为其应用程序的安全而支付验证器节点费。它的结构与Polkadot类似，但对于应用链来说，在Octo上启动其网络的成本要比在Polkadot上启动parachains的成本低很多。这些应用链的计划是用Substrate框架和一个专门的应用程序的前端来构建。</p><p>一旦Substrate-IBC Pallet的实施完成，这些应用链也将与IBC兼容，并且能够与其他NEAR项目通信，因为Octo桥将为每个应用链代币部署一个NEP141封装合约。</p><p>如果Octo网络能够有效地引导许多应用链，那么OCT代币将从所有这些需要Octo验证器集的共享安全性的链中大大受益</p><p>Terra和NEAR已经宣布了一项重要的合作关系，因为UST将被整合到NEAR和Aurora所有的生态系统中</p><h2 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h2><p>Octopus团队(以前称为Cdot)已经在区块链通用互操作性协议IBC和跨链集成方面工作了很长时间</p><p>是中国 Rust 社区（包括 RustCon）的组织者。在中国提供了 Substrate 在线培训课程，该课程现在是由Parity, Inc.资助的一门官方课程。基于这些经验，我们正在与包括NEAR教育团队在内的全球合作伙伴协商，在全球范围内提供类似的培训课程。</p><p>Cosmos Eco Foundation ICF资助我们实现基于Substrate的通用跨链协议IBC;我们帮助Oasis、PlatOn和Flow开发了以太坊跨链桥;我们为Chainlink实现了Solana平台预言机等。</p><p>安全级别由所持有的$OCT代币的数量决定。</p><p>验证者在Octopus Relay的应用链上投入 $OCT 并设置一个节点来运行应用链的协议</p><p>在Polkadot网络中，所有的parachains（平行链）具有相同的安全级别，无论质押的DOT数量如何。 在Octopus Newwork中，我们根据项目发展情况做安全级别的考量，从而降低了进入的门槛，每个项目可以选择随着网络的发展而增加质押，使项目能够有机地扩展，而没有恶性通货膨胀的风险。</p><p>不使用collator或XCMP (cross-shard 消息传递协议)。</p><p>预计每年将在网络中推出30-50个appchain</p><p>如果appchain Staking 的长期均衡收益率为每年 5%，那么仅是新推出的appchain每年就会带来约 4 亿美元的资产抵押需求。</p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><p><a href="https://twitter.com/oct_network" target="_blank" rel="noopener">https://twitter.com/oct_network</a></p><p><a href="https://oct.network/" target="_blank" rel="noopener">https://oct.network/</a></p><p><a href="https://medium.com/@octopuswolfi82021" target="_blank" rel="noopener">https://medium.com/@octopuswolfi82021</a></p><p><a href="https://linktr.ee/octopus.network" target="_blank" rel="noopener">https://linktr.ee/octopus.network</a></p><p><a href="https://mainnet.oct.network/home" target="_blank" rel="noopener">https://mainnet.oct.network/home</a></p><p><a href="https://accelerator.oct.network/" target="_blank" rel="noopener">https://accelerator.oct.network/</a></p><p><a href="https://discord.com/invite/6GTJBkZA9Q" target="_blank" rel="noopener">https://discord.com/invite/6GTJBkZA9Q</a></p><p><a href="https://t.me/octopusnetwork" target="_blank" rel="noopener">https://t.me/octopusnetwork</a></p><p><a href="https://www.linkedin.com/company/theoctopusnetwork" target="_blank" rel="noopener">https://www.linkedin.com/company/theoctopusnetwork</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://mirror.xyz/0xFb4c6dF1C62C62fd956546E749821b4a2B4D278b/1F6ufp5kbQ-6z54x6a6s3cxMNL5RplxgNxmHwfWsYHc" target="_blank" rel="noopener">Near生态进入发展快车道，一文了解Near中有哪些值得关注的DeFi项目</a> </p><p><a href="https://www.theblockbeats.info/news/29950" target="_blank" rel="noopener">为什么「可组合性」在 Web3.0 时代变得极其重要</a> </p><p><a href="https://coinfuture.pro/archives/5268" target="_blank" rel="noopener">聚币Jubi | Octopus Network—为开发者和创业者提供创新平台</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;NEAR介绍&quot;&gt;&lt;a href=&quot;#NEAR介绍&quot; class=&quot;headerlink&quot; title=&quot;NEAR介绍&quot;&gt;&lt;/a&gt;NEAR介绍&lt;/h1&gt;&lt;p&gt;Near Protocol作为主打“分片”概念的高性能区块链之一，相比于其它公链，DeFi布局比较缓慢，首个去中心化交易所Ref Finance在2021年4月正式上线，首个跨链预言机Flux 12月份才上线主网。&lt;/p&gt;
    
    </summary>
    
    
      <category term="区块链" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="https://hellolinux.xyz/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="公链" scheme="https://hellolinux.xyz/tags/%E5%85%AC%E9%93%BE/"/>
    
      <category term="NEAR" scheme="https://hellolinux.xyz/tags/NEAR/"/>
    
      <category term="OCT" scheme="https://hellolinux.xyz/tags/OCT/"/>
    
  </entry>
  
  <entry>
    <title>kadena公链介绍</title>
    <link href="https://hellolinux.xyz/posts/c68c674f.html"/>
    <id>https://hellolinux.xyz/posts/c68c674f.html</id>
    <published>2022-06-29T04:46:25.000Z</published>
    <updated>2022-06-29T04:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kadena-介绍"><a href="#Kadena-介绍" class="headerlink" title="Kadena 介绍"></a>Kadena 介绍</h1><p>Kadena 是一家智能合约解决方案提供商，专注于为用户提供私人区块链技术解决方案，允许用户实现ScalableBFT共识协议，同时提供了一种编程语言Pact，允许开发人员实现事务逻辑并执行业务操作。另外，Kadena也是目前市场上采用PoW共识机制结合链网模式来解决区块链公链的“不可能三角形”难题的解决方案。</p><p>Kadena联合创始人兼首席执行官Will Martino表示，adena的KDA代币价格将取决于需求和供应。Martino告诉Cointelegraph，Kadena从摩根大通的卓越区块链中心（Blockchain Center for Excellence）分离出来，其在2019年通过三次代币销售筹集了1500万美元。这位高管补充说：“ 2019年11月代币销售的结果尚未公开。” Kadena计划将其分片layer-1 PoW区块链从10条链扩展到20条链。</p><p>6月25日首次正式上市，KDA首次上市时市值为1300万美元。</p><ul><li><p>Kadena公链是全球首个、同时也是唯一实现分片式、可拓展的Layer-1 PoW区块链。</p></li><li><p>通过独有的“分片式多链结构”</p></li><li><p><strong>可拓展</strong>。通过无限增加类似比特币的平行区块链，实现性能的突破</p></li></ul><p>当你使用Kadena公链时：</p><ol><li><strong>无需经历漫长的等待</strong>。高达480,000TPS的交易处理速度，帮助你实现“秒级到账”</li><li><strong>无需支付高额的费用</strong>。得益于优越的拓展性能，你的手续费可低至0.1元以下甚至免费</li></ol><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h2><ul><li><p>Kadena是一个基于工作量证明（PoW）的区块链。 Kadena使用一种称为“Pact”的智能合约语言，这是一种具有内置自动审计功能的安全智能合约语言。</p></li><li><p>Kadena的主要卖点之一是它能够提供由POW共识支持的安全性低成本交易，同时仍然提供快速的处理时间。</p></li><li><p>KDA是项目的原生代币。KDA的当前用例包括：</p><ul><li><strong>挖矿奖励</strong>：矿工挖矿而获得的奖励。</li><li><strong>原生支付代币</strong>：Kadena公链上的交易费用需要KDA来支付。</li></ul></li><li><p>该项目由以下主要组件组成：</p><ul><li><strong><a href="https://docs.kadena.io/basics/whitepapers/chainweb-layer-1" target="_blank" rel="noopener">Chainweb</a></strong>: 一种并行工作证明共识机制，可提高吞吐量和可扩展性，同时保持如同比特币的安全性和完整性。</li><li><strong><a href="https://docs.kadena.io/basics/whitepapers/pact-smart-contract-language" target="_blank" rel="noopener">Pact</a></strong>: Kadena的智能合约语言，具有用户代码的形式化验证、合约可升级性、支持互操作性以及访问控制等功能。</li><li><strong><a href="https://docs.kadena.io/basics/wallets#chainweaver" target="_blank" rel="noopener">Chainweaver</a></strong>: 与Kadena上的dapp交互的官方钱包。</li></ul></li></ul><h1 id="团队及融资"><a href="#团队及融资" class="headerlink" title="团队及融资"></a>团队及融资</h1><p>Stuart Popejoy在创立Kadena之前是摩根大通执行董事，同时也是Haskell研发专家，现于Kadena团队中担任首席执行官。</p><p>Will Martino在创立Kadena之前是摩根大通副总裁，领导研发了摩根大通的区块链项目，现于Kadena团队中负责区块链协议研发。</p><p>Dr. Stuart Haber作为区块链的共同创造者（比特币白皮书中引用次数最多的作者）、同时也是加密领域的知名专家，现于Kadena团队中负责密码学研究。</p><p>Kadena于2018年以私募的形式获得1200万美元新一轮融资，投资方包括富达国际投资（Fidelity Investments）旗下私募投资公司Devonshire Investors、SIG、Asimov Investments、Multicoin Capital和SV Angel</p><p>Kadena还与Celo、Terra、Near、Acquis、Rosetta等多个项目进行合作，充分挖掘区块链潜能。</p><p>混合区块链项目Kadena （KDA）于Medium宣布启动1亿美元赠款计划，目前已开放申请，资助对象为游戏、元宇宙、NFT、Web3、DeFi和DAO开源项目。（2022-4-21）</p><h1 id="代币"><a href="#代币" class="headerlink" title="代币"></a>代币</h1><p>2022年3月10号上线币安</p><p>70% miners</p><p>20 platform</p><p>7% investors</p><p>3% 贡献者</p><p>截至2022年3月11日，KDA的的最大和总代币供应量为<strong>1,000,000,000</strong>。流通供应量为<strong>171,287,601（约占总代币供应量的17%）</strong></p><ul><li>在<strong><a href="https://docs.kadena.io/basics/kda/what-is-kda" target="_blank" rel="noopener">此处</a></strong>了解有关KDA代币分配的更多信息。</li></ul><h1 id="Pact语言"><a href="#Pact语言" class="headerlink" title="Pact语言"></a>Pact语言</h1><p>Pact语言的特点包括：</p><ul><li>安全：Pact是一种不可变的、确定性的、图灵不完备的语言。在提供高级语言功能的同时，还能协助Bug和漏洞修复。原子交易能确保交易中所有指令都已正确执行，以此保证数据能够妥当地处理。</li><li>快速：Pact的解析速度和执行速度都很快，并且Pact编写的代码在账本上储存时不会被修改。</li><li>灵活：开发者可以轻松学习并使用Pact语言，并基于Pact开发更多的应用。同时，智能合约能够灵活升级，以满足不断变化的业务需求。</li></ul><p>Kadena公链目前测试的TPS很高、延迟很低。但是，当主网上线之后，系统中的节点数量大大增加，节点之间的实际距离也不可控，在这种情况下，Kadena主网的性能还需要再进行观察。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://kadena.io/" target="_blank" rel="noopener">https://kadena.io/</a></p><p><a href="https://docs.kadena.io/basics/whitepapers/overview" target="_blank" rel="noopener">https://docs.kadena.io/basics/whitepapers/overview</a></p><p><a href="https://medium.com/kadena-io" target="_blank" rel="noopener">https://medium.com/kadena-io</a></p><p><a href="https://mirror.xyz/0xadC3DE0a1e1e5fa5b016af14970729C9a273f0A1/lcq6prfg9pSCRTD0R0wXZf_2Jg_V5k6LQtkdPFcyVnI" target="_blank" rel="noopener">公链研究：KDA简略</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Kadena-介绍&quot;&gt;&lt;a href=&quot;#Kadena-介绍&quot; class=&quot;headerlink&quot; title=&quot;Kadena 介绍&quot;&gt;&lt;/a&gt;Kadena 介绍&lt;/h1&gt;&lt;p&gt;Kadena 是一家智能合约解决方案提供商，专注于为用户提供私人区块链技术解决方案，允许用户实现ScalableBFT共识协议，同时提供了一种编程语言Pact，允许开发人员实现事务逻辑并执行业务操作。另外，Kadena也是目前市场上采用PoW共识机制结合链网模式来解决区块链公链的“不可能三角形”难题的解决方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="区块链" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="https://hellolinux.xyz/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="公链" scheme="https://hellolinux.xyz/tags/%E5%85%AC%E9%93%BE/"/>
    
      <category term="KDA" scheme="https://hellolinux.xyz/tags/KDA/"/>
    
  </entry>
  
  <entry>
    <title>巴菲特选股6原则</title>
    <link href="https://hellolinux.xyz/posts/fa2bb908.html"/>
    <id>https://hellolinux.xyz/posts/fa2bb908.html</id>
    <published>2022-06-27T14:41:39.000Z</published>
    <updated>2022-06-27T14:41:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3个定性"><a href="#3个定性" class="headerlink" title="3个定性"></a>3个定性</h1><ul><li>护城河公司。不是厉害技术、垄断产品， 而是网络效用（越多人用越好）、用户转换成本高、成本管理优势（相对对手公司，规模、管理）、品牌效用</li><li>产品长期可持续，业务不能经常改变。消费类</li><li>必须有一流的管理层。 财报，对股东友好（回购），管理层是否坦诚 管理层是否跟风</li></ul><p>不追求 快速的增长、未来潜在的可能性；追求 过去和当下、公司本身。</p><h1 id="3个定量"><a href="#3个定量" class="headerlink" title="3个定量"></a>3个定量</h1><ul><li>ROE 股本收益率。过去10年平均ROE高于20%，过去10年没有1年ROE低于15%。</li><li>盈利能力。毛利率长期40%+</li><li>债务比率（长期债务/总资产）。适度债务水平，普遍低于40%。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.youtube.com/watch?v=jNNMDM6GCTg" target="_blank" rel="noopener">巴菲特选股6原则</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;3个定性&quot;&gt;&lt;a href=&quot;#3个定性&quot; class=&quot;headerlink&quot; title=&quot;3个定性&quot;&gt;&lt;/a&gt;3个定性&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;护城河公司。不是厉害技术、垄断产品， 而是网络效用（越多人用越好）、用户转换成本高、成本管理优势（相对对手公司，规模、管理）、品牌效用&lt;/li&gt;
&lt;li&gt;产品长期可持续，业务不能经常改变。消费类&lt;/li&gt;
&lt;li&gt;必须有一流的管理层。 财报，对股东友好（回购），管理层是否坦诚 管理层是否跟风&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="经济" scheme="https://hellolinux.xyz/categories/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="投资" scheme="https://hellolinux.xyz/categories/%E7%BB%8F%E6%B5%8E/%E6%8A%95%E8%B5%84/"/>
    
    
      <category term="经济" scheme="https://hellolinux.xyz/tags/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="投资" scheme="https://hellolinux.xyz/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>知识管理软件zotero介绍</title>
    <link href="https://hellolinux.xyz/posts/c68c674e.html"/>
    <id>https://hellolinux.xyz/posts/c68c674e.html</id>
    <published>2022-06-26T15:52:00.000Z</published>
    <updated>2022-06-26T15:52:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zotero介绍"><a href="#Zotero介绍" class="headerlink" title="Zotero介绍"></a>Zotero介绍</h1><p>Zotero是一款开源，免费的软件，基于此有很多第三方插件和代码，从而使其功能变得极为强大。</p><p>个人知识库+工作资料库<br>工作、知识、原创</p><p>浏览器插件</p><ul><li><p>ZotFile 自动分类管理，自动重命名</p></li><li><p>MarkdownHere</p></li><li><p>利用Quicker编写组合动作，从而实现部分操作自动化。</p></li></ul><h1 id="onedriver云盘同步"><a href="#onedriver云盘同步" class="headerlink" title="onedriver云盘同步"></a>onedriver云盘同步</h1><p>Zotero设置<br>编辑 -&gt; 首选项 -&gt; 同步 -&gt; 文件同步 -&gt; 两个选项均取消</p><p>ZotFile设置</p><ul><li>工具 -&gt; ZotFile Preferences -&gt; General Settings -&gt; Source Folder for Attaching New Files -&gt; Choose to 放文献的文件夹 如FYP/bio-printing/ref</li><li>工具 -&gt; ZotFile Preferences -&gt; General Settings -&gt; Location of Files -&gt; Custom Location -&gt; Choose to OneDrive文件夹下新建一文件夹</li><li>工具 -&gt; ZotFile Preferences -&gt; Tablet Settings -&gt; Location of Files on Tablet -&gt; Base Folder -&gt; Choose to OneDrive文件夹下新建一文件夹</li><li>工具 -&gt; ZotFile Preferences -&gt; Tablet Settings -&gt; Location of Files on Tablet -&gt; Subfolders -&gt; No subfolders</li></ul><blockquote><p>收到拖动到里面的文件，如果使用ZotFile的邮件send或者move会出现报错，解决办法就是文件右键创建父目录。这样就是每个文件都需要这样操作比较麻烦，如果已经确定的文件，直接复制到云盘中再统一导入link就可以。</p></blockquote><h1 id="同步highlight"><a href="#同步highlight" class="headerlink" title="同步highlight"></a>同步highlight</h1><p>阅读与批注：转到外部PDF阅读器（即系统默认打开PDF的应用）进行批注，制作/提取批注笔记。</p><p>利用zotero-mdnotes导出文献笔记到设置的Obsidian库中，在Obsidian中进行整理。</p><p>内置的pdf标注后，文件中另存为覆盖就可以了的。</p><p>zotfile可以提取pdf中的高亮笔记，怎么改hidden options for formatting。<a href="https%3A%2F%2Fblog.monsterz.cn%2Fblog%2Fzotero%E4%B8%ADzotfile%E6%8F%90%E5%8F%96%E7%AC%94%E8%AE%B0%E6%A0%BC%E5%BC%8F%E8%AE%BE%E7%BD%AE%2F">Zplusless’s blog</a></p><p>Edit—-&gt;Preferences—-&gt;Advanced—-&gt;Config Editor—-&gt;搜索”zotfile.pdfExtraction”</p><p>首先点击extensions.zotfile.pdfExtraction.colorAnnotations，将value改为True</p><p>然后可以按照<a href="http%3A%2F%2Fzotfile.com%2F">论坛</a>配置，分别对highlight、note和underline参数进行修改，或者按照自己的意愿，或者参考<a href="https%3A%2F%2Fblog.monsterz.cn%2Fblog%2Fzotero%E4%B8%ADzotfile%E6%8F%90%E5%8F%96%E7%AC%94%E8%AE%B0%E6%A0%BC%E5%BC%8F%E8%AE%BE%E7%BD%AE%2F">Zplusless’s blog</a>的设置修改。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extensions.zotfile.pdfExtraction.formatAnnotationHighlight =&gt; <span class="tag">&lt;<span class="name">p</span>&gt;</span>"%(content)" (%(cite)) (%(label); p.%(page); %(color_category)/%(color); %(uri))<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">extensions.zotfile.pdfExtraction.formatAnnotationNote =&gt; <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>%(content) (<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"%(uri)"</span>&gt;</span>note on p.%(page)<span class="tag">&lt;/<span class="name">a</span>&gt;</span>) (%(label); p.%(page); %(uri))<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">extensions.zotfile.pdfExtraction.formatAnnotationUnderline =&gt; <span class="tag">&lt;<span class="name">p</span>&gt;</span>"<span class="tag">&lt;<span class="name">u</span>&gt;</span>%(content)<span class="tag">&lt;/<span class="name">u</span>&gt;</span>" (%(label); p.%(page); %(uri))<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在pdf中用高亮功能做好笔记的区分以后，利用zotfile的extract annotations功能就可以得到这样用颜色区分的.md笔记。</p><p>利用zotero+obsidian搭建管理工作流</p><h1 id="quicklook预览软件"><a href="#quicklook预览软件" class="headerlink" title="quicklook预览软件"></a>quicklook预览软件</h1><p><a href="https://pooi.moe/QuickLook/" target="_blank" rel="noopener">https://pooi.moe/QuickLook/</a></p><p><a href="https://github.com/QL-Win/QuickLook" target="_blank" rel="noopener">https://github.com/QL-Win/QuickLook</a></p><p><a href="https://zhuanlan.zhihu.com/p/90240384" target="_blank" rel="noopener">QuickLook：一个赋予空格键魔法的神器</a> </p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/356438055" target="_blank" rel="noopener">Zotero 6前瞻：All in Zotero</a> </p><p><a href="https://www.jianshu.com/p/d040b22342bc" target="_blank" rel="noopener">zotero中zotfile提取笔记格式设置</a> </p><p><a href="https://iloveocean.top/index.php/archives/16/" target="_blank" rel="noopener">使用Zotero进行从未有过的畅快学术体验</a> </p><p><a href="https://zhuanlan.zhihu.com/p/26765443" target="_blank" rel="noopener">知识管理软件 Zotero 的使用</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Zotero介绍&quot;&gt;&lt;a href=&quot;#Zotero介绍&quot; class=&quot;headerlink&quot; title=&quot;Zotero介绍&quot;&gt;&lt;/a&gt;Zotero介绍&lt;/h1&gt;&lt;p&gt;Zotero是一款开源，免费的软件，基于此有很多第三方插件和代码，从而使其功能变得极为强大。&lt;/p&gt;
    
    </summary>
    
    
      <category term="效率" scheme="https://hellolinux.xyz/categories/%E6%95%88%E7%8E%87/"/>
    
      <category term="工具" scheme="https://hellolinux.xyz/categories/%E6%95%88%E7%8E%87/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="知识管理" scheme="https://hellolinux.xyz/categories/%E6%95%88%E7%8E%87/%E5%B7%A5%E5%85%B7/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="工具" scheme="https://hellolinux.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="效率" scheme="https://hellolinux.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="知识管理" scheme="https://hellolinux.xyz/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>开发者免费资源记录</title>
    <link href="https://hellolinux.xyz/posts/267602e9.html"/>
    <id>https://hellolinux.xyz/posts/267602e9.html</id>
    <published>2022-06-24T15:09:35.000Z</published>
    <updated>2022-06-24T15:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>资源主要来自下面网站，目前是记录，因为类别太多，后面自己体验之后会更新一些。</p><p><a href="https://github.com/ripienaar/free-for-dev" target="_blank" rel="noopener">https://github.com/ripienaar/free-for-dev</a></p><p><a href="https://gist.github.com/imba-tjd/d73258f0817255dbe77d64d40d985e76" target="_blank" rel="noopener">https://gist.github.com/imba-tjd/d73258f0817255dbe77d64d40d985e76</a></p><p><a href="https://free-for.dev/#/" target="_blank" rel="noopener">https://free-for.dev/#/</a></p><h1 id="云"><a href="#云" class="headerlink" title="云"></a>云</h1><p>IaaS指提供系统（可以自己选）或者储存空间之类的硬件，软件要自己手动装；PaaS提供语言环境和框架（可以自己选）；SaaS只能使用开发好的软件（卖软件本身）；BaaS一般类似于非关系数据库，但各家不通用，有时还有一些其它东西。</p><h2 id="其他人的集合"><a href="#其他人的集合" class="headerlink" title="其他人的集合"></a>其他人的集合</h2><ul><li><a href="https://education.github.com/pack" target="_blank" rel="noopener">https://education.github.com/pack</a> GitHub学生包，需用教育邮箱验证。各种福利，可从DigitalOcean上手</li><li><a href="https://github.com/ripienaar/free-for-dev" target="_blank" rel="noopener">https://github.com/ripienaar/free-for-dev</a> 本文尽量不与此项目重复</li><li><a href="https://github.com/AchoArnold/discount-for-student-dev" target="_blank" rel="noopener">https://github.com/AchoArnold/discount-for-student-dev</a></li><li><a href="https://github.com/ivmm/Student-resources" target="_blank" rel="noopener">https://github.com/ivmm/Student-resources</a></li><li><a href="https://www.freeforstudents.org/" target="_blank" rel="noopener">https://www.freeforstudents.org/</a></li><li><a href="https://github.com/255kb/stack-on-a-budget" target="_blank" rel="noopener">https://github.com/255kb/stack-on-a-budget</a></li><li><a href="https://github.com/Ibexoft/awesome-startup-tools-list" target="_blank" rel="noopener">https://github.com/Ibexoft/awesome-startup-tools-list</a></li><li><a href="https://www.cokemine.com/" target="_blank" rel="noopener">https://www.cokemine.com/</a></li></ul><h2 id="Paas"><a href="#Paas" class="headerlink" title="Paas"></a>Paas</h2><ul><li><a href="https://www.heroku.com/" target="_blank" rel="noopener">https://www.heroku.com/</a> java go py docker。国内访问不佳</li><li><a href="https://fly.io/docs/pricing/" target="_blank" rel="noopener">https://fly.io/docs/pricing/</a> py node go 静态，感觉很完美</li><li><a href="https://www.deta.sh/" target="_blank" rel="noopener">https://www.deta.sh/</a> py3.9 node14 内存128MB，依赖250MB，支持定时任务。有类dict数据库和10GB存储且可独立使用</li><li><a href="https://www.pythonanywhere.com/" target="_blank" rel="noopener">https://www.pythonanywhere.com/</a> 限制非常多，免费账户不允许访问白名单之外的网站。但好歹能提供一个自动https的web app</li><li><a href="https://www.divio.com/" target="_blank" rel="noopener">https://www.divio.com/</a> docker</li><li><a href="https://render.com/" target="_blank" rel="noopener">https://render.com/</a> 曾经免费plan只有静态网页，现在提供service和database了。有node py go pg</li><li><a href="https://www.clever-cloud.com/en/pricing" target="_blank" rel="noopener">https://www.clever-cloud.com/en/pricing</a> 看介绍送20€，但应该只会送一次，可以用4个月；数据库好像有完全免费的</li><li><a href="https://cloud.google.com/appengine/docs/" target="_blank" rel="noopener">https://cloud.google.com/appengine/docs/</a> 标准环境有一点储存空间和流量，要求启用API即要求绑卡，柔性环境(.NET)必须启用结算。国内无法访问</li><li><a href="https://clustered.com/pricing" target="_blank" rel="noopener">https://clustered.com/pricing</a> 现在只免费14天，永久免费的plan还没出，但至少从2020年11月就是这样了</li><li><a href="https://www.koyeb.com/" target="_blank" rel="noopener">https://www.koyeb.com</a> docker node py go，首页被RST</li><li><a href="https://railway.app/" target="_blank" rel="noopener">https://railway.app/</a> node py go java，用了类似于heroku的buildpacks，RST</li><li><a href="https://qoddi.com/" target="_blank" rel="noopener">https://qoddi.com/</a></li></ul><h3 id="net"><a href="#net" class="headerlink" title=".net"></a>.net</h3><ul><li><a href="https://appharbor.com/" target="_blank" rel="noopener">https://appharbor.com</a> 看起来比较好，支持3.1。好像不支持5：<a href="https://support.appharbor.com/discussions/problems/117063-net-5-support" target="_blank" rel="noopener">https://support.appharbor.com/discussions/problems/117063-net-5-support</a></li><li><a href="https://freeasphosting.net/" target="_blank" rel="noopener">https://freeasphosting.net/</a> 网站说了一大堆学习的东西，不过说支持.NET5</li><li><a href="https://www.gearhost.com/" target="_blank" rel="noopener">https://www.gearhost.com/</a> 看起来比较好，支持3.1。还支持PHP7和node。现在开了CF屏蔽大陆IP</li><li><a href="https://order.aspify.com/en/freehosting/" target="_blank" rel="noopener">https://order.aspify.com/en/freehosting/</a> 100MB硬盘100MB数据库，支持5。但之前不让注册说服务在中国不可用</li><li><a href="https://somee.com/" target="_blank" rel="noopener">https://somee.com/</a> 被墙了，且IP被封了</li><li><a href="https://www.myasp.net/hosting_plans" target="_blank" rel="noopener">https://www.myasp.net/hosting_plans</a> 免费两个月但好像能免费续期</li></ul><h2 id="云端空间-IDE"><a href="#云端空间-IDE" class="headerlink" title="云端空间/IDE"></a>云端空间/IDE</h2><ul><li><a href="https://cloudstudio.net/" target="_blank" rel="noopener">https://cloudstudio.net</a> VSC，服务器在上海，每月免费1000分钟=16.7小时，4G内存，8G硬盘（但/tmp很大）</li><li><a href="https://www.gitpod.io/" target="_blank" rel="noopener">https://www.gitpod.io/</a> VSC，免费版每月50小时，支持在本地打开；专业版在学生包里免费6个月但要求Primary Email是学校的账户</li><li><a href="https://repl.it/" target="_blank" rel="noopener">https://repl.it/</a> 有免费版，专业版在学生包里免费3个月。支持许多语言，支持类Heroku的hosting，只要监听0.0.0.0上任意端口即可。自带kv数据库。配置文件为隐藏的.replit和nix，内容参考configuring-repl</li><li>GitHub Codespaces：可能收费，目前个人版暂时是免费的</li><li><a href="https://workspaces.openshift.com/" target="_blank" rel="noopener">https://workspaces.openshift.com/</a> 魔改VSC，不支持扩展，国内访问慢；之前是codenvy和che.openshift.io</li><li><a href="https://paiza.cloud/en/" target="_blank" rel="noopener">https://paiza.cloud/en/</a> 日产，好像还支持SSH连上去</li><li><a href="https://codetasty.com/" target="_blank" rel="noopener">https://codetasty.com/</a></li><li><a href="https://next.tech/" target="_blank" rel="noopener">https://next.tech/</a> 学生包中有</li><li><a href="https://ide.goorm.io/pricing" target="_blank" rel="noopener">https://ide.goorm.io/pricing</a> 可以建立五个工作区，可以用SSH连上去。好像是自制的，界面完成度蛮高的，有终端，但没有intellisense，只能玩玩。好像可以运行docker容器？</li><li><a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/codingground.htm</a> <a href="http://codepad.org/" target="_blank" rel="noopener">http://codepad.org/</a> <a href="https://ideone.com/" target="_blank" rel="noopener">https://ideone.com/</a> <a href="https://coliru.stacked-crooked.com/" target="_blank" rel="noopener">https://coliru.stacked-crooked.com/</a> <a href="https://wandbox.org/" target="_blank" rel="noopener">https://wandbox.org/</a> <a href="https://tio.run/" target="_blank" rel="noopener">https://tio.run</a> <a href="https://code.xueersi.com/ide/code/1" target="_blank" rel="noopener">https://code.xueersi.com/ide/code/1</a> <a href="https://jsrun.net/" target="_blank" rel="noopener">https://jsrun.net/</a> <a href="https://www.jdoodle.com/" target="_blank" rel="noopener">https://www.jdoodle.com/</a> <a href="https://rextester.com/" target="_blank" rel="noopener">https://rextester.com/</a> <a href="https://ide.progman.in/" target="_blank" rel="noopener">https://ide.progman.in</a> 无需登录，能执行许多语言，但只能说能运行代码，称不上IDE。<a href="https://www.codiva.io/" target="_blank" rel="noopener">https://www.codiva.io</a> 有一点intellisense</li><li><a href="https://www.keil.arm.com/" target="_blank" rel="noopener">https://www.keil.arm.com/</a></li><li><a href="https://www.jetbrains.com/zh-cn/space/" target="_blank" rel="noopener">https://www.jetbrains.com/zh-cn/space/</a></li><li><a href="https://lightly.teamcode.com/" target="_blank" rel="noopener">https://lightly.teamcode.com/</a> 国产，新出的</li></ul><h3 id="前端在线IDE"><a href="#前端在线IDE" class="headerlink" title="前端在线IDE"></a>前端在线IDE</h3><ul><li><a href="https://jsbin.com/" target="_blank" rel="noopener">https://jsbin.com</a> 简洁，无需注册，开源。国内搭建的：<a href="https://code.h5jun.com/" target="_blank" rel="noopener">https://code.h5jun.com</a> <a href="http://http//js.jirengu.com" target="_blank" rel="noopener">http://http://js.jirengu.com</a></li><li><a href="https://codepen.io/" target="_blank" rel="noopener">https://codepen.io/</a> 可不注册</li><li><a href="https://stackblitz.com/" target="_blank" rel="noopener">https://stackblitz.com/</a></li><li><a href="https://codesandbox.io/" target="_blank" rel="noopener">https://codesandbox.io/</a></li><li><a href="https://bit.dev/" target="_blank" rel="noopener">https://bit.dev/</a> RST</li><li><a href="https://runkit.com/" target="_blank" rel="noopener">https://runkit.com</a> 类似于jupyter notebook，也能创建api，以及把js的codeblock变得可运行</li><li><a href="https://www.codeply.com/" target="_blank" rel="noopener">https://www.codeply.com/</a></li><li><a href="https://plnkr.co/" target="_blank" rel="noopener">https://plnkr.co/</a> 比较简陋</li><li><a href="https://jsfiddle.net/" target="_blank" rel="noopener">https://jsfiddle.net/</a> 我这里打不开，且感觉是他们封的我们</li></ul><h3 id="Jupyter-Notebook-Lab-大数据机器学习平台"><a href="#Jupyter-Notebook-Lab-大数据机器学习平台" class="headerlink" title="Jupyter Notebook/Lab 大数据机器学习平台"></a>Jupyter Notebook/Lab 大数据机器学习平台</h3><ul><li><a href="https://colab.research.google.com/" target="_blank" rel="noopener">https://colab.research.google.com/</a> 有免费gpu额度，国内无法直接打开。免费版无终端</li><li><a href="https://tianchi.aliyun.com/notebook-ai/home" target="_blank" rel="noopener">https://tianchi.aliyun.com/notebook-ai/home</a> 免费gpu 60小时/年。登录要用阿里云账号，不想记住密码，每次都要用手机扫很麻烦，有时还要短信二次验证</li><li><a href="https://aistudio.baidu.com/aistudio/projectoverview/private" target="_blank" rel="noopener">https://aistudio.baidu.com/aistudio/projectoverview/private</a> 内存8G，磁盘100G，work目录永久保存，实名认证有一些GPU资源；长时间不用无法自动重连</li><li><a href="https://www.kaggle.com/" target="_blank" rel="noopener">https://www.kaggle.com</a> 验证电话后有免费gpu和外网，能连续运行9小时，有机器学习的教程</li><li><a href="https://www.heywhale.com/home/project" target="_blank" rel="noopener">https://www.heywhale.com/home/project</a> 国产</li><li><a href="https://datalore.jetbrains.com/" target="_blank" rel="noopener">https://datalore.jetbrains.com/</a></li><li><a href="https://cocalc.com/doc/jupyter-notebook.html" target="_blank" rel="noopener">https://cocalc.com/doc/jupyter-notebook.html</a></li><li><a href="https://jupyter.org/try" target="_blank" rel="noopener">https://jupyter.org/try</a> 官方，资源非常少，有C++；mybinder可以从GitHub仓库建立临时NB</li><li><a href="https://kogence.com/app/landing/pricing" target="_blank" rel="noopener">https://kogence.com/app/landing/pricing</a></li><li><a href="https://deepnote.com/" target="_blank" rel="noopener">https://deepnote.com</a> 免费额度750小时，5G空间</li><li><a href="https://www.dclab.run/project_list.html" target="_blank" rel="noopener">https://www.dclab.run/project_list.html</a> 国产</li><li><a href="https://software.intel.com/content/www/cn/zh/develop/tools/devcloud.html" target="_blank" rel="noopener">https://software.intel.com/content/www/cn/zh/develop/tools/devcloud.html</a></li><li><a href="https://lab.datafountain.cn/" target="_blank" rel="noopener">https://lab.datafountain.cn/</a> 国产，CCF</li><li><a href="https://www.datacastle.cn/" target="_blank" rel="noopener">https://www.datacastle.cn</a> 国产</li></ul><h2 id="数据库DBaaS"><a href="#数据库DBaaS" class="headerlink" title="数据库DBaaS"></a>数据库DBaaS</h2><ul><li><a href="https://db4free.net/" target="_blank" rel="noopener">https://db4free.net/</a> mysql 200M</li><li><a href="https://dbhub.io/" target="_blank" rel="noopener">https://dbhub.io/</a> SQLite</li><li><a href="https://memfiredb.com/" target="_blank" rel="noopener">https://memfiredb.com/</a> 兼容PG11，国产，5GB，目前在公测，管理员说后续收费计划还没决定</li><li><a href="https://remotemysql.com/" target="_blank" rel="noopener">https://remotemysql.com/</a> mysql 8.0 100M，需要花不少时间回答调查问卷，允许常见的DQL和DML和创建索引，不能创建Proc 视图 触发器</li><li><a href="https://mlab.com/" target="_blank" rel="noopener">https://mlab.com/</a> <a href="https://www.mongodb.com/pricing" target="_blank" rel="noopener">https://www.mongodb.com/pricing</a> 500MB；后者学生包中有</li><li><a href="https://www.freemysqlhosting.net/" target="_blank" rel="noopener">https://www.freemysqlhosting.net/</a> mysql 5.5，5MB，每周会收到要手动操作来延期的邮件</li><li><a href="https://www.datastax.com/products/datastax-astra/pricing" target="_blank" rel="noopener">https://www.datastax.com/products/datastax-astra/pricing</a> ApacheCassandra(NoSQL)</li><li><del><a href="https://www.freesqldatabase.com/" target="_blank" rel="noopener">https://www.freesqldatabase.com/</a> mysql 5MB</del> 会过期</li><li><a href="http://sqlpub.com/" target="_blank" rel="noopener">http://sqlpub.com/</a> MySQL，国产</li></ul><h2 id="BaaS"><a href="#BaaS" class="headerlink" title="BaaS"></a>BaaS</h2><ul><li><a href="https://bmob.cn/" target="_blank" rel="noopener">https://bmob.cn/</a></li><li><a href="https://leancloud.cn/pricing/" target="_blank" rel="noopener">https://leancloud.cn/pricing/</a></li><li><a href="https://firebase.google.cn/pricing" target="_blank" rel="noopener">https://firebase.google.cn/pricing</a> 用处：<a href="https://zhuanlan.zhihu.com/p/95334890" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/95334890</a></li><li><a href="https://www.zhihu.com/question/34124789/answer/72495188" target="_blank" rel="noopener">https://www.zhihu.com/question/34124789/answer/72495188</a></li><li><a href="https://maxleap.cn/s/web/zh_cn/devcenter-pricing.html" target="_blank" rel="noopener">https://maxleap.cn/s/web/zh_cn/devcenter-pricing.html</a></li><li><a href="https://www.8base.com/" target="_blank" rel="noopener">https://www.8base.com</a> GraphQL</li><li><a href="https://www.easycsv.io/pricing" target="_blank" rel="noopener">https://www.easycsv.io/pricing</a></li><li>JSON<ul><li><a href="https://jsonstores.com/" target="_blank" rel="noopener">https://jsonstores.com/</a> 100个JSON对象，每个最大2MB</li><li><a href="https://jsonbin.io/" target="_blank" rel="noopener">https://jsonbin.io/</a></li><li><a href="https://extendsclass.com/json-storage.html" target="_blank" rel="noopener">https://extendsclass.com/json-storage.html</a></li><li><a href="https://json.psty.io/" target="_blank" rel="noopener">https://json.psty.io/</a></li><li><a href="https://www.jsonstorage.net/" target="_blank" rel="noopener">https://www.jsonstorage.net/</a> 有无需注册的</li><li><a href="https://db.neelr.dev/" target="_blank" rel="noopener">https://db.neelr.dev/</a> 无需注册，打开网页时自动生成一个TOKEN。但国内打不开</li></ul></li></ul><h2 id="Managed-K8S"><a href="#Managed-K8S" class="headerlink" title="Managed K8S"></a>Managed K8S</h2><ul><li><a href="https://www.openshift.com/products/online/" target="_blank" rel="noopener">https://www.openshift.com/products/online/</a> 每60天清除</li><li><a href="https://okteto.com/pricing" target="_blank" rel="noopener">https://okteto.com/pricing</a> 免费版2CPU，4G内存，10G储存。刚注册送一个月pro，不付款自动降到免费版。免费版24小时不活动就sleep。原意是为开发者日常开发使用的</li><li><a href="https://usekrucible.com/" target="_blank" rel="noopener">https://usekrucible.com</a> 一个月能用25小时，自己分配</li><li><a href="https://kubernauts.sh/" target="_blank" rel="noopener">https://kubernauts.sh/</a> 宣传免费版有1CPU，1G内存；申请注册后没收到任何邮件，无法登录</li><li><a href="https://labs.play-with-k8s.com/" target="_blank" rel="noopener">https://labs.play-with-k8s.com/</a> 好像每天只有四小时；<a href="https://labs.play-with-docker.com/" target="_blank" rel="noopener">https://labs.play-with-docker.com/</a></li><li>zarvis.ai staroid.com 网页都用的是Google的服务器，无法直接访问</li><li><a href="https://kubesail.com/" target="_blank" rel="noopener">https://kubesail.com/</a> 停止免费版了，不过还是能作为管理平台</li><li><a href="https://loft.sh/" target="_blank" rel="noopener">https://loft.sh/</a> 好像只是客户端或者管理平台</li><li>挂了的：k8spin.cloud tryk8s.com</li></ul><h2 id="Serverless-Node-Paas（无状态的api）"><a href="#Serverless-Node-Paas（无状态的api）" class="headerlink" title="Serverless/Node Paas（无状态的api）"></a>Serverless/Node Paas（无状态的api）</h2><ul><li><a href="https://glitch.com/" target="_blank" rel="noopener">https://glitch.com/</a></li><li><a href="https://workers.cloudflare.com/" target="_blank" rel="noopener">https://workers.cloudflare.com/</a> ；<a href="https://github.com/booster-labs/rocket-booster" target="_blank" rel="noopener">https://github.com/booster-labs/rocket-booster</a></li><li><a href="https://vercel.com/" target="_blank" rel="noopener">https://vercel.com/</a> node go py</li><li><a href="https://deno.com/deploy" target="_blank" rel="noopener">https://deno.com/deploy</a></li><li><a href="https://pipedream.com/" target="_blank" rel="noopener">https://pipedream.com/</a></li><li><a href="https://keen.io/" target="_blank" rel="noopener">https://keen.io/</a></li><li><a href="https://www.openode.io/pricing" target="_blank" rel="noopener">https://www.openode.io/pricing</a></li><li><a href="https://www.cloud66.com/node/" target="_blank" rel="noopener">https://www.cloud66.com/node/</a> 免费一个月</li><li><a href="https://www.jexia.com/" target="_blank" rel="noopener">https://www.jexia.com/</a></li><li><a href="https://encore.dev/" target="_blank" rel="noopener">https://encore.dev/</a> RST</li><li>谷歌的functions有一些免费额度，但一定会产生部署费用，最少$0.03/mo</li><li>国内的云服务厂商一般都有FaaS服务，也有一定的免费额度，但问题是公网流出流量是没有免费额度的</li><li><a href="https://www.slappforge.com/sigma" target="_blank" rel="noopener">https://www.slappforge.com/sigma</a> 仅开发平台</li><li><a href="https://catalyst.zoho.com/" target="_blank" rel="noopener">https://catalyst.zoho.com/</a> 有免费的</li><li><a href="https://hook.io/pricing" target="_blank" rel="noopener">https://hook.io/pricing</a></li><li><a href="https://jotcode.io/" target="_blank" rel="noopener">https://jotcode.io/</a></li></ul><h2 id="静态网页托管（必须要能自动更新）"><a href="#静态网页托管（必须要能自动更新）" class="headerlink" title="静态网页托管（必须要能自动更新）"></a>静态网页托管（必须要能自动更新）</h2><ul><li><a href="https://surge.sh/" target="_blank" rel="noopener">https://surge.sh/</a></li><li><a href="https://www.netlify.com/" target="_blank" rel="noopener">https://www.netlify.com/</a></li><li><a href="https://cloudcannon.com/" target="_blank" rel="noopener">https://cloudcannon.com</a></li><li><a href="https://tiiny.host/" target="_blank" rel="noopener">https://tiiny.host</a> 只能存活7天？</li><li><a href="https://pages.cloudflare.com/" target="_blank" rel="noopener">https://pages.cloudflare.com/</a></li><li><a href="https://cloud.digitalocean.com/apps" target="_blank" rel="noopener">https://cloud.digitalocean.com/apps</a> starter版本免费3个静态网站，用了cf的cdn国内可能无法访问</li></ul><h2 id="也许可用的IaaS"><a href="#也许可用的IaaS" class="headerlink" title="也许可用的IaaS"></a>也许可用的IaaS</h2><ul><li>euserv，德国的，只有IPV6，亲测确实可以，但硬盘很慢 <a href="https://github.com/YG-tsj/EUserv-warp" target="_blank" rel="noopener">https://github.com/YG-tsj/EUserv-warp</a></li><li><a href="https://open.iot.10086.cn/cloud/introduction/cloud-server" target="_blank" rel="noopener">https://open.iot.10086.cn/cloud/introduction/cloud-server</a> OneNET移动的，MQ、对象储存、可视化、CI都有一定的免费额度</li><li><a href="https://activity.xinruiyun.cn/free/" target="_blank" rel="noopener">https://activity.xinruiyun.cn/free/</a> 新睿云，发个广告可以免费用一个月的ECS</li><li><a href="https://www.oracle.com/cn/cloud/free/" target="_blank" rel="noopener">https://www.oracle.com/cn/cloud/free/</a> 体验文章：<a href="https://51.ruyo.net/14138.html" target="_blank" rel="noopener">https://51.ruyo.net/14138.html</a> 不支持prepaid card；<a href="https://www.blueskyxn.com/202109/5232.html" target="_blank" rel="noopener">https://www.blueskyxn.com/202109/5232.html</a></li><li><a href="https://51.ruyo.net/14583.html" target="_blank" rel="noopener">https://51.ruyo.net/14583.html</a> Azure</li><li><a href="https://www.atlantic.net/" target="_blank" rel="noopener">https://www.atlantic.net/</a> <del>免费12个月</del>现在好像变成免费一个月了，需要信用卡</li><li><a href="https://hax.co.id/" target="_blank" rel="noopener">https://hax.co.id/</a> <a href="https://woiden.id/" target="_blank" rel="noopener">https://woiden.id/</a> <a href="https://blog.kermsite.com/p/hax/" target="_blank" rel="noopener">https://blog.kermsite.com/p/hax/</a></li><li><a href="https://evolution-host.com/" target="_blank" rel="noopener">https://evolution-host.com/</a></li><li><a href="https://microlxc.net/" target="_blank" rel="noopener">https://microlxc.net/</a> <a href="https://nanokvm.net/" target="_blank" rel="noopener">https://nanokvm.net/</a> 需要注册 <a href="https://lowendtalk.com/" target="_blank" rel="noopener">https://lowendtalk.com/</a> 满足一定条件才能申请</li><li>谷歌云、Amazon、Azure、Yandex Cloud：注册后都会送一些额度</li></ul><h3 id="IBM-Cloud"><a href="#IBM-Cloud" class="headerlink" title="IBM Cloud"></a><a href="https://www.ibm.com/cn-zh/cloud/free" target="_blank" rel="noopener">IBM Cloud</a></h3><ul><li>Lite(轻量)版无需信用卡，没有到期时间，完全不会变到付费套餐上，额度到了就无法使用，30天不活动自动删除，一共44项服务</li><li>Cloud Foundry：PaaS 256M内存，支持Java Node .NET GO PHP Py。10天不活动就休眠。apic.mybluemix.net和mybluemix.net都被墙了。要用ibmcloud命令行</li><li>对象储存：25GB储存，5GB出站；Cloudant JSON文档数据库：1GB；DB2数据库：200MB，每90天要邮件延期</li><li>机器翻译：但无ja-zh模型，只能和en互转，每月100万字符</li><li><del>API Gateway：转发一次到另一个endpoint上，能用于静态文件的反代，能设定密钥验证和限制速率，显示调用频率。免费调用100万次但是没写每月，之后限速</del> 他们关闭此服务了，说要迁移到API Connect Reserved，然而这东西是付费的，介绍中的Lite能用的V5版也不存在</li><li>Cloud for Education：持续时间一小时的ECS，能用RDP连上但卡到完全无法使用，好像无外部互联网连接</li><li>机器学习</li><li>Docker Registry：储存0.5GB，流量5GB</li><li>Event Streams：Kafka</li><li>那些“软件”虽然有非常多免费的，但必须部署到k8s上；k8s也有免费套餐，但lite无法创建，因为流量和IP可能要收费</li><li>函数计算：虽然有一点免费额度，但是无lite版</li></ul><h3 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a><a href="https://cloud.tencent.com/act/free" target="_blank" rel="noopener">腾讯云</a></h3><ul><li>对象储存：免费半年</li><li>CDN：免费半年</li><li>Serverless：免费一年</li><li>文件储存：免费10G</li><li>机器翻译：免费500万字符/月，开通免费版必不会收任何费用</li><li>云托管 CloudBase Run：不知道干什么用的</li></ul><h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a><a href="https://free.aliyun.com/" target="_blank" rel="noopener">阿里云</a></h3><ul><li>ECS：<a href="https://www.aliyun.com/daily-act/ecs/free" target="_blank" rel="noopener">https://www.aliyun.com/daily-act/ecs/free</a> 需要实名认证且未购买过任何产品，有个t6的ECS可以免费试用一年</li><li>MaxCompute大数据计算服务开发者版<a href="https://www.aliyun.com/product/odps" target="_blank" rel="noopener">https://www.aliyun.com/product/odps</a></li><li>云效DevOps有一些免费额度，包括5GB Maven仓库</li><li>机器翻译通用版：每月100万字符免费额度</li></ul><h2 id="低代码平台-aPaaS"><a href="#低代码平台-aPaaS" class="headerlink" title="低代码平台/aPaaS"></a>低代码平台/aPaaS</h2><ul><li>指不用写很多代码就能设计出软件，有可视化工具</li><li>大部分都是BPM平台，即 表单+工作流审批，适合企业建立业务逻辑在线办公</li><li>往往与平台本身严重绑定，难以复用和维护，切换平台代价大，开发者自身难以提升</li></ul><h3 id="国内的"><a href="#国内的" class="headerlink" title="国内的"></a>国内的</h3><ul><li><a href="https://github.com/taowen/awesome-lowcode" target="_blank" rel="noopener">https://github.com/taowen/awesome-lowcode</a> 收集</li><li><a href="https://www.aliwork.com/" target="_blank" rel="noopener">https://www.aliwork.com/</a> 宜搭，阿里+钉钉</li><li><a href="https://www.apicloud.com/" target="_blank" rel="noopener">https://www.apicloud.com/</a> 云端开发管理类</li><li><a href="https://www.mingdao.com/" target="_blank" rel="noopener">https://www.mingdao.com/</a> 明道云</li><li><a href="https://www.jiandaoyun.com/" target="_blank" rel="noopener">https://www.jiandaoyun.com/</a> 简道云</li><li><a href="https://www.huoban.com/" target="_blank" rel="noopener">https://www.huoban.com/</a> 伙伴云</li><li><a href="https://qingflow.com/" target="_blank" rel="noopener">https://qingflow.com/</a> 轻流</li><li><a href="https://www.steedos.com/pricing/platform/" target="_blank" rel="noopener">https://www.steedos.com/pricing/platform/</a> 华炎魔方，开源，私有部署免费</li><li><a href="https://baidu.gitee.io/amis/docs/index" target="_blank" rel="noopener">https://baidu.gitee.io/amis/docs/index</a> 开源，偏程序员</li><li><a href="https://modao.cc/" target="_blank" rel="noopener">https://modao.cc/</a> 墨刀，原型设计工具</li><li><a href="https://www.imgcook.com/" target="_blank" rel="noopener">https://www.imgcook.com/</a> 淘宝，由设计稿生成界面</li><li><a href="https://www.huaweicloud.com/product/appcube.html" target="_blank" rel="noopener">https://www.huaweicloud.com/product/appcube.html</a> 华为云应用魔方，太新</li><li><a href="https://www.informat.cn/" target="_blank" rel="noopener">https://www.informat.cn/</a> 织信</li><li><a href="https://seatable.cn/" target="_blank" rel="noopener">https://seatable.cn/</a> 在线协同表格和信息管理工具，类似于excel，本体不开源但开源了一些组件</li><li><a href="https://www.baishuyun.com/" target="_blank" rel="noopener">https://www.baishuyun.com/</a> 百数云</li><li><a href="https://kalacloud.com/" target="_blank" rel="noopener">https://kalacloud.com/</a> 卡拉云</li><li><a href="https://js.design/" target="_blank" rel="noopener">https://js.design/</a> 即时设计，原型设计工具</li><li>网页感觉不太好的<ul><li><a href="https://www.iyunbiao.com/" target="_blank" rel="noopener">https://www.iyunbiao.com/</a> 云表</li><li><a href="https://www.grapecity.com.cn/solutions/huozige" target="_blank" rel="noopener">https://www.grapecity.com.cn/solutions/huozige</a> 活字格</li><li><a href="https://www.learun.cn/" target="_blank" rel="noopener">https://www.learun.cn/</a> 力软敏捷框架</li><li><a href="https://www.ivx.cn/" target="_blank" rel="noopener">https://www.ivx.cn</a> 号称零代码开发Web App和小程序，前身是ih5.cn，不是BPM</li><li><a href="https://wuyuan.io/" target="_blank" rel="noopener">https://wuyuan.io/</a> <a href="https://enhancer.io/" target="_blank" rel="noopener">https://enhancer.io/</a> 无远开发平台，个人使用免费，商业收费</li><li><a href="https://www.wudaima.com/" target="_blank" rel="noopener">https://www.wudaima.com/</a> 宜创无代码，官网的footer的链接都是废的，一点也不透明</li><li><a href="https://www.bn100.com/" target="_blank" rel="noopener">https://www.bn100.com/</a> 柏思科技/Workfine</li></ul></li><li>收费的<ul><li><a href="https://h3yun.com/" target="_blank" rel="noopener">https://h3yun.com/</a> 氚云，只免费15天，集成钉钉 <a href="https://www.cloudpivot.cn/" target="_blank" rel="noopener">https://www.cloudpivot.cn/</a> 云枢 <a href="https://www.h3bpm.com/" target="_blank" rel="noopener">https://www.h3bpm.com/</a> 都是“奥哲”公司的</li><li><a href="https://www.newdao.net/" target="_blank" rel="noopener">https://www.newdao.net/</a> 牛刀，免费两周</li><li><a href="https://www.clickpaas.com/" target="_blank" rel="noopener">https://www.clickpaas.com/</a> 不支持个人</li><li><a href="https://www.dadayun.cn/" target="_blank" rel="noopener">https://www.dadayun.cn/</a> 搭搭云 没有注册的地方</li></ul></li><li>没有https的： <a href="http://www.joget.cn/" target="_blank" rel="noopener">http://www.joget.cn/</a> 捷得 、<a href="http://www.putdb.com/" target="_blank" rel="noopener">http://www.putdb.com/</a> WebBuilder 、<a href="http://www.mf999.com/" target="_blank" rel="noopener">http://www.mf999.com/</a> 魔方网表(纯表单类)、<a href="http://www.delit.cn/" target="_blank" rel="noopener">http://www.delit.cn/</a> 度量快速开发平台、<a href="http://www.jinyunweb.com/" target="_blank" rel="noopener">http://www.jinyunweb.com</a> 进云、<a href="http://dev.easydo.cn/" target="_blank" rel="noopener">http://dev.easydo.cn</a> 易开发、<a href="http://www.jepaas.com/" target="_blank" rel="noopener">http://www.jepaas.com/</a> 、</li></ul><h3 id="国外的"><a href="#国外的" class="headerlink" title="国外的"></a>国外的</h3><ul><li><a href="https://anvil.works/" target="_blank" rel="noopener">https://anvil.works/</a> py全栈，前端Drag and Drop UI，后端和数据储存用的是该网站的库</li><li><a href="https://www.outsystems.com/pricing-and-editions/" target="_blank" rel="noopener">https://www.outsystems.com/pricing-and-editions/</a> 开发移动应用，是该行的老大；前端组件比较多，后台相对弱一点儿；注册需要姓名，邮箱</li><li><a href="https://www.mendix.com/" target="_blank" rel="noopener">https://www.mendix.com/</a> 开发移动应用，后台能力比较强（有微流系统）</li><li><a href="https://free.caspio.com/" target="_blank" rel="noopener">https://free.caspio.com/</a> Database-Powered Apps</li><li><a href="https://thunkable.com/" target="_blank" rel="noopener">https://thunkable.com</a> 开发移动应用</li><li><a href="https://www.appsheet.com/" target="_blank" rel="noopener">https://www.appsheet.com/</a> 无法直接打开</li><li><a href="https://www.zoho.com/creator/" target="_blank" rel="noopener">https://www.zoho.com/creator/</a> 网页在我这里打开巨慢。可以一直用免费版只要不使用高级特性</li><li><a href="https://airtable.com/" target="_blank" rel="noopener">https://airtable.com/</a></li><li><a href="https://zenkit.com/" target="_blank" rel="noopener">https://zenkit.com/</a> 无法直接打开</li><li>Google的App Maker（G Suite收费）、微软的PowerApps（收费10$/mo）</li><li><a href="https://www.dronahq.com/" target="_blank" rel="noopener">https://www.dronahq.com/</a></li><li><a href="https://zhuanlan.zhihu.com/p/375252561" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/375252561</a></li><li><a href="https://www.odoo.com/zh_CN/" target="_blank" rel="noopener">https://www.odoo.com/zh_CN/</a> 开源</li><li><a href="https://bubble.io/" target="_blank" rel="noopener">https://bubble.io/</a> 新出的</li><li><a href="https://github.com/appsmithorg/appsmith" target="_blank" rel="noopener">https://github.com/appsmithorg/appsmith</a></li><li><a href="https://www.ragic.com.cn/" target="_blank" rel="noopener">https://www.ragic.com.cn/</a> 表格类</li><li><a href="https://www.airtable.com/" target="_blank" rel="noopener">https://www.airtable.com/</a></li><li><a href="https://www.make.com/" target="_blank" rel="noopener">https://www.make.com</a></li></ul><h2 id="未分类"><a href="#未分类" class="headerlink" title="未分类"></a>未分类</h2><ul><li><a href="https://www.litespeedtech.com/experience-litespeed-for-free" target="_blank" rel="noopener">https://www.litespeedtech.com/experience-litespeed-for-free</a> 一个月有效？需要姓名，电话，邮箱，地址。好像只有wordpress，还是只有软件？</li><li><a href="https://github-students.educationhost.co.uk/" target="_blank" rel="noopener">https://github-students.educationhost.co.uk/</a> 免费一年</li><li>有可能与Jupyter有关：<ul><li><a href="https://www.dataquest.io/plans-pricing/" target="_blank" rel="noopener">https://www.dataquest.io/plans-pricing/</a></li><li><a href="https://mode.com/compare-plans/" target="_blank" rel="noopener">https://mode.com/compare-plans/</a></li><li><a href="https://kyso.io/pricing" target="_blank" rel="noopener">https://kyso.io/pricing</a></li></ul></li><li><a href="https://studio.azureml.net/" target="_blank" rel="noopener">https://studio.azureml.net/</a> 可视化机器学习实验工具，可不登陆使用</li><li><a href="https://quic.cloud/" target="_blank" rel="noopener">https://quic.cloud/</a> Wordpress cache cdn</li><li><a href="https://apis.baidu.com/" target="_blank" rel="noopener">https://apis.baidu.com/</a></li><li><a href="https://platform.sh/pricing/" target="_blank" rel="noopener">https://platform.sh/pricing/</a> 好像只免费30天</li><li>API聚合</li><li><a href="https://rapidapi.com/" target="_blank" rel="noopener">https://rapidapi.com/</a> 只是一个平台，经过它反代到各个提供者的服务器上，大部分质量很低，速度超慢。作为提供者大概简化了收费和验证途径吧。有点用的：simple-file-storage、secure-storage、postput。各种cors-proxy反代。ProxyPage代理ip</li><li><a href="https://promptapi.com/" target="_blank" rel="noopener">https://promptapi.com</a></li><li><a href="https://qingfuwu.cn/" target="_blank" rel="noopener">https://qingfuwu.cn/</a> 轻服务，字节出的</li></ul><h1 id="有云服务器时能自建的项目"><a href="#有云服务器时能自建的项目" class="headerlink" title="有云服务器时能自建的项目"></a>有云服务器时能自建的项目</h1><ul><li>ss：<a href="https://github.com/lrinQVQ/script" target="_blank" rel="noopener">https://github.com/lrinQVQ/script</a> <a href="https://github.com/mritd/dockerfile/tree/master/shadowsocks" target="_blank" rel="noopener">https://github.com/mritd/dockerfile/tree/master/shadowsocks</a></li><li>网盘<ul><li>Seafile：国产，C，同步盘，但必须依赖Py2.7</li><li><a href="https://github.com/nextcloud/docker" target="_blank" rel="noopener">https://github.com/nextcloud/docker</a> <a href="https://docs.nextcloud.com/server/17/user_manual/" target="_blank" rel="noopener">https://docs.nextcloud.com/server/17/user_manual/</a> ：owncloud的同作者，PHP。<a href="https://github.com/e-alfred/ocdownloader" target="_blank" rel="noopener">https://github.com/e-alfred/ocdownloader</a> 离线下载插件</li><li>Cloudreve：国产，GO，支持OSS</li><li>zFile：国产，Java</li><li><a href="https://github.com/syncthing/syncthing" target="_blank" rel="noopener">https://github.com/syncthing/syncthing</a> GO</li><li>BTSync</li><li>oneindex</li><li>OLAINDEX：使用OneDrive API</li><li><a href="https://github.com/zhaojun1998/zfile" target="_blank" rel="noopener">https://github.com/zhaojun1998/zfile</a> 评测：<a href="https://xiaoyou66.com/archives/769" target="_blank" rel="noopener">https://xiaoyou66.com/archives/769</a></li><li><a href="https://www.directorylister.com/" target="_blank" rel="noopener">https://www.directorylister.com/</a> indexer，PHP</li><li><a href="https://github.com/prasathmani/tinyfilemanager" target="_blank" rel="noopener">https://github.com/prasathmani/tinyfilemanager</a> PHP</li><li>sparkleshare</li><li>rclone</li><li><a href="https://freefilesync.org/" target="_blank" rel="noopener">https://freefilesync.org/</a></li></ul></li><li>文件浏览器：<a href="https://larsjung.de/h5ai/" target="_blank" rel="noopener">https://larsjung.de/h5ai/</a> （PHP）、<a href="https://github.com/filebrowser/filebrowser" target="_blank" rel="noopener">https://github.com/filebrowser/filebrowser</a> （GO）</li><li>gitlab</li><li>爬虫</li><li>论坛：discuz（PHP，维护不快），Flarum（PHP），vanilla (PHP)</li><li>监控程序/API<ul><li><a href="https://github.com/ivbeg/awesome-status-pages" target="_blank" rel="noopener">https://github.com/ivbeg/awesome-status-pages</a> 合集</li><li><a href="https://cachethq.io/" target="_blank" rel="noopener">https://cachethq.io/</a> 合集中最活跃的但是PHP</li><li><a href="https://github.com/hunterlong/statping" target="_blank" rel="noopener">https://github.com/hunterlong/statping</a> GO</li><li><a href="https://github.com/bazzite/statusfy" target="_blank" rel="noopener">https://github.com/bazzite/statusfy</a> JS</li><li><a href="https://uptimerobot.com/" target="_blank" rel="noopener">https://uptimerobot.com/</a> 不开源有免费版</li><li><a href="https://www.atlassian.com/zh/software/statuspage" target="_blank" rel="noopener">https://www.atlassian.com/zh/software/statuspage</a> 有免费版</li><li><a href="https://github.com/nicolargo/glances" target="_blank" rel="noopener">https://github.com/nicolargo/glances</a> Py</li><li><a href="https://eheh.org/" target="_blank" rel="noopener">https://eheh.org/</a> 国产</li><li><a href="https://www.fundebug.com/" target="_blank" rel="noopener">https://www.fundebug.com/</a></li><li><a href="https://betteruptime.com/pricing" target="_blank" rel="noopener">https://betteruptime.com/pricing</a> 不开源有免费版</li></ul></li><li>监控服务器状态：<a href="https://github.com/netdata/netdata" target="_blank" rel="noopener">https://github.com/netdata/netdata</a> C+Python，star非常多，有中文翻译。<a href="https://github.com/grafana/grafana" target="_blank" rel="noopener">https://github.com/grafana/grafana</a> TS+GO，star数稍少，但commit数和贡献者数非常多。<a href="https://github.com/open-falcon/falcon-plus" target="_blank" rel="noopener">https://github.com/open-falcon/falcon-plus</a> GO，相对而言star数少很多，但是国产的，需要mysql；<a href="https://github.com/CokeMine/ServerStatus-Hotaru" target="_blank" rel="noopener">https://github.com/CokeMine/ServerStatus-Hotaru</a></li><li>各种可以装的软件的收集：<a href="https://github.com/Kickball/awesome-selfhosted" target="_blank" rel="noopener">https://github.com/Kickball/awesome-selfhosted</a> 、<a href="https://www.softaculous.com/softaculous/apps" target="_blank" rel="noopener">https://www.softaculous.com/softaculous/apps</a> 、 <a href="https://github.com/luong-komorebi/Awesome-Linux-Software" target="_blank" rel="noopener">https://github.com/luong-komorebi/Awesome-Linux-Software</a> 、<a href="https://statusfy.co/" target="_blank" rel="noopener">https://statusfy.co/</a></li><li>自己挂广告</li><li>图床：<a href="https://xiaoyou66.com/archives/774" target="_blank" rel="noopener">https://xiaoyou66.com/archives/774</a> <a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">https://molunerfinn.com/PicGo/</a> <a href="https://github.com/wisp-x/lsky-pro" target="_blank" rel="noopener">https://github.com/wisp-x/lsky-pro</a> <a href="https://github.com/chevereto/Chevereto-Free" target="_blank" rel="noopener">https://github.com/chevereto/Chevereto-Free</a></li><li>可视化日志：<a href="https://goaccess.io/" target="_blank" rel="noopener">https://goaccess.io</a></li><li>BT下载：<a href="https://github.com/jpillora/cloud-torrent" target="_blank" rel="noopener">https://github.com/jpillora/cloud-torrent</a></li><li>创建网页版的Shell：<a href="https://github.com/instantbox/instantbox" target="_blank" rel="noopener">https://github.com/instantbox/instantbox</a></li><li>jupyter notebook: <a href="https://xiaoyou66.com/archives/1095" target="_blank" rel="noopener">https://xiaoyou66.com/archives/1095</a></li><li>OSS: <a href="https://github.com/minio/minio" target="_blank" rel="noopener">https://github.com/minio/minio</a> <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-object-storage-server-using-minio-on-ubuntu-18-04" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-set-up-an-object-storage-server-using-minio-on-ubuntu-18-04</a> 但协议是最严格的AGPL</li><li>短链接：UOURLS（PHP，需要二次开发）Polr（也是PHP，不过偏向开箱即用）<a href="https://github.com/ellisonleao/pyshorteners" target="_blank" rel="noopener">https://github.com/ellisonleao/pyshorteners</a> <a href="https://shlink.io/" target="_blank" rel="noopener">https://shlink.io/</a></li><li><a href="https://apex.sh/up/" target="_blank" rel="noopener">https://apex.sh/up/</a> 一键部署几种语言的Serverless应用到AWS</li><li><a href="https://github.com/chrislusf/seaweedfs" target="_blank" rel="noopener">https://github.com/chrislusf/seaweedfs</a> 分布式文件系统，支持S3的API；<a href="https://github.com/syncthing/syncthing" target="_blank" rel="noopener">https://github.com/syncthing/syncthing</a></li><li>当我有服务器时我做了什么（别人的集合）：<a href="https://shanyue.tech/op" target="_blank" rel="noopener">https://shanyue.tech/op</a></li><li>后台控制面板：<a href="https://www.jianshu.com/p/3bc7404af887" target="_blank" rel="noopener">https://www.jianshu.com/p/3bc7404af887</a></li><li>搜索引擎：<a href="https://github.com/benbusby/whoogle-search" target="_blank" rel="noopener">https://github.com/benbusby/whoogle-search</a> <a href="https://github.com/milvus-io/milvus" target="_blank" rel="noopener">https://github.com/milvus-io/milvus</a> <a href="https://github.com/meilisearch/MeiliSearch" target="_blank" rel="noopener">https://github.com/meilisearch/MeiliSearch</a></li><li>控制面板：<a href="https://github.com/cockpit-project/cockpit" target="_blank" rel="noopener">https://github.com/cockpit-project/cockpit</a></li><li>性能测试：<code>curl -L bench.sh | bash</code></li><li>CMS: <a href="https://www.storyblok.com/" target="_blank" rel="noopener">https://www.storyblok.com/</a></li><li>CI<ul><li><a href="https://www.jetbrains.com/teamcity/" target="_blank" rel="noopener">https://www.jetbrains.com/teamcity/</a></li><li><a href="https://drone.io/" target="_blank" rel="noopener">https://drone.io/</a></li></ul></li></ul><h2 id="自建Paas"><a href="#自建Paas" class="headerlink" title="自建Paas"></a>自建Paas</h2><p>集合：<a href="https://paasfinder.org/" target="_blank" rel="noopener">https://paasfinder.org</a></p><ul><li><a href="https://dokku.com/" target="_blank" rel="noopener">https://dokku.com/</a></li><li>openstack，开源IaaS，机器最好有10G以上的内存</li><li>rancher, openshift, CloudFoundry, flynn</li><li><a href="https://www.rainbond.com/" target="_blank" rel="noopener">https://www.rainbond.com/</a> 国产的</li><li><a href="https://letscoded.com/" target="_blank" rel="noopener">https://letscoded.com</a></li><li><a href="https://www.koding.com/" target="_blank" rel="noopener">https://www.koding.com/</a></li><li><a href="https://kodcloud.com/" target="_blank" rel="noopener">https://kodcloud.com/</a> 有使用者表示“每次访问都会采集服务端和客户端的隐私信息，里面流氓脚本一大堆”</li><li><a href="https://github.com/caprover/caprover" target="_blank" rel="noopener">https://github.com/caprover/caprover</a></li><li><a href="https://convox.com/" target="_blank" rel="noopener">https://convox.com/</a></li><li><a href="https://nanobox.io/" target="_blank" rel="noopener">https://nanobox.io/</a></li><li><a href="https://caprover.com/" target="_blank" rel="noopener">https://caprover.com/</a></li><li><a href="https://rio.io/" target="_blank" rel="noopener">https://rio.io/</a></li><li><a href="https://github.com/teamhephy/workflow" target="_blank" rel="noopener">https://github.com/teamhephy/workflow</a></li><li><a href="https://www.kintohub.com/" target="_blank" rel="noopener">https://www.kintohub.com/</a> 基于k8s</li></ul><h1 id="NAT-traversal-amp-amp-DDNS"><a href="#NAT-traversal-amp-amp-DDNS" class="headerlink" title="NAT traversal &amp;&amp; DDNS"></a>NAT traversal &amp;&amp; DDNS</h1><p>DDNS需要公网IP，基本上就是隔一段时间访问一下接口，连接和传输数据是不会消耗服务商的流量的。 内网穿透需要消耗服务器的流量。 还有点对点/内网打洞的技术，但是需要两边都安装软件：xtcp，n2n，moon，zerotier one</p><h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><ul><li><a href="https://www.natfrp.org/" target="_blank" rel="noopener">https://www.natfrp.org/</a> Sakura Frp</li><li><a href="https://www.lu8.win/" target="_blank" rel="noopener">https://www.lu8.win/</a> ngrok、frp、n2n、nps、免费域名</li><li><a href="https://mefrp.cn/" target="_blank" rel="noopener">https://mefrp.cn/</a> 之前是 <a href="https://frp.msrx.online/" target="_blank" rel="noopener">https://frp.msrx.online/</a></li><li><a href="https://liulifrp.cn/" target="_blank" rel="noopener">https://liulifrp.cn</a></li></ul><h2 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h2><p>1.x开源但现在已经停止维护了；2.x不开源。</p><ul><li><a href="https://ngrok.com/" target="_blank" rel="noopener">https://ngrok.com/</a> 官网，服务器在国外</li><li><a href="https://natapp.cn/" target="_blank" rel="noopener">https://natapp.cn/</a> 免费的需实名认证</li><li><a href="https://www.ngrok.cc/" target="_blank" rel="noopener">https://www.ngrok.cc/</a> Sunny Ngrok，不过官网说也支持frp</li><li><a href="https://www.tunnelnat.com/" target="_blank" rel="noopener">https://www.tunnelnat.com/</a> 虽然也写了frp，但好像只有ngrok有免费通道</li></ul><h2 id="其它开源的"><a href="#其它开源的" class="headerlink" title="其它开源的"></a>其它开源的</h2><ul><li><a href="https://github.com/ffay/lanproxy" target="_blank" rel="noopener">https://github.com/ffay/lanproxy</a> Java</li><li><a href="http://wdom.net/" target="_blank" rel="noopener">http://wdom.net/</a> 免费20分钟</li><li><a href="https://github.com/inlets/inlets" target="_blank" rel="noopener">https://github.com/inlets/inlets</a></li></ul><h2 id="其它不开源的"><a href="#其它不开源的" class="headerlink" title="其它不开源的"></a>其它不开源的</h2><ul><li><a href="https://hsk.oray.com/" target="_blank" rel="noopener">https://hsk.oray.com/</a> 花生壳，注册需要手机号；DDNS和内网穿透都支持？后者免费速度1M。</li><li><a href="https://www.kingdriod.cn/" target="_blank" rel="noopener">https://www.kingdriod.cn/</a> 神卓，免费速度1M；需要实名认证上传身份证</li><li><a href="http://www.luyouxia.com/" target="_blank" rel="noopener">http://www.luyouxia.com/</a> 路由侠</li><li><a href="https://www.notr.tech/" target="_blank" rel="noopener">https://www.notr.tech/</a> 免费3小时</li><li><a href="https://www.nsloop.com/" target="_blank" rel="noopener">https://www.nsloop.com/</a> 量子互联，写的不限流量</li><li><a href="http://www.mofasuidao.cn/" target="_blank" rel="noopener">http://www.mofasuidao.cn/</a> 魔法隧道，写的是“免费创建账户”</li><li><a href="http://www.youtusoft.com/" target="_blank" rel="noopener">http://www.youtusoft.com/</a> 网络通</li><li><a href="https://xiaomy.net/" target="_blank" rel="noopener">https://xiaomy.net/</a> 网云穿</li><li><a href="https://localhost.run/" target="_blank" rel="noopener">https://localhost.run/</a> 无需注册？</li></ul><h2 id="免费DDNS"><a href="#免费DDNS" class="headerlink" title="免费DDNS"></a>免费DDNS</h2><ul><li><a href="https://dyndnss.net/eng/" target="_blank" rel="noopener">https://dyndnss.net/eng/</a></li><li><a href="https://freedns.afraid.org/" target="_blank" rel="noopener">https://freedns.afraid.org/</a></li><li><a href="https://www.duckdns.org/" target="_blank" rel="noopener">https://www.duckdns.org/</a></li><li><a href="https://www.noip.com/" target="_blank" rel="noopener">https://www.noip.com/</a></li><li><a href="https://www.spdyn.de/" target="_blank" rel="noopener">https://www.spdyn.de/</a> 只有德语？</li><li><a href="https://dynv6.com/" target="_blank" rel="noopener">https://dynv6.com/</a></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/ripienaar/free-for-dev" target="_blank" rel="noopener">https://github.com/ripienaar/free-for-dev</a></p><p><a href="https://gist.github.com/imba-tjd/d73258f0817255dbe77d64d40d985e76" target="_blank" rel="noopener">https://gist.github.com/imba-tjd/d73258f0817255dbe77d64d40d985e76</a></p><p><a href="https://free-for.dev/#/" target="_blank" rel="noopener">https://free-for.dev/#/</a></p>]]></content>
    
    <summary type="html">
    
      对于开发者免费的资源，目前是记录，后面会陆续更新自己体验
    
    </summary>
    
    
      <category term="工具" scheme="https://hellolinux.xyz/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://hellolinux.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>轻量笔记软件simplenote</title>
    <link href="https://hellolinux.xyz/posts/cbed84aa.html"/>
    <id>https://hellolinux.xyz/posts/cbed84aa.html</id>
    <published>2022-06-24T14:37:14.000Z</published>
    <updated>2022-06-24T14:37:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目前存在的一些笔记软件"><a href="#目前存在的一些笔记软件" class="headerlink" title="目前存在的一些笔记软件"></a>目前存在的一些笔记软件</h1><ul><li><p>windows的sticky notes，不支持Apple同步</p></li><li><p>Evernote、Notion、onenote都属于重量型的，如果要用也可以的。</p></li><li><p>drafts是Apple上比较好用的轻量级软件，但是不支持其他平台。</p></li><li><p>Google Keep，还可以，适当可以用</p></li><li><p>Standard Notes是一个安全，加密和开放源代码的笔记应用程序。如果您追求的是注重隐私的Evernote替代产品，那么此软件非常理想。该应用程序不仅在所有台式机和移动平台上都可用，甚至还有网络版。</p><p>Standard Notes使用免费增值模式；该应用程序可免费使用，但扩展版需要解锁其他功能。免费版随附所有应用程序的加密功能，同步服务和离线访问。</p></li></ul><h1 id="Simplenote"><a href="#Simplenote" class="headerlink" title="Simplenote"></a>Simplenote</h1><p><a href="https://simplenote.com/" target="_blank" rel="noopener">Simplenote</a> 是一个简单、轻量级的开源跨平台云笔记工具，可以保存笔记、列表，支持 Markdown，拥有多人协作、历史版本、标签、公开分享等功能，开发者是 WordPress 母公司 Automattic。</p><p>Simplenote 属于那种超简单功能的云笔记，不支持保存图片、不支持保存图片、不支持保存图片，但支持以 Markdown 的方式引用图片。所以服务器端的压力就会小很多，成本低，才会更好的免费下去。</p><ul><li>尺寸小巧</li><li>全平台支持（Win/macOS/Linux、iOS/Android）</li><li>Markdown 支持与预览</li><li>置顶笔记</li><li>多人实时协作</li><li>回收站</li><li>搜索</li><li>标签支持（无分类）</li><li>全屏注意力模式（桌面端）</li><li>夜晚模式</li><li>字体大小调节</li><li>PIN 锁（移动端）</li><li>链接分享</li></ul><p>只需要在 tag 里添加对方邮箱就可实现多人协作。对方就会在 Simplenote 中查看到笔记，并且双方的修改会实时可见，另外还会通过邮件收到这条笔记的预览。目前公开链接分享功能大陆地区无法访问，其他正常。</p><blockquote><p>其实理论上simplnote、锤子便签和Standard Notes差不了太多，选择合适的就好。</p><p>注意：如果是非常私密的内容，都需要注意一下，可以考虑Standard Notes。</p></blockquote>]]></content>
    
    <summary type="html">
    
      一个简单、轻量级的开源跨平台云笔记工具，可以保存笔记、列表，支持 Markdown，拥有多人协作、历史版本、标签、公开分享等功能，开发者是 WordPress 母公司 Automattic
    
    </summary>
    
    
      <category term="效率" scheme="https://hellolinux.xyz/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="工具" scheme="https://hellolinux.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="效率" scheme="https://hellolinux.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>从零开始创作</title>
    <link href="https://hellolinux.xyz/posts/2aa161a4.html"/>
    <id>https://hellolinux.xyz/posts/2aa161a4.html</id>
    <published>2022-06-23T15:32:30.000Z</published>
    <updated>2022-06-23T15:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吸收听众"><a href="#吸收听众" class="headerlink" title="吸收听众"></a>吸收听众</h1><p>如果你还没有听众，不要写 newsletter 写微博，写推特，先积累听众 去 v2ex 发个帖子都有几百个人看 你去哪找几百个人订阅你的 newsletter 呢？</p><p>为什么我觉得在中国大陆写 newsletter 或创造相关产品不是个好主意</p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/newsletter%E6%B2%A1%E5%B8%82%E5%9C%BA.png" alt=""> </p><p>想创作内容，建立听众的话，什么形式和平台性价比最高呢？</p><p>​                   难度      天花板 </p><p>Twitter         低            低 </p><p>Weibo          低          较高 </p><p>blog             低           低 </p><p>podcast       中            低 </p><p>newsletter    低         极低 </p><p>长视频         高           高 </p><p>短视频         较高       极高 </p><p>中文创作性价比之王 - 短视频</p><p>微信公众号              低      较高 </p><p>Telegram 频道         低        低 </p><p>如果只能制作一种内容，毫不犹豫的选择短视频 </p><p>如果可以制作多种内容，微博和长视频可以作为补充 其他的，性价比都不高</p><h1 id="知识共享变现"><a href="#知识共享变现" class="headerlink" title="知识共享变现"></a>知识共享变现</h1><p>内容可以是 </p><ul><li>fo 的 Twitter </li><li>订阅的 newsletter </li><li>Instapaper  pocket文章</li><li>读的书 -、订阅的播客、YouTube 频道 、RSS博客或信息</li><li>其他如 Telegram，Reddit，论坛，Slack 等等</li></ul><p>不断更新，所以是订阅服务，按年度或季度计费，邮件方式</p><h1 id="独立开发者"><a href="#独立开发者" class="headerlink" title="独立开发者"></a>独立开发者</h1><p>需要先开始练习，练习那些成为独立开发者以后所必须的技能，包括并不限于： </p><ol start="0"><li><p>写产品设计方案/设计产品 </p></li><li><p>写代码/创造产品 </p></li><li><p>写文章/宣传产品 </p></li><li><p>联系那些可能为你的产品做宣传的人 </p></li><li><p>其他你认为可能对于你做独立开发有帮助的事情</p></li></ol><p><a href="https://twitter.com/xiqingongzi/status/1406405535415496705" target="_blank" rel="noopener">link</a> <a href="https://happyxiao.com" target="_blank" rel="noopener">https://happyxiao.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;吸收听众&quot;&gt;&lt;a href=&quot;#吸收听众&quot; class=&quot;headerlink&quot; title=&quot;吸收听众&quot;&gt;&lt;/a&gt;吸收听众&lt;/h1&gt;&lt;p&gt;如果你还没有听众，不要写 newsletter 写微博，写推特，先积累听众 去 v2ex 发个帖子都有几百个人看 你去哪找几百个人订阅你的 newsletter 呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://hellolinux.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="创作" scheme="https://hellolinux.xyz/categories/%E6%8A%80%E6%9C%AF/%E5%88%9B%E4%BD%9C/"/>
    
    
      <category term="技术" scheme="https://hellolinux.xyz/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="创作" scheme="https://hellolinux.xyz/tags/%E5%88%9B%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>未来可被A.I.替代和不可被替代的工作</title>
    <link href="https://hellolinux.xyz/posts/e459a288.html"/>
    <id>https://hellolinux.xyz/posts/e459a288.html</id>
    <published>2022-06-23T12:27:07.000Z</published>
    <updated>2022-06-23T12:27:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理以前看到的文章-现在也适用</p><p>参考：<a href="http://www.techwalker.com/2020/0305/3124989.shtml" target="_blank" rel="noopener">未来10年可能被自动化的14种工作</a> </p><p>文章提到的一些，以下是自己的个人看法：</p><ul><li>提醒通知报告、翻译、接待、初级销售和客服（机器人）——较容易被替代</li><li>医疗——应该指一些标准化、量化过的东西，而不是所有</li><li>应用开发——这里应该是指哪些用户端的产品，app等，但是其实底层很多的东西机器没法做</li><li>写作——这里我个人看法主要还是指那些资讯内，特别是每日这种快餐式的新闻写作</li><li>不会取代的：程序开发的创造性和复杂、底层的；人性话的医疗、心理医生、创造性写作和实事评论；设计类（但是也不全部，基础的也会被替代）；高级销售难以被取代，这就有些像情感心理医生的作用；多数跟人情感有关联的职位都难以取代。</li></ul><p>被替代的多数是规律性、重复性、创造力不强的行业。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理以前看到的文章-现在也适用&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://www.techwalker.com/2020/0305/3124989.shtml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;未来10年可能被自动化的14种工作&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="科技" scheme="https://hellolinux.xyz/categories/%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="科技" scheme="https://hellolinux.xyz/tags/%E7%A7%91%E6%8A%80/"/>
    
      <category term="AI" scheme="https://hellolinux.xyz/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>免费图片使用</title>
    <link href="https://hellolinux.xyz/posts/a7d8e121.html"/>
    <id>https://hellolinux.xyz/posts/a7d8e121.html</id>
    <published>2022-06-23T12:26:34.000Z</published>
    <updated>2022-06-23T12:26:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unsplash"><a href="#Unsplash" class="headerlink" title="Unsplash"></a>Unsplash</h1><p><a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com</a></p><ul><li>大量的精美商业类图片</li><li>便捷的导航和查找，丰富的各种品类图片</li><li>可免费商用</li></ul><h1 id="Pexels"><a href="#Pexels" class="headerlink" title="Pexels"></a>Pexels</h1><p><a href="http://www.pexels.com/" target="_blank" rel="noopener">http://www.pexels.com/</a></p><ul><li>每月上传3000多张摄影图片，累计已经有40000张图片</li><li>绝对大量的精美图片，从山川到音乐，你总会找到想要的</li><li>寻找自然、抽象、技术？Pexels适合个人和商用，外网</li></ul><h1 id="Pixabay"><a href="#Pixabay" class="headerlink" title="Pixabay"></a>Pixabay</h1><p><a href="https://pixabay.com/" target="_blank" rel="noopener">https://pixabay.com/</a></p><ul><li>超过100多万张的照片</li><li>照片，插画，矢量图，视频都可用</li><li>免费可商用</li></ul><h1 id="Burst-by-Shopify"><a href="#Burst-by-Shopify" class="headerlink" title="Burst by Shopify"></a>Burst by Shopify</h1><p><a href="https://burst.shopify.com/" target="_blank" rel="noopener">https://burst.shopify.com</a></p><ul><li>大量的精美商业图片</li><li>方便的导航和搜索</li><li>免费可商用，需要外网</li></ul><h1 id="NASA"><a href="#NASA" class="headerlink" title="NASA"></a>NASA</h1><p><a href="https://images.nasa.gov/" target="_blank" rel="noopener">https://images.nasa.gov/</a></p><ul><li>大量的宇宙太空照片</li><li>个人或教学使用来说并不受版权限制，可自由使用于非营利的各种目的</li></ul><h1 id="Gratisography"><a href="#Gratisography" class="headerlink" title="Gratisography"></a>Gratisography</h1><p><a href="http://www.gratisography.com/" target="_blank" rel="noopener">http://www.gratisography.com/</a></p><ul><li>每周更新高清晰度照片</li><li>幽默高对比度摄影图片，帮助你脱颖而出</li><li>可免费商用</li></ul><h1 id="Superfamous"><a href="#Superfamous" class="headerlink" title="Superfamous"></a>Superfamous</h1><p><a href="http://images.superfamous.com/" target="_blank" rel="noopener">http://images.superfamous.com/</a></p><ul><li>自然抽象类图片</li><li>完全免费，个人私有，目前无法访问</li></ul><h1 id="Life-of-Pix"><a href="#Life-of-Pix" class="headerlink" title="Life of Pix"></a>Life of Pix</h1><p><a href="http://www.lifeofpix.com/" target="_blank" rel="noopener">http://www.lifeofpix.com/</a></p><ul><li>生活类高清晰度摄影图片</li><li>超过1千多张，包括食物、人文、艺术、纹理等</li><li>每周增加10张新的摄影图片</li><li>可免费商用，部分图片有限制</li></ul><h1 id="Startup-Stock"><a href="#Startup-Stock" class="headerlink" title="Startup Stock"></a>Startup Stock</h1><p><a href="http://startupstockphotos.com/" target="_blank" rel="noopener">http://startupstockphotos.com/</a></p><ul><li>漂亮，高质量的关于Blogger、设计师、开发者</li><li>完美适合技术类网站。大量的电脑、桌面、办公类图片</li><li>100%可免费商用</li></ul><h1 id="focastock"><a href="#focastock" class="headerlink" title="focastock"></a>focastock</h1><p><a href="https://focastock.com/" target="_blank" rel="noopener">https://focastock.com/</a></p><ul><li>每周都会更新高质量图片</li><li>自然类恢宏大气图片为主</li><li>清晰的导航，可以按品类，标签，颜色等排序</li></ul><h2 id="Magdeleine"><a href="#Magdeleine" class="headerlink" title="Magdeleine"></a>Magdeleine</h2><p><a href="http://magdeleine.co/" target="_blank" rel="noopener">http://magdeleine.co/</a></p><ul><li>可以按颜色、类别、标签搜索</li><li>漂亮，高对比度图片，可免费商用</li></ul><h1 id="Jay-Mantri"><a href="#Jay-Mantri" class="headerlink" title="Jay Mantri"></a>Jay Mantri</h1><p><a href="http://jaymantri.com/" target="_blank" rel="noopener">http://jaymantri.com/</a></p><ul><li>漂亮的风景画，海洋，城市图片</li><li>免费可商用</li></ul><h1 id="Stock-Snap"><a href="#Stock-Snap" class="headerlink" title="Stock Snap"></a>Stock Snap</h1><p><a href="https://stocksnap.io/" target="_blank" rel="noopener">https://stocksnap.io/</a></p><ul><li>每周更新数百张高质量摄影图片</li><li>类似图片的推荐</li><li>强大的搜索工具</li><li>可按日期，流行，查看数，下载，喜欢等查询</li><li>商业免费可用</li></ul><h1 id="Picography"><a href="#Picography" class="headerlink" title="Picography"></a>Picography</h1><p><a href="http://picography.co/" target="_blank" rel="noopener">http://picography.co/</a></p><ul><li>绚丽的，高质量免费照片</li><li>数百张可免费商用的生活照片</li><li>城市，文化，医院，人，街道等等类型</li></ul><h1 id="ISO-Republic"><a href="#ISO-Republic" class="headerlink" title="ISO Republic"></a>ISO Republic</h1><p><a href="http://isorepublic.com/" target="_blank" rel="noopener">http://isorepublic.com/</a></p><ul><li>有创造性的一些图片</li><li>超过3000多张图片</li><li>可免费商用</li></ul><h1 id="StokPic"><a href="#StokPic" class="headerlink" title="StokPic"></a>StokPic</h1><p><a href="http://stokpic.com/" target="_blank" rel="noopener">http://stokpic.com/</a></p><ul><li>每2周会发送10张新的图片到你的邮箱</li><li>生活类照片有数百张免费</li><li>100%可免费商用</li></ul><h1 id="FoodiesFeed"><a href="#FoodiesFeed" class="headerlink" title="FoodiesFeed"></a>FoodiesFeed</h1><p><a href="http://foodiesfeed.com/" target="_blank" rel="noopener">http://foodiesfeed.com/</a></p><ul><li>高质量事物相关的照片</li><li>免费可商用</li></ul><h1 id="Bucketlistly"><a href="#Bucketlistly" class="headerlink" title="Bucketlistly"></a>Bucketlistly</h1><p><a href="http://photos.bucketlistly.com/" target="_blank" rel="noopener">http://photos.bucketlistly.com/</a></p><ul><li>超过5千多张的旅行照片。来自俄罗斯，相关，巴西，秘鲁，发过还有其它国家</li><li>适合旅游相关的网站</li><li>高质量图片，个人免费</li></ul><h1 id="Cupcake"><a href="#Cupcake" class="headerlink" title="Cupcake"></a>Cupcake</h1><p><a href="http://cupcake.nilssonlee.se/" target="_blank" rel="noopener">http://cupcake.nilssonlee.se/</a></p><ul><li>让人惊叹的风景图片，自然风格摄影图片</li><li>可免费商用</li></ul><h1 id="SplitShire"><a href="#SplitShire" class="headerlink" title="SplitShire"></a>SplitShire</h1><p><a href="http://splitshire.com/" target="_blank" rel="noopener">http://splitshire.com/</a></p><ul><li>超过900多张的高质量，高分辨率图片</li><li>免费的视频也有</li><li>抽象类和肖像类图片非常吸引人</li><li>免费可商用</li></ul><p>原文：<a href="http://liujinkai.com/2019/07/25/free-image-website" target="_blank" rel="noopener">你要的20个免费精美图片站都在这里了</a> ，但是里面目前有一个链接无法使用，还有几个需要外网。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unsplash&quot;&gt;&lt;a href=&quot;#Unsplash&quot; class=&quot;headerlink&quot; title=&quot;Unsplash&quot;&gt;&lt;/a&gt;Unsplash&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://unsplash.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://unsplash.com&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="效率" scheme="https://hellolinux.xyz/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="工具" scheme="https://hellolinux.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="效率" scheme="https://hellolinux.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>密码管理软件keepass</title>
    <link href="https://hellolinux.xyz/posts/3856fa65.html"/>
    <id>https://hellolinux.xyz/posts/3856fa65.html</id>
    <published>2022-06-22T13:44:11.000Z</published>
    <updated>2022-06-22T13:44:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="keepass及keepassXC"><a href="#keepass及keepassXC" class="headerlink" title="keepass及keepassXC"></a>keepass及keepassXC</h1><p>因为keepassC#开发，只支持Win版本，所有再开发的keepassx和keepassXC，目前用keepassXC和对应得chrome插件搭配使用。对于移动端，可以<a href="https://keepassxc.org/download/" target="_blank" rel="noopener">参考</a>下载使用。IOS上，KeePassium只支持icloud同步，fantasy目前来说，体验还可以，strongbox还好，主要使免费版本不支持faceID开启，KeePassium和strongbox的付费比fantasy贵很多。</p><p><a href="https://keepass.info/download.html" target="_blank" rel="noopener">https://keepass.info/download.html</a></p><p><a href="https://keepassxc.org/download/" target="_blank" rel="noopener">https://keepassxc.org/download/</a></p><h1 id="gpg文件验证"><a href="#gpg文件验证" class="headerlink" title="gpg文件验证"></a>gpg文件验证</h1><p>Linux下验证gpg文件</p><p><code>GnuPG</code>(GPG) 是 基于 <code>OpenPGP</code>(由 <a href="https://www.ietf.org/rfc/rfc4880.txt" target="_blank" rel="noopener">RFC4880</a> 定义，也被称为 <code>PGP</code>) 的一个完整的和免费的实现。我们可以使用 <code>GPG</code> 来对我们的数据和通信进行加密（encrypt）和签名（sign）, 它具有通用的密钥管理系统，以及各种公钥目录的访问模块。我们可以很容易地使用 <code>GPG</code> 提供的命令行工具 (当前它还提供不同平台下的图形界面工具 <em>frontends</em>, 以及库文件 <em>libraries</em>) 与其他的应用进行结合。同时还对 <code>S/MIME</code> 和 <code>SSH(Security Shell)</code> 提供支持.</p><p> Linux 命令行，掌握命令行，Window （<code>Gpg4win</code>）等<a href="https://www.gnupg.org/download/index.html" target="_blank" rel="noopener">其他客户端</a> </p><p>安装客户端后可测试，gpg –help。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">gpg</span> --<span class="comment">output</span> <span class="comment">doc</span><span class="string">.</span><span class="comment">sig</span> --<span class="comment">sign</span> <span class="comment">doc</span></span><br><span class="line"><span class="comment">gpg</span> --<span class="comment">output</span> <span class="comment">doc</span> --<span class="comment">decrypt</span> <span class="comment">doc</span><span class="string">.</span><span class="comment">sig</span></span><br></pre></td></tr></table></figure><h2 id="验证步骤"><a href="#验证步骤" class="headerlink" title="验证步骤"></a>验证步骤</h2><ul><li><p>下载文件：<a href="https://keepassxc.org/download/，KeePassXC-2.7.1-Win64.zip.sig，KeePassXC-2.7.1-Win64.zip，https://keepassxc.org/keepassxc_master_signing_key.asc，下载这三个文件，后面会用到。" target="_blank" rel="noopener">https://keepassxc.org/download/，KeePassXC-2.7.1-Win64.zip.sig，KeePassXC-2.7.1-Win64.zip，https://keepassxc.org/keepassxc_master_signing_key.asc，下载这三个文件，后面会用到。</a></p><p>帮助文件网址：<a href="https://keepassxc.org/verifying-signatures/" target="_blank" rel="noopener">https://keepassxc.org/verifying-signatures/</a></p></li><li><p>导入public key</p><p>官方提供的方式</p><ul><li><p>方法一：gpg –keyserver keys.openpgp.org –recv-keys CFB4C2166397D0D2</p></li><li><p>方法二：gpg –fetch-keys <a href="https://keepassxc.org/keepassxc_master_signing_key.asc" target="_blank" rel="noopener">https://keepassxc.org/keepassxc_master_signing_key.asc</a></p></li><li><p>方法三：下载文件 <a href="https://keepassxc.org/keepassxc_master_signing_key.asc，然后" target="_blank" rel="noopener">https://keepassxc.org/keepassxc_master_signing_key.asc，然后</a> gpg –import keepassxc_master_signing_key.asc</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gpg --<span class="keyword">import</span> keepassxc_master_signing_key.asc</span><br><span class="line"><span class="string">gpg:</span> key <span class="string">CFB4C2166397D0D2:</span> <span class="number">1</span> duplicate signature removed</span><br><span class="line"><span class="string">gpg:</span> key <span class="string">CFB4C2166397D0D2:</span> <span class="number">65</span> signatures not checked due to missing keys</span><br><span class="line"><span class="string">gpg:</span> <span class="regexp">/home/</span>xxx<span class="regexp">/.gnupg/</span>trustdb.<span class="string">gpg:</span> trustdb created</span><br><span class="line"><span class="string">gpg:</span> key <span class="string">CFB4C2166397D0D2:</span> <span class="keyword">public</span> key <span class="string">"KeePassXC Release &lt;release@keepassxc.org&gt;"</span> imported</span><br><span class="line"><span class="string">gpg:</span> Total number <span class="string">processed:</span> <span class="number">1</span></span><br><span class="line"><span class="string">gpg:</span>               <span class="string">imported:</span> <span class="number">1</span></span><br><span class="line"><span class="string">gpg:</span> no ultimately trusted keys found</span><br></pre></td></tr></table></figure></li></ul></li><li><p>然后查看一下：gpg –fingerprint CFB4C2166397D0D2，对比网址上的显示，是否一致</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Desktop gpg --fingerprint CFB4C2166397D0D2</span><br><span class="line">pub   rsa4096 <span class="number">2017</span><span class="number">-01</span><span class="number">-03</span> [SC]</span><br><span class="line">      BF5A <span class="number">669</span>F <span class="number">2272</span> CF43 <span class="number">24</span>C1  FDA8 CFB4 C216 <span class="number">6397</span> D0D2</span><br><span class="line">uid           [ unknown] KeePassXC Release &lt;<span class="symbol">release@</span>keepassxc.org&gt;</span><br><span class="line">sub   rsa2048 <span class="number">2017</span><span class="number">-01</span><span class="number">-03</span> [S] [expires: <span class="number">2024</span><span class="number">-12</span><span class="number">-04</span>]</span><br><span class="line">sub   rsa2048 <span class="number">2017</span><span class="number">-01</span><span class="number">-03</span> [S] [expires: <span class="number">2024</span><span class="number">-12</span><span class="number">-04</span>]</span><br></pre></td></tr></table></figure></li><li><p>然后开始验证：gpg –verify KeePassXC-2.7.1-Win64.zip.sig KeePassXC-2.7.1-Win64.zip</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~Desktop gpg <span class="comment">--verify KeePassXC-2.7.1-Win64.zip.sig KeePassXC-2.7.1-Win64.zip</span></span><br><span class="line">gpg: Signature made Wed Apr  <span class="number">6</span> <span class="number">11</span>:<span class="number">18</span>:<span class="number">04</span> <span class="number">2022</span> CST</span><br><span class="line">gpg:                <span class="keyword">using</span> RSA key C1E4CBA3AD78D3AFD894F9E0B7A66F03B59076A8</span><br><span class="line">gpg: Good signature <span class="keyword">from</span> "KeePassXC Release &lt;release@keepassxc.org&gt;" [<span class="type">unknown</span>]</span><br><span class="line">gpg: <span class="built_in">WARNING</span>: This key <span class="keyword">is</span> <span class="keyword">not</span> certified <span class="keyword">with</span> a <span class="keyword">trusted</span> signature!</span><br><span class="line">gpg:          There <span class="keyword">is</span> <span class="keyword">no</span> indication that the signature belongs <span class="keyword">to</span> the <span class="keyword">owner</span>.</span><br><span class="line"><span class="keyword">Primary key</span> fingerprint: BF5A <span class="number">669</span>F <span class="number">2272</span> CF43 <span class="number">24</span>C1  FDA8 CFB4 C216 <span class="number">6397</span> D0D2</span><br><span class="line">     Subkey fingerprint: C1E4 CBA3 AD78 D3AF D894  F9E0 B7A6 <span class="number">6</span>F03 B590 <span class="number">76</span>A8</span><br></pre></td></tr></table></figure><p>只要using RSA key和Subkey fingerprint一致就是正确的。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;keepass及keepassXC&quot;&gt;&lt;a href=&quot;#keepass及keepassXC&quot; class=&quot;headerlink&quot; title=&quot;keepass及keepassXC&quot;&gt;&lt;/a&gt;keepass及keepassXC&lt;/h1&gt;&lt;p&gt;因为keepassC#开发，只支持Win版本，所有再开发的keepassx和keepassXC，目前用keepassXC和对应得chrome插件搭配使用。对于移动端，可以&lt;a href=&quot;https://keepassxc.org/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考&lt;/a&gt;下载使用。IOS上，KeePassium只支持icloud同步，fantasy目前来说，体验还可以，strongbox还好，主要使免费版本不支持faceID开启，KeePassium和strongbox的付费比fantasy贵很多。&lt;/p&gt;
    
    </summary>
    
    
      <category term="效率" scheme="https://hellolinux.xyz/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="工具" scheme="https://hellolinux.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="效率" scheme="https://hellolinux.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>jitsi-meet安装使用</title>
    <link href="https://hellolinux.xyz/posts/b938b046.html"/>
    <id>https://hellolinux.xyz/posts/b938b046.html</id>
    <published>2022-06-21T08:18:54.000Z</published>
    <updated>2022-06-21T08:18:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>一个域名；</p><p>一个有公网的服务器或者云服务器；</p><p>拥有root或者sudo权限。</p><h1 id="安装实操"><a href="#安装实操" class="headerlink" title="安装实操"></a>安装实操</h1><h2 id="本次实例的环境"><a href="#本次实例的环境" class="headerlink" title="本次实例的环境"></a>本次实例的环境</h2><p>goddady的域名，AWS的免费服务器（Ubuntu20）</p><h2 id="安装操作"><a href="#安装操作" class="headerlink" title="安装操作"></a>安装操作</h2><p>安装AWS服务器，本次安装的操作系统是Ubuntu20，对于ssh怎么登陆自行解决。</p><p>把goddady的域名和ASW的公网IP绑定，公网IP就是ssh登陆的ip地址。</p><ul><li><p>系统环境准备</p></li><li><p>jitsi需要的环境准备</p></li><li><p>源准备</p></li><li><p>jitsi源下载准备</p></li><li><p>jitsi-meet安装</p></li></ul><p>这中间需要填写域名，比如godaddy注册的域名为meet.block.xyz，这里就填写这个。</p><p>另外一个需要选择的是https的证书，默认选择就可以，后面再重新生成，命令为</p><p>这里需要填写邮件，用来接收相关资讯，主要是这个证书免费，有过期时间提醒，需要手动续签。</p><ul><li>配置安全组</li><li>程序重启</li><li>jitsi-meet卸载</li></ul><p>这样就完全安装完成。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><strong>问题1：用公网的虚拟云服务器进行安装完成后，可能会出现chrome打开meet.block.xyz没有反应？</strong></p><p>原因：meet.block.xyz域名需要把主机的hostname和dnsdomainname修改为对于网址。如果贸然修改/etc/hostname可能会无效，因为对于多数的虚拟云主机是不支持修改hostname，需要修改/etc/cloud/cloud.cfg中的preserve_hostname: true</p><p>执行dnsdomainname和hostnamectl查看，sudo hostnamectl set-hostname meet.block.xyz设置</p><p>/etc/hosts中要有127.0.0.1 meet.block.xyz meet</p><p>其他：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo hostnamectl <span class="built_in">set</span>-hostname <span class="string">"Myfreax's laptop"</span> --pretty</span><br><span class="line">静态主机名存储在/etc/hostname中，pretty主机名存储在/etc/machine-info文件中。</span><br></pre></td></tr></table></figure><p><strong>问题2：可能在解决问题1之后可能还是无法访问meet.block.xyz？</strong></p><p>原因：因为多数的虚拟云主机是通过vhost配置的网络，主机会有两个网络，一个公网，一个私网，公网就是ssh登陆的网址，私网用ip a查看，局域网的那个ip就是的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/jitsi/videobridge/sip-communicator.properties</span><br></pre></td></tr></table></figure><p>最后新增两个参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.ice4j.ice.harvest.NAT_HARVEST_LOCAL_ADDRESS=云私网</span><br><span class="line">org.ice4j.ice.harvest.NAT_HARVEST_PUBLIC_ADDRESS=云公网</span><br></pre></td></tr></table></figure><h1 id="高级设置"><a href="#高级设置" class="headerlink" title="高级设置"></a>高级设置</h1><h2 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h2><p>启动Secure domain功能, 限制有账号的人才能开新会议室</p><p>编辑/etc/prosody/conf.avail/jitsi4james.ddns.net.cfg.lua，</p><p>将认证方式方式由anonymous改为internal_plan</p><p>并加入：（其他人可以加入）<br>VirtualHost “guest.jitsi4james.ddns.net”<br>authentication = “anonymous”<br>c2s_require_encryption = false</p><p>编辑/etc/jitsi/meet/jitsi4james.ddns.net-config.js，加入</p><p>anonymousdomain: ‘guest.jitsi4james.ddns.net’,</p><p>systemctl status</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="证书自动更新"><a href="#证书自动更新" class="headerlink" title="证书自动更新"></a>证书自动更新</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install certbot</span><br><span class="line">sudo /usr/share/jitsi-meet/scripts/install-letsencrypt-cert.sh</span><br><span class="line">生成的证书位置：/etc/letsencrypt/live/example.com/</span><br><span class="line">查看nginx配置文件（/etc/nginx/sites-enabled/example.com）内的证书路径是否正确，如果不对则手工修改为如下配置：</span><br><span class="line">ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class="line">ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class="line">从letsencrypt申请的证书默认有效期是90天，修改或新增脚本/etc/cron.weekly/letsencrypt-renew，以便自动更新申请新的证书，脚本内容如下：</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">/usr/<span class="built_in">local</span>/sbin/certbot-auto renew --webroot -w /usr/share/jitsi-meet &gt;&gt; /var/<span class="built_in">log</span>/le-renew.log</span><br><span class="line">可以通过如下命令能否执行成功测试证书更新功能是否生效：</span><br><span class="line">certbot-auto renew --dry-run --webroot -w /usr/share/jitsi-meet</span><br></pre></td></tr></table></figure><h2 id="文件位置"><a href="#文件位置" class="headerlink" title="文件位置"></a>文件位置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">文件：</span><br><span class="line">jicofo：/etc/jitsi/jicofo</span><br><span class="line">jitsi-videobridge: /etc/jitsi/videobridge</span><br><span class="line">jitsi-meet: /etc/jitsi/meet</span><br><span class="line">xmpp: /etc/prosody/</span><br><span class="line">日志：</span><br><span class="line">Jitsi-videobridge：/var/<span class="built_in">log</span>/jitsi/jvb.log</span><br><span class="line">Jicofo: /var/<span class="built_in">log</span>/jitsi/jicofo.log</span><br><span class="line">xmpp服务: /var/<span class="built_in">log</span>/prosody/prosody.err、/var/<span class="built_in">log</span>/prosody/prosody.log</span><br></pre></td></tr></table></figure><h2 id="安装noip-client"><a href="#安装noip-client" class="headerlink" title="安装noip client"></a>安装noip client</h2><p><a href="https://www.noip.com/" target="_blank" rel="noopener">https://www.noip.com/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">wget http://www.no-ip.com/client/linux/noip-duc-linux.tar.gz</span><br><span class="line">tar xzf noip-duc-linux.tar.gz</span><br><span class="line"><span class="built_in">cd</span> noip-2.1.9-1</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="配置noip自动启动"><a href="#配置noip自动启动" class="headerlink" title="配置noip自动启动"></a>配置noip自动启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 /usr/<span class="built_in">local</span>/etc/no-ip2.conf</span><br><span class="line">sudo nano /etc/init.d/noip</span><br><span class="line"><span class="comment">#######################################################</span></span><br><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Starting noip2"</span></span><br><span class="line">        /usr/<span class="built_in">local</span>/bin/noip2</span><br><span class="line">    ;;</span><br><span class="line">    stop)</span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Shutting down noip2"</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> `noip2 -S 2&gt;&amp;1 | grep Process | awk <span class="string">'&#123;print $2&#125;'</span> | tr -d <span class="string">','</span>`</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">          noip2 -K <span class="variable">$i</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"><span class="comment">#######################################################</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/noip stop</span><br><span class="line">sudo /etc/init.d/noip start</span><br><span class="line">sudo nano /etc/rc.local中加上</span><br><span class="line">/etc/init.d/noip start</span><br></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>电脑和手机app均可使用，对于性能要求，目前没有测试。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>1.<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fjitsi.github.io%2Fhandbook%2Fdocs%2Fdevops-guide%2Fdevops-guide-quickstart" target="_blank" rel="noopener">官方快速安装</a></p><p>2.<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.springfavor.cn%2F2018%2F10%2F22%2FJitsi%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%2F" target="_blank" rel="noopener">配置细节</a></p><p>3.<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.howtoforge.com%2Fhow-to-install-no-ip2-on-ubuntu-12.04-lts-in-order-to-host-servers-on-a-dynamic-ip-address" target="_blank" rel="noopener">配置noip自动启动</a></p><p>4.<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DYWr35VgYo14%26ab_channel%3DClubofWorkshop101" target="_blank" rel="noopener">YOUTUBE安装jitsi</a></p><p>5.<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.workshop101.club%2F2020%2F03%2Fhttpsgithub.html" target="_blank" rel="noopener">安装jitsi文章</a></p><p>6.<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DJlb0fh5T5ds%26ab_channel%3DWeCoin.io%E5%8C%BA%E5%9D%97%E9%93%BE%E6%AF%94%E7%89%B9%E5%B8%81" target="_blank" rel="noopener">youtue参考安装2</a><br>7.<a href="https://itsfoss.com/open-source-video-conferencing-tools" target="_blank" rel="noopener">Top 5 Open Source Video Conferencing Tools for Remote Working and Online Meetings</a></p><p>欢迎交流，<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fhellolinux.xyz" target="_blank" rel="noopener">https://hellolinux.xyz</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;p&gt;一个域名；&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://hellolinux.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="https://hellolinux.xyz/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="jitsi" scheme="https://hellolinux.xyz/tags/jitsi/"/>
    
  </entry>
  
  <entry>
    <title>程序员成长锦囊</title>
    <link href="https://hellolinux.xyz/posts/a31dce45.html"/>
    <id>https://hellolinux.xyz/posts/a31dce45.html</id>
    <published>2022-06-21T08:13:01.000Z</published>
    <updated>2022-06-21T08:13:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个人的成就只有15%与其自身专业技能相关，另外85%取决于他的软技能。</p><p>优秀程序员必备的软技能：</p><h1 id="1-要快速成长，一定要转变思维"><a href="#1-要快速成长，一定要转变思维" class="headerlink" title="1.要快速成长，一定要转变思维"></a>1.要快速成长，一定要转变思维</h1><p>从确定性思维转换为不确定性思维，很多事情没有标准答案，你要自己从问题中找到问题，从思考中得到思考，始终相信只要经过努力，不断学习、实践，就可以得到成长。职场老人要有空杯心态。</p><h1 id="2-积极主动"><a href="#2-积极主动" class="headerlink" title="2.积极主动"></a>2.积极主动</h1><p>积极主动的人成长就快，积极主动的人会对所做之事负责，争取更多机会，让自己承担更大责任。</p><h1 id="3-合作沟通"><a href="#3-合作沟通" class="headerlink" title="3.合作沟通"></a>3.合作沟通</h1><p>做的事情越大动用的资源越多，每个人都有盲点。</p><h1 id="4-勤奋和天赋"><a href="#4-勤奋和天赋" class="headerlink" title="4.勤奋和天赋"></a>4.勤奋和天赋</h1><h1 id="5-导师很重要"><a href="#5-导师很重要" class="headerlink" title="5.导师很重要"></a>5.导师很重要</h1><p>学习是有成本的，如果有机会找到一位好的导师，就可以把你的成长历程缩短。你需要不断提升自身能力，积累核心竞争力，当你具有一定的潜质，才会被导师看中。</p><h1 id="6-学习并实践"><a href="#6-学习并实践" class="headerlink" title="6.学习并实践"></a>6.学习并实践</h1><p>学习要做到价值驱动，做到闭环学习。理论配合实践，定期输出你的学习心得。</p><h1 id="7-客户价值和产出意识"><a href="#7-客户价值和产出意识" class="headerlink" title="7.客户价值和产出意识"></a>7.客户价值和产出意识</h1><p>与学校不同的是，在职场中你要独立谋生，找到客户、建立关系。但要多接触客户，建立客户价值意识和产出意识，有机会的话还可以去做一些商业实践。</p><h1 id="8-目标管理和时间管理"><a href="#8-目标管理和时间管理" class="headerlink" title="8.目标管理和时间管理"></a>8.目标管理和时间管理</h1><p>最重要的管理能力：focus。时间有限，所以需要做目标管理，明确自己的目标。制定计划，在执行过程中做好时间管理，并不断纠正你的目标方向。</p><h1 id="9-坚韧不拔和长线思维"><a href="#9-坚韧不拔和长线思维" class="headerlink" title="9.坚韧不拔和长线思维"></a>9.坚韧不拔和长线思维</h1><p>每天都在复利曲线的底部，每天积累，直到一天拐点来临。</p><h1 id="10-反脆弱和打破舒适区"><a href="#10-反脆弱和打破舒适区" class="headerlink" title="10.反脆弱和打破舒适区"></a>10.反脆弱和打破舒适区</h1><p>《反脆弱》，在人成长过程中一定要有压力。压力不是坏事，说明你在成长，在进步，要敢于反脆弱，走出舒适区。</p><h1 id="11-从优秀到卓越"><a href="#11-从优秀到卓越" class="headerlink" title="11.从优秀到卓越"></a>11.从优秀到卓越</h1><p>这个过程都需要想清楚三件事：你想做的、你擅长做的以及社会需要的。如果一个人把这三者结合起来，就完成了从优秀到卓越的跨越。</p><h1 id="他人建议"><a href="#他人建议" class="headerlink" title="他人建议"></a>他人建议</h1><ul><li><p>程序员修炼之道 The Pragmatic Programmer</p></li><li><p>代码整洁之道 Clean Code</p></li><li><p>程序员的职业素养 The Clean Code</p></li><li><p>领域驱动设计和实践 Domain-Driven Design</p></li><li><p>测试驱动的面向对象软件开发 Growing Object-Oriented Software, Guided by Tests</p></li><li><p>持续交付 Continuous Delivery</p></li><li><p>不要学习微服务框架，学习演进式架构（Evolutionary Architecture）。</p></li><li><p>不要学习新的编程语言，学习代码整洁之道、设计模式、领域驱动设计（DDD）。</p></li><li><p>不要学习 LeSS 和规模化敏捷框架（SAFe），学习精益生产原则（Lean manufacturing principles）。</p></li><li><p>不要学习 Hystrix，学习容错模式（Fault Tolerance Patterns）。</p></li><li><p>不要学习 Docker，学成持续交付。</p></li><li><p>不要学习 Angular、React 和 Vue，学习 Web、HTTP 和 REST</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个人的成就只有15%与其自身专业技能相关，另外85%取决于他的软技能。&lt;/p&gt;
&lt;p&gt;优秀程序员必备的软技能：&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://hellolinux.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="成长" scheme="https://hellolinux.xyz/categories/%E6%8A%80%E6%9C%AF/%E6%88%90%E9%95%BF/"/>
    
    
      <category term="效率" scheme="https://hellolinux.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="技术" scheme="https://hellolinux.xyz/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>真相与谎言</title>
    <link href="https://hellolinux.xyz/posts/96791234.html"/>
    <id>https://hellolinux.xyz/posts/96791234.html</id>
    <published>2022-06-21T08:05:55.000Z</published>
    <updated>2022-06-21T08:05:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>“如果尖锐的批评完全消失，温和的批评将会变得刺耳。如果温和的批评也不被允许，沉默将被认为居心叵测。如果沉默也不再允许，赞扬不够卖力将是一种罪行。如果只允许一种声音存在，那么，唯一存在的那个声音就是谎言。”——柏拉图</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“如果尖锐的批评完全消失，温和的批评将会变得刺耳。如果温和的批评也不被允许，沉默将被认为居心叵测。如果沉默也不再允许，赞扬不够卖力将是一种罪行。如果只允许一种声音存在，那么，唯一存在的那个声音就是谎言。”——柏拉图&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="社会学" scheme="https://hellolinux.xyz/categories/%E7%A4%BE%E4%BC%9A%E5%AD%A6/"/>
    
      <category term="哲学" scheme="https://hellolinux.xyz/categories/%E7%A4%BE%E4%BC%9A%E5%AD%A6/%E5%93%B2%E5%AD%A6/"/>
    
    
      <category term="随想" scheme="https://hellolinux.xyz/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>每日效率提升步骤</title>
    <link href="https://hellolinux.xyz/posts/32584f8d.html"/>
    <id>https://hellolinux.xyz/posts/32584f8d.html</id>
    <published>2022-06-21T02:53:10.000Z</published>
    <updated>2022-06-21T02:53:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="把“稍后不要读”变成-稍后读"><a href="#把“稍后不要读”变成-稍后读" class="headerlink" title="把“稍后不要读”变成 稍后读"></a>把“稍后不要读”变成 稍后读</h1><p>哪些文章不值得我们去读呢？是那些你曾经以为你需要读，但现在的你觉得没有必要读的文章。大部分时候，我想，它们是一些时效性比较强的文章，或者是你曾经感兴趣的话题。当你删除它们，只读剩下最让你感兴趣的文章，你节省了你过去的时间，以及你现在的时间。</p><h1 id="每日重复的提醒事项"><a href="#每日重复的提醒事项" class="headerlink" title="每日重复的提醒事项"></a>每日重复的提醒事项</h1><p>定一个目标：每日看完两篇“稍后读”文章</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>pocket、hypothesis、obsidain、netnewswire</p><p>Obsidian - 记笔记</p><p>Drafts - 速记 可用其他替代</p><p>Matter - 稍后读 标注 hypothesis（标注高亮分享）</p><p>Raindrop - 存网页 付费 pocket+rss</p><p>每日事件提醒 GTD或者其他</p><p>播客Pocket Casts</p><h1 id="dailyNote"><a href="#dailyNote" class="headerlink" title="dailyNote"></a>dailyNote</h1><p>daily notes，在醒着的时间里不停地写下我在干什么，想什么，读什么，别人说了什么</p><p>Obsidian 里面通过“QuickAdd”插件新建模板</p><p>碰到点子随时写入，不确定是否会写的点子，记录在 daily note 里打标签 idea/newsletter，番茄钟+开始写作  iA Writer或者其他 typora</p><h1 id="任务清单"><a href="#任务清单" class="headerlink" title="任务清单"></a>任务清单</h1><p>任务清单分成了三类：</p><ul><li>我必须做的事情</li><li>我想要做的事情</li><li>别人想要我做的事情</li></ul><p>经常不去做第三种<br>更重要的是，我们需要找到第二类</p><h1 id="OBT-One-Big-Thing效率"><a href="#OBT-One-Big-Thing效率" class="headerlink" title="OBT - One Big Thing效率"></a>OBT - One Big Thing效率</h1><p>一件大事（OBT - One Big Thing），是 Shaan 的效率体系，它很简单。</p><ul><li>有什么结果是你今天想要达到的？</li><li>它不是任务，是结果（可能包含很多任务）</li><li>你把所有的能量都用在上面</li><li>如果你每天都能这么做，你将超过其他人</li></ul><h1 id="英语欧路词典"><a href="#英语欧路词典" class="headerlink" title="英语欧路词典"></a>英语欧路词典</h1><p>手机和电脑上都安装了欧路词典</p><p>词典会把这个单词添加到我的“生词本”里。每隔一段时间，我会把生词本导入到 Anki 里面，每天背诵。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;把“稍后不要读”变成-稍后读&quot;&gt;&lt;a href=&quot;#把“稍后不要读”变成-稍后读&quot; class=&quot;headerlink&quot; title=&quot;把“稍后不要读”变成 稍后读&quot;&gt;&lt;/a&gt;把“稍后不要读”变成 稍后读&lt;/h1&gt;&lt;p&gt;哪些文章不值得我们去读呢？是那些你曾经以为你需要读，但现在的你觉得没有必要读的文章。大部分时候，我想，它们是一些时效性比较强的文章，或者是你曾经感兴趣的话题。当你删除它们，只读剩下最让你感兴趣的文章，你节省了你过去的时间，以及你现在的时间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="效率" scheme="https://hellolinux.xyz/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="工具" scheme="https://hellolinux.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="效率" scheme="https://hellolinux.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>unix环境高级编程note</title>
    <link href="https://hellolinux.xyz/posts/e39ad6a7.html"/>
    <id>https://hellolinux.xyz/posts/e39ad6a7.html</id>
    <published>2022-06-18T16:39:45.000Z</published>
    <updated>2022-06-18T16:39:45.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">进程</th><th align="center">线程</th><th align="center">进程间通信</th></tr></thead><tbody><tr><td align="center"><a href="#进程介绍">进程介绍</a></td><td align="center"><a href="#线程介绍">线程介绍</a></td><td align="center"><a href="#管道">管道</a> <a href="#FIFO有名管道">FIFO有名管道</a></td></tr><tr><td align="center"><a href="#守护进程">守护进程</a></td><td align="center"><a href="#线程同步">线程同步</a></td><td align="center"><a href="#XSI-IPC">XSI-IPC</a>  ：<a href="#消息队列">消息队列</a> <a href="#信号量">信号量</a> <a href="#共享存储">共享存储</a></td></tr><tr><td align="center"></td><td align="center"><a href="#线程控制">线程控制</a></td><td align="center"><a href="#POSIX信号量">POSIX信号量</a> <a href="#套接字">套接字</a></td></tr></tbody></table><ul><li><p><a href="#进程">进程</a> </p><ul><li><a href="#进程介绍">进程介绍</a></li><li><a href="#守护进程">守护进程</a></li></ul></li><li><p><a href="#线程">线程</a></p><ul><li><a href="#线程介绍">线程介绍</a><ul><li><a href="#pthread_create">pthread_create</a></li><li><a href="#pthread_exit">pthread_exit</a></li><li><a href="#pthread_join">pthread_join</a></li><li><a href="#pthread_cancel">pthread_cancel</a></li><li><a href="#线程清理">线程清理</a></li><li><a href="#pthread_detach">pthread_detach</a></li></ul></li><li><a href="#线程同步">线程同步</a><ul><li><a href="#互斥量mutex互斥锁">互斥量mutex互斥锁</a> </li><li><a href="#读写锁rwlock">读写锁rwlock</a></li><li><a href="#条件变量cond">条件变量cond</a></li><li><a href="#自旋锁spin">自旋锁spin</a></li><li><a href="#barrier">barrier</a></li></ul></li><li><a href="#线程控制">线程控制</a><ul><li><a href="#线程属性">线程属性</a></li><li><a href="#同步属性">同步属性</a><ul><li><a href="#互斥锁属性">互斥锁属性</a></li><li><a href="#读写锁属性">读写锁属性</a></li><li><a href="#条件变量属性">条件变量属性</a></li><li><a href="#barrier属性">barrier属性</a></li></ul></li><li><a href="#线程特定数据">线程特定数据</a></li><li><a href="#线程和信号">线程和信号</a></li><li><a href="#线程和fork">线程和fork</a></li></ul></li></ul></li><li><p><a href="#进程间通信IPC">进程间通信IPC</a></p><ul><li><a href="#管道">管道</a><ul><li><a href="#创建管道">创建管道</a></li><li><a href="#读写管道规则">读写管道规则</a></li><li><a href="#popen/pclose">popen/pclose</a></li></ul></li><li><a href="#FIFO有名管道">FIFO有名管道</a><ul><li><a href="#创建FIFO">创建FIFO</a></li><li><a href="#打开FIFO">打开FIFO</a></li><li><a href="#读写FIFO">读写FIFO</a></li></ul></li><li><a href="#XSI-IPC">XSI-IPC</a><ul><li><a href="#XSI-IPC介绍">XSI-IPC介绍</a> <ul><li><a href="#标识符和键">标识符和键</a></li><li><a href="#权限和结构">权限和结构</a></li><li><a href="#优缺点">优缺点</a></li></ul></li><li><a href="#消息队列">消息队列</a><ul><li><a href="#创建/打开消息队列">创建/打开消息队列</a></li><li><a href="#添加到队列">添加到队列</a></li><li><a href="#获取消息">获取消息</a></li><li><a href="#操作消息队列">操作消息队列</a></li></ul></li><li><a href="#信号量">信号量</a></li><li><a href="#共享存储">共享存储</a></li></ul></li><li><a href="#POSIX信号量">POSIX信号量</a><ul><li><a href="#创建/获取信号量">创建/获取信号量</a></li><li><a href="#关闭信号量">关闭信号量</a></li><li><a href="#销毁信号量">销毁信号量</a></li><li><a href="#信号量操作">信号量操作</a></li><li><a href="#未命名信号量">未命名信号量</a></li></ul></li><li><a href="#套接字">套接字</a> </li></ul></li></ul><p>在线markdown版本：<a href="https://github.com/cracker8090/personal_books/blob/master/linux_C/Unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8Bnote.md" target="_blank" rel="noopener">Unix环境高级编程note</a> </p><h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><ul><li>void * malloc(size_t n); 未初始化的，memset初始化</li><li>void free(void * p); 只是释放指针指向的内容 野指针，null</li><li>void *calloc(size_t n, size_t size); 初始化为0，适合为数组申请空间</li><li>void * realloc(void * p, size_t n); 将指针 p指向的内存块的大小改变为n字节，可能新地址</li></ul><h1 id="高级I-O"><a href="#高级I-O" class="headerlink" title="高级I/O"></a>高级I/O</h1><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="进程介绍"><a href="#进程介绍" class="headerlink" title="进程介绍"></a>进程介绍</h2><p>fork函数创建子进程，通常情况用来执行另一个程序的，如果是执行同一个进程那么多数采用线程。</p><p>vfork 和fork 之间的另一个区别是：vfork 保证子进程先运行，在她调用exec 或exit 之后父进程才可能被调度运行。如果在调用这两个函数之前子进程依赖于父进程的进一步动作，则会导致死锁。</p><p>当子进程退出时，系统不会立即删除该子进程的进程描述符，并将进程状态设置为Z（zombie），然后等待父进程处理子进程的退出。如果父进程不处理，那么子进程就会一直处于僵尸状态。</p><p>父进程处理子进程使用wait函数族。当使用wait函数处理完子进程的终止状态后，子进程才彻底的消失了，在次调用wait函数处理该子进程将会出错。</p><p>在使用wait函数时，一般等待三种进程的退出</p><ul><li>等待任意一子进程退出</li><li>等待具体的某个子进程退出</li><li>等待某个进程组的任意一子进程退出</li></ul><p>一般情况下wait函数的目的就是取出子进程的终止状态，但是通过设置一些选项，我们可以控制wait的一些行为，比如非阻塞式的，只查看是否有子进程退出，而不取出该子进程的终止状态等。</p><p>wait阻塞、waitpid不阻塞</p><p>popen、system函数（调用了fork、exec、waitpid，三种返回值）</p><p>system()来执行一个shell命令，popen()也是执行shell命令并且通过管道和shell命令进行通信。</p><p>system在执行期间调用进程会一直等待shell命令执行完成(waitpid等待子进程结束)才返回，但是popen无须等待shell命令执行完成就返回了。我们可以理解system为串行执行，在执行期间调用进程放弃了”控制权”，popen为并行执行。如果你没有在调用popen后调用pclose那么这个子进程就可能变成”僵尸”。</p><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><ul><li>一般在系统启动时装入，仅在系统关闭时终止。大多数守护进程以超级用户特权运行。</li><li>用户层守护进程的父进程是 init 进程。</li><li>所有的守护进程都没有控制终端，其终端名设置为问号。<ul><li>内核守护进程以无控制终端方式启动。</li><li>用户层守护进程可以通过调用 setsid 实现。</li></ul></li></ul><p>守护进程是没有控制终端的，无法将自己的消息输出到标准输出或标准错误上，需要一个集中的守护进程记录设施，即 syslog。</p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/deamon_syslog.png" alt=""> </p><p>主要有 3 中产生日志消息的方式：</p><p>1.内核例程调用 log 函数<br>2.大多数用户进程调用 syslog 函数<br>3.将日志消息发送到 UDP 的 514 端口</p><p>syslogd 守护进程接收这些日志消息，在其启动前会读取配置文件（/etc/syslog.conf），以决定各类消息的处理方式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;syslog.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">openlog</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *ident, <span class="keyword">int</span> option, <span class="keyword">int</span> facility)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">syslog</span><span class="params">(<span class="keyword">int</span> priority, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">closelog</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="comment">// Returns: previous log priority mask value</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setlogmask</span><span class="params">(<span class="keyword">int</span> maskpri)</span></span>;</span><br></pre></td></tr></table></figure><p>注：在没有调用 openlog 的情况下，先调用了 syslog，会自动调用 openlog。</p><p>ident 参数指向的字符串会被加到日志消息中去，因此一般指定为程序名称。</p><p>option 参数指定各种选项的位屏蔽</p><p>facility 参数可选值见图</p><p>priority 参数包含 facility 和 level 的组合，如果参数中没有指定 facility，则会使用 openlog 中指定的 facility，如果没有调用 openlog，那么会使用默认值 LOG_USER。</p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/openlog_option.png" alt=""> </p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/openlog_facility.png" alt=""> </p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/syslog_level.png" alt="">  </p><p>守护进程编程规则</p><p>1.调用 umask 函数将文件模式创建屏蔽字设置为指定值（通常为 0）。守护进程可能需要创建一些文件，如果使用继承的屏蔽字，可能文件的权限会不符合预期。</p><p>2.调用 fork 后，使父进程 exit。这样可以保证子进程不是进程组的组长进程。</p><p>3.调用 setsid 创建新会话。这可以保证当前进程没有控制终端，且成为新会话的首进程和新进程组的组长进程。</p><p>4.将当前工作目录改为根目录或某个指定位置。</p><p>5.关闭不再需要的文件描述符。可以使用 getrlimit 函数获取最高文件描述符值，并关闭直到该值的所有描述符。</p><p>6.某些守护进程将文件描述符 0、1 和 2 指向 /dev/null，这样任何需要输入输出的库例程都不会产生影响。</p><p>单实例守护进程</p><p>某些守护进程在同一时刻只能运行一个实例程序，这时候可以使用文件和记录锁（简称文件锁）来实现这个功能。</p><p>守护进程只要创建一个固定名字的文件（一般在 /var/run 目录中），并在该文件整体上加一把写锁，那么此后其他的守护进程如果想要给该文件加锁就会失败，也就不应该继续运行。在守护进程终止时，锁会被自动删除，简化了复原过程。</p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="线程介绍"><a href="#线程介绍" class="headerlink" title="线程介绍"></a>线程介绍</h2><p>线程包含了表示进程内执行环境的必须信息，其中包含进程中表示线程的线程ID，一组寄存器值，栈，调度优先级和策略。信号屏蔽字，errno值以及线程私有数据。</p><p><strong>进程的所有信息对该进程的所有线程都是共享的，包括可执行的程序文本，程序的全局内存和堆内存，栈以及文件描述符。</strong> </p><ul><li>线程标识</li></ul><p>就像每一个进程都有一个进程ID一样，每一个线程也有一个线程ID，进程ID在整个系统中是唯一的，但线程ID不同，线程ID只在它所属的进程环境中有效。线程ID用pthread_t数据类型来表示，（Linux使用无符号长整数表示pthread_t结构）。实现的时候可以用一个结构来代表pthread_t数据类型，所以可移植的系统不能把它当做整数来处理，因此必须使用函数来对两个线程ID进行比较。</p><p><strong>线程可以通过pthread_self函数获取自身的线程ID</strong> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_equal</span><span class="params">(<span class="keyword">pthread_t</span> tid1,<span class="keyword">pthread_t</span> tid2)</span></span>; <span class="comment">//返回0表示相等</span></span><br><span class="line"><span class="function"><span class="keyword">pthread_t</span> <span class="title">pthread_self</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//返回线程的线程ID</span></span></span><br></pre></td></tr></table></figure><h3 id="pthread-create"><a href="#pthread-create" class="headerlink" title="pthread_create"></a>pthread_create</h3><p>线程创建</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">pthread_t</span> <span class="title">pthread_create</span><span class="params">(<span class="keyword">pthread_t</span>  *tidp,<span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *attr,<span class="keyword">void</span> *(*start_rtn)(<span class="keyword">void</span>),<span class="keyword">void</span> * arg)</span><span class="comment">//若成功返回0，否则返回错误编号</span></span></span><br></pre></td></tr></table></figure><p>新创建的线程的线程 ID 被设置成 tidp 指向的内存单元；attr 参数定制线程的不同属性；start_rtn 函数是线程开始时执行的函数，其参数可以通过 arg 进行传递。</p><p>注意：新线程最好不要通过 tidp 指向的内存空间获取自己的线程 ID，因为如果新线程在主线程调用 pthread_create 返回前就运行了，那么它看到的就是未经初始化的内容，很可能并不是正确的线程 ID。可以使用 pthread_self 函数获取自己的线程 ID。</p><h3 id="pthread-exit"><a href="#pthread-exit" class="headerlink" title="pthread_exit"></a>pthread_exit</h3><ul><li>线程退出</li></ul><p>如果进程中某一个线程调用了exit，_exit或者_Exit，那么整个进程就会终止。类似的，如果信号的默认动作是终止进程，那么把该信号发送到某个线程，整个进程都会终止。</p><p>单个线程可以有三种方式退出：<br>1.直接从启动实例中返回，返回值是线程退出码</p><p>2.被同一进程的其他线程取消</p><p>3.调用 pthread_exit</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pthread_exit</span><span class="params">(<span class="keyword">void</span> *rval_ptr)</span></span></span><br></pre></td></tr></table></figure><h3 id="pthread-join"><a href="#pthread-join" class="headerlink" title="pthread_join"></a>pthread_join</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_join</span><span class="params">(<span class="keyword">pthread_t</span> thread,<span class="keyword">void</span> ** rval_ptr)</span> <span class="comment">//成功返回0，否则返回错误码</span></span></span><br></pre></td></tr></table></figure><p>rval_ptr是一个无类型指针，进程中的其他线程可以通过调用pthread_join函数访问到这个指针</p><p>调用 pthread_join 的线程会一直阻塞，直到指定的线程终止。如果指定的线程直接返回或者是调用 pthread_exit 终止，则可以通过 rval_ptr 查看其返回值；如果线程是被取消的，则 rval_ptr 被设置为 PTHRERAD_CANCELED。</p><p><strong>如果线程已经处于分离状态，那么，pthread_join调用就会失败。</strong></p><p><strong>pthread_create和pthread_exit函数的无类型指针参数能传递的数值不止一个，该指针可以传递更复杂信息的结构地址，但是注意这个结构所使用的内存，在调用者完成调用以后必须仍然是有效的，否则就会出现无效或者非法内存访问。例如在调用线程的栈上分配了该结构，那么其他线程在使用这个结构时内存可能就已经改变了。（可以使用全局栈结构malloc调用分配结构）。</strong> </p><h3 id="pthread-cancel"><a href="#pthread-cancel" class="headerlink" title="pthread_cancel"></a>pthread_cancel</h3><ul><li>取消线程</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Returns: 0 if OK, error number on failure</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cancel</span><span class="params">(<span class="keyword">pthread_t</span> tid)</span></span>;</span><br></pre></td></tr></table></figure><p><strong><em>线程可以安排退出时它调用的函数，这样的函数成为线程清理处理程序。处理程序记录在栈中，也会就是说他们的执行顺序与注册时相反。</em></strong> </p><h3 id="线程清理"><a href="#线程清理" class="headerlink" title="线程清理"></a>线程清理</h3><ul><li>线程清理处理程序</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pthread_cleanup_push</span><span class="params">(<span class="keyword">void</span> (*rtn)(<span class="keyword">void</span> *), <span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pthread_cleanup_pop</span><span class="params">(<span class="keyword">int</span> execute)</span></span>;</span><br></pre></td></tr></table></figure><p>清理函数 rtn 只有在以下情况会执行：</p><p>1.调用 pthread_exit<br>2.响应取消请求<br>3.用非零execute 参数调用 pthread_cleanup_pop（为 0 时，清理函数不会被调用）</p><p>两个函数需要成对使用。</p><h3 id="pthread-detach"><a href="#pthread-detach" class="headerlink" title="pthread_detach"></a>pthread_detach</h3><ul><li>线程分离</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Returns: 0 if OK, error number on failure</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_detach</span><span class="params">(<span class="keyword">pthread_t</span> tid)</span></span>;</span><br></pre></td></tr></table></figure><p>默认情况下，线程的终止状态会保留，直到调用 pthread_join。如果线程被分离，则资源会在线程终止后被立即收回。</p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><h3 id="互斥量mutex互斥锁"><a href="#互斥量mutex互斥锁" class="headerlink" title="互斥量mutex互斥锁"></a>互斥量mutex互斥锁</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_init</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex,<span class="keyword">const</span> <span class="keyword">pthread_mutexattr_t</span> *<span class="keyword">restrict</span> attr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_destroy</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_trylock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_unlock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br></pre></td></tr></table></figure><p>互斥变量为 pthread_mutex_t 类型，如果使用静态分配方式，可以直接使用 PTHREAD_MUTEX_INITIALIZER 进行初始化。对于动态分配的互斥量，在释放内存前需要调用 pthread_mutex_destroy。</p><ul><li>带有超时的互斥锁</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="comment">// Returns: 0 if OK, error number on failure</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_timedlock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex,<span class="keyword">const</span> struct timespec *<span class="keyword">restrict</span> tsptr)</span></span>;</span><br></pre></td></tr></table></figure><p>如果不希望线程在访问加锁的互斥量时无限等待，可以通过 pthread_mutex_timedlock 指定等待的绝对时间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> err;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">tout</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">tmp</span>;</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">64</span>];</span><br><span class="line">  <span class="keyword">pthread_mutex_t</span> lock = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加锁</span></span><br><span class="line">  pthread_mutex_lock(&amp;lock);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"mutex is locked.\n"</span>);</span><br><span class="line">  clock_gettime(CLOCK_REALTIME, &amp;tout);</span><br><span class="line">  tmp = localtime(&amp;tout.tv_sec);</span><br><span class="line">  strftime(buf, <span class="keyword">sizeof</span>(buf), <span class="string">"%r"</span>, tmp);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"current time is %s\n"</span>, buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置超时</span></span><br><span class="line">  tout.tv_sec += <span class="number">10</span>;</span><br><span class="line">  err = pthread_mutex_timedlock(&amp;lock, &amp;tout);</span><br><span class="line">  clock_gettime(CLOCK_REALTIME, &amp;tout);</span><br><span class="line">  tmp = localtime(&amp;tout.tv_sec);</span><br><span class="line">  strftime(buf, <span class="keyword">sizeof</span>(buf), <span class="string">"%r"</span>, tmp);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"the time is now %s\n"</span>, buf);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(err == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mutex locked.\n"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"can't lock mutex:%s\n"</span>,strerror(err));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读写锁rwlock"><a href="#读写锁rwlock" class="headerlink" title="读写锁rwlock"></a>读写锁rwlock</h3><p>读写锁有 3 中状态：不加锁、读模式加锁和写模式加锁。一次只有一个线程可以占有写模式的读写锁，但是多个线程可以同时占有读模式的读写锁。</p><p>读写锁适合对数据结构读的次数远大于写的情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_init</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *<span class="keyword">restrict</span> rwlock,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">const</span> <span class="keyword">pthread_rwlockattr_t</span> *<span class="keyword">restrict</span> attr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_destroy</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// All return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_rdlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>; <span class="comment">// 读模式锁定</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_wrlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>; <span class="comment">// 写模式锁定</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_unlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_tryrdlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_trywrlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有超时读写锁</span></span><br><span class="line"><span class="comment">// Both return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_timedrdlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *<span class="keyword">restrict</span> rwlock,<span class="keyword">const</span> struct timespec *<span class="keyword">restrict</span> tsptr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_timedwrlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *<span class="keyword">restrict</span> rwlock,<span class="keyword">const</span> struct timespec *<span class="keyword">restrict</span> tsptr)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="条件变量cond"><a href="#条件变量cond" class="headerlink" title="条件变量cond"></a>条件变量cond</h3><p>当线程等待的条件变量被满足后，该线程就会被唤醒。条件变量需要和互斥量配合使用，条件本身是由互斥量保护的。</p><p>在使用条件变量之前，必须对其进行初始化（有静态和动态 2 种方式）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_init</span><span class="params">(<span class="keyword">pthread_cond_t</span> *<span class="keyword">restrict</span> cond,<span class="keyword">const</span> <span class="keyword">pthread_condattr_t</span> *<span class="keyword">restrict</span> attr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_destroy</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cond)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_wait</span><span class="params">(<span class="keyword">pthread_cond_t</span> *<span class="keyword">restrict</span> cond,<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_timedwait</span><span class="params">(<span class="keyword">pthread_cond_t</span> *<span class="keyword">restrict</span> cond,<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> struct timespec *<span class="keyword">restrict</span> tsptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_signal</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cond)</span></span>;    <span class="comment">// 至少唤醒一个</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_broadcast</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cond)</span></span>; <span class="comment">// 全部唤醒</span></span><br></pre></td></tr></table></figure><p>pthread_cond_wait 操作主要执行如下操作步骤</p><blockquote><ol><li>解锁互斥量 mutex</li><li>阻塞调用线程，直至另一线程就条件变量 cond 发出信号</li><li>重新锁定 mutex</li></ol></blockquote><p>在使用 pthread_cond_wait 函数之前，应该已经取得 mutex 锁。对 pthread_cond_wait 的调用应该放在 while 循环中，因为从 wait 函数返回时，并不能确定条件已经得到满足（其他线程先醒来、虚假唤醒等），需要重新对条件进行判断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消费者进程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">process_msg</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;qlock);</span><br><span class="line">    <span class="keyword">while</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%s wait msg\n"</span>, tag);</span><br><span class="line">      pthread_cond_wait(&amp;qready, &amp;qlock);</span><br><span class="line">    &#125;</span><br><span class="line">    count--;</span><br><span class="line">    pthread_mutex_unlock(&amp;qlock);</span><br><span class="line">    <span class="comment">/* 处理消息 */</span></span><br><span class="line">    <span class="comment">// 放弃cpu，让另一个处理进场有机会得到数据</span></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生产者进程</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;qlock);</span><br><span class="line">    count += <span class="number">4</span>;</span><br><span class="line">    pthread_mutex_unlock(&amp;qlock);</span><br><span class="line">    <span class="comment">// 测试两种唤醒方式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line">    pthread_cond_broadcast(&amp;qready);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    pthread_cond_signal(&amp;qready);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// 保证两个消费者进程都可以有时间处理数据</span></span><br><span class="line">    sleep(<span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自旋锁spin"><a href="#自旋锁spin" class="headerlink" title="自旋锁spin"></a>自旋锁spin</h3><p>自旋锁与互斥量大体类似，主要的不同之处在于自旋锁在获取锁之前会一直忙等。因此，使用自旋锁应该保证持有锁的时间很短。</p><p>自旋锁和互斥量的接口类似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_init</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock, <span class="keyword">int</span> pshared)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_destroy</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_lock</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_trylock</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_unlock</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock)</span></span>;</span><br></pre></td></tr></table></figure><p>pshared 表示进程共享（process-shared）属性，表明自旋锁的获取方式。它仅在支持线程进程共享同步（Thread Process-Shared Synchronization）的平台上有效，当设置为 PTHREAD_PROCESS_SHARED，则只要线程可以访问锁底层内存，即使是不同进程的线程都可以获得锁；而设置为 PTHREAD_PROCESS_PRIVATE 后，只有初始化该锁的进程内部的线程可以访问它。</p><h3 id="barrier"><a href="#barrier" class="headerlink" title="barrier"></a>barrier</h3><p>屏障允许多个线程等待，直到所有合作线程满足某个点后，从该点继续执行。主线程可以将某个任务分解多个小任务交给不同的线程，等到所有线程工作完成后，主线程在此基础上继续执行。</p><p>使用 8 个线程分解 800 万个数的排序工作，每个线程对其中的 100 万个数排序，最后由主线程将这些结果进行合并。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Both return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_barrier_init</span><span class="params">(<span class="keyword">pthread_barrier_t</span> *<span class="keyword">restrict</span> barrier,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">const</span> <span class="keyword">pthread_barrierattr_t</span> *<span class="keyword">restrict</span> attr,<span class="keyword">unsigned</span> <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"><span class="comment">// 初始化函数中的 count 参数用于指定所有线程继续运行前，必须到达屏障的线程数。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_barrier_destroy</span><span class="params">(<span class="keyword">pthread_barrier_t</span> *barrier)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns: 0 or PTHREAD_BARRIER_SERIAL_THREAD if OK, error number on failure</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_barrier_wait</span><span class="params">(<span class="keyword">pthread_barrier_t</span> *barrier)</span></span>;</span><br></pre></td></tr></table></figure><p>wait 函数表明当前线程已完成工作，准备等待其他线程。当线程调用该函数后满足屏障计数，那么函数的返回值为 PTHREAD_BARRIER_SERIAL_THREAD，其余线程该函数返回值为 0。这一特点使得可以很容易的将一个线程作为主线程，它可以工作在其他所有线程已完成的工作结果上。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"apue.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_barrier_t</span> pb;</span><br><span class="line"><span class="keyword">pthread_t</span> t1, t2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">th1</span><span class="params">(<span class="keyword">void</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"start t1\n"</span>);</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 最后一个完成的线程，返回值应该为-1</span></span><br><span class="line">  <span class="keyword">int</span> r = pthread_barrier_wait(&amp;pb);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"th1  r:%d\n"</span>, r);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">th2</span><span class="params">(<span class="keyword">void</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"start t2\n"</span>);</span><br><span class="line">  <span class="keyword">int</span> r = pthread_barrier_wait(&amp;pb);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"th2  r:%d\n"</span>, r);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> r;</span><br><span class="line">  pthread_barrier_init(&amp;pb, <span class="literal">NULL</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  pthread_create(&amp;t1, <span class="literal">NULL</span>, th1, <span class="literal">NULL</span>);</span><br><span class="line">  pthread_create(&amp;t2, <span class="literal">NULL</span>, th2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  r = pthread_barrier_wait(&amp;pb);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"main r:%d\n"</span>, r);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 等待子进程结束</span></span><br><span class="line">  pthread_join(t1, <span class="literal">NULL</span>);</span><br><span class="line">  pthread_join(t2, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h2><p>线程属性和同步原语属性，基于进程的系统调用如何与线程进行交互。</p><p>管理这些属性的函数大概有以下几类：</p><p>1.初始化函数，负责给属性设置为默认值<br>2.销毁函数，负责释放初始化函数分配的资源<br>3.获取属性值的函数<br>4.设置属性值的函数</p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/thread_limit.png" alt=""></p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/thread_limit2.png" alt=""> </p><h3 id="线程属性"><a href="#线程属性" class="headerlink" title="线程属性"></a>线程属性</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Both return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// 初始化和销毁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_attr_init</span><span class="params">(<span class="keyword">pthread_attr_t</span> *attr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_attr_destroy</span><span class="params">(<span class="keyword">pthread_attr_t</span> *attr)</span></span>;</span><br><span class="line"><span class="comment">// destroy 函数除了释放资源外，还会用无效的值初始化属性对象，这样当线程创建函数误用该对象时，会返回错误信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Both return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// 分离状态属性</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_attr_getdetachstate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *<span class="keyword">restrict</span> attr,<span class="keyword">int</span> *detachstate)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_attr_setdetachstate</span><span class="params">(<span class="keyword">pthread_attr_t</span> *attr, <span class="keyword">int</span> detachstate)</span></span>;</span><br><span class="line"><span class="comment">// 该状态可以设置成 PTHREAD_CREATE_DETACHED 或 PTHREAD_CREATE_JOINABLE，分别表示以分离状态或正常方式启动线程。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Both return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// 线程栈的相关属性 stackaddr 参数指定的是栈的最低内存地址</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_attr_getstack</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *<span class="keyword">restrict</span> attr,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">void</span> **<span class="keyword">restrict</span> stackaddr,<span class="keyword">size_t</span> *<span class="keyword">restrict</span> stacksize)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_attr_setstack</span><span class="params">(<span class="keyword">pthread_attr_t</span> *attr,<span class="keyword">void</span> *stackaddr, <span class="keyword">size_t</span> stacksize)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Both return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// 如果不想手动设定栈地址，可以通过下面的函数来仅指定栈大小。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_attr_getstacksize</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *<span class="keyword">restrict</span> attr,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">size_t</span> *<span class="keyword">restrict</span> stacksize)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_attr_setstacksize</span><span class="params">(<span class="keyword">pthread_attr_t</span> *attr, <span class="keyword">size_t</span> stacksize)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Both return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// guardsize 控制线程栈末尾之后用以避免栈溢出的扩展内存的大小。当此值设置为 0 或者修改了线程属性 stackaddr 后，系统不会提供警戒缓冲区。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_attr_getguardsize</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *<span class="keyword">restrict</span> attr,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">size_t</span> *<span class="keyword">restrict</span> guardsize)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_attr_setguardsize</span><span class="params">(<span class="keyword">pthread_attr_t</span> *attr, <span class="keyword">size_t</span> guardsize)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="同步属性"><a href="#同步属性" class="headerlink" title="同步属性"></a>同步属性</h3><h4 id="互斥锁属性"><a href="#互斥锁属性" class="headerlink" title="互斥锁属性"></a>互斥锁属性</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Both return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// mutex属性</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutexattr_init</span><span class="params">(<span class="keyword">pthread_mutexattr_t</span> *attr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutexattr_destroy</span><span class="params">(<span class="keyword">pthread_mutexattr_t</span> *attr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Both return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// 进程共享属性（process-shared）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutexattr_getpshared</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_mutexattr_t</span> *</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">restrict</span> attr, <span class="keyword">int</span> *<span class="keyword">restrict</span> pshared)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutexattr_setpshared</span><span class="params">(<span class="keyword">pthread_mutexattr_t</span> *attr,<span class="keyword">int</span> pshared)</span></span>;</span><br><span class="line"><span class="comment">// 默认情况下，仅相同进程的线程可以访问同一个同步对象（PTHREAD_PROCESS_PRIVATE），但是在某些情况下，需要多个进程访问同一个同步对象，这时候可以将属性设置为 THREAD_PROCESS_SHARED</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// All return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// 健壮属性（robust）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutexattr_getrobust</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_mutexattr_t</span> *<span class="keyword">restrict</span> attr,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> *<span class="keyword">restrict</span> robust)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutexattr_setrobust</span><span class="params">(<span class="keyword">pthread_mutexattr_t</span> *attr, <span class="keyword">int</span> robust)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_consistent</span><span class="params">(<span class="keyword">pthread_mutex_t</span> * mutex)</span></span>;</span><br><span class="line"><span class="comment">// 当某个线程在终止时没有释放持有的锁，那么当其他线程尝试获取该锁时，会发生问题。如果使用默认的设置（PTHREAD_MUTEX_STALLED），则请求的线程会一直阻塞。可以通过设置为 PTHREAD_MUTEX_ROBUST 解决这个问题，此时 lock 函数的返回值为 EOWNERDEAD</span></span><br><span class="line"><span class="comment">// 如果线程加锁时发现返回值为 EOWNERDEAD，那么在解锁前需要调用 consistent 函数，声明互斥量的一致性（与该互斥量相关的状态在互斥量解锁之前是一致的）。如果没有调用 consistent 函数就解锁，那么互斥量将不再可用，其他线程调用 lock 函数会返回 ENOTRECOVERABLE。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Both return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// 类型属性（type） 控制互斥量的锁定特性</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutexattr_gettype</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_mutexattr_t</span> *<span class="keyword">restrict</span> attr,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">int</span> *<span class="keyword">restrict</span> type)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutexattr_settype</span><span class="params">(<span class="keyword">pthread_mutexattr_t</span> *attr, <span class="keyword">int</span> type)</span></span>;</span><br></pre></td></tr></table></figure><p>PTHREAD_MUTEX_NORMAL ：标准互斥量，不进行错误检查或死锁检测。<br>PTHREAD_MUTEX_ERRORCHECK ：提供错误检查<br>PTHREAD_MUTEX_RECURSIVE ：允许同一线程在解锁前多次加锁。<br>PTHREAD_MUTEX_DEFAULT ：提供默认的特性和行为，操作系统可以将其映射为其他类型。</p><p>Mutex type    Relock without unlock?    Unlock when not owned?    Unlock when unlocked?<br>PTHREAD_MUTEX_NORMAL    deadlock    undefined    undefined<br>PTHREAD_MUTEX_ERRORCHECK    returns error    returns error    returns error<br>PTHREAD_MUTEX_RECURSIVE    allowed    returns error    returns error<br>PTHREAD_MUTEX_DEFAULT    undefined    undefined    undefined</p><h4 id="读写锁属性"><a href="#读写锁属性" class="headerlink" title="读写锁属性"></a>读写锁属性</h4><p>读写锁非常适合于对数据结构读的次数远大于写的情况</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// 读写锁仅支持进程共享属性</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlockattr_init</span><span class="params">(<span class="keyword">pthread_rwlockattr_t</span> *attr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlockattr_destroy</span><span class="params">(<span class="keyword">pthread_rwlockattr_t</span> *attr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlockattr_getpshared</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_rwlockattr_t</span> *<span class="keyword">restrict</span> attr,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">int</span> *<span class="keyword">restrict</span> pshared)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlockattr_setpshared</span><span class="params">(<span class="keyword">pthread_rwlockattr_t</span> *attr,<span class="keyword">int</span> pshared)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="条件变量属性"><a href="#条件变量属性" class="headerlink" title="条件变量属性"></a>条件变量属性</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// 支持进程共享属性和时钟属性 时钟属性用于控制 pthread_cond_timedwait 函数使用哪个系统时钟</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_condattr_init</span><span class="params">(<span class="keyword">pthread_condattr_t</span> *attr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_condattr_destroy</span><span class="params">(<span class="keyword">pthread_condattr_t</span> *attr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_condattr_getpshared</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_condattr_t</span> *<span class="keyword">restrict</span> attr,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> *<span class="keyword">restrict</span> pshared)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_condattr_setpshared</span><span class="params">(<span class="keyword">pthread_condattr_t</span> *attr, <span class="keyword">int</span> pshared)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_condattr_getclock</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_condattr_t</span> *<span class="keyword">restrict</span> attr,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">clockid_t</span> *<span class="keyword">restrict</span> clock_id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_condattr_setclock</span><span class="params">(<span class="keyword">pthread_condattr_t</span> *attr,<span class="keyword">clockid_t</span> clock_id)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="barrier属性"><a href="#barrier属性" class="headerlink" title="barrier属性"></a>barrier属性</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// 只有进程共享属性</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_barrierattr_init</span><span class="params">(<span class="keyword">pthread_barrierattr_t</span> *attr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_barrierattr_destroy</span><span class="params">(<span class="keyword">pthread_barrierattr_t</span> *attr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_barrierattr_getpshared</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_barrierattr_t</span> *<span class="keyword">restrict</span> attr,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">int</span> *<span class="keyword">restrict</span> pshared)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_barrierattr_setpshared</span><span class="params">(<span class="keyword">pthread_barrierattr_t</span> *attr, <span class="keyword">int</span> pshared)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="线程特定数据"><a href="#线程特定数据" class="headerlink" title="线程特定数据"></a>线程特定数据</h3><p>线程模型促进了进程中数据和属性的共享，但是在部分场景下，我们又希望线程的部分数据可以是私有的。</p><p>一个进程中的所有线程都可以访问进程的整个地址空间，因此线程没有办法阻止另一个线程访问它的数据（除非使用寄存器），即使是接下来介绍的线程特定数据（thread-specific data）机制，也不能做到这一点。但是通过这种机制，可以提高线程间的独立性，使得线程不太容易访问到其他线程的线程特定数据。</p><p>每个线程通过 <strong>键（key）</strong> 来访问线程特定数据，键在进程中被所有线程使用，每个线程把自己的线程特定数据和键关联起来。这样，通过同一个键，每个线程可以管理与自己关联的数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Both return: 0 if OK, error number on failure</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_key_create</span><span class="params">(<span class="keyword">pthread_key_t</span> *keyp, <span class="keyword">void</span> (*destructor)(<span class="keyword">void</span> *))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_key_delete</span><span class="params">(<span class="keyword">pthread_key_t</span> key)</span></span>;</span><br></pre></td></tr></table></figure><p>创建新键时，每个线程的数据地址为空。同时，在创建的时候可以指定一个析构函数，当线程退出时，如果数据地址不为空，则会调用这个析构函数（参数是数据地址）。</p><p>所有的线程都可以调用删除函数来取消键与数据之间的关联，但是这不会触发析构函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Returns: thread-specific data value or NULL if no value has been associated with the key</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">pthread_getspecific</span><span class="params">(<span class="keyword">pthread_key_t</span> key)</span></span>;</span><br><span class="line"><span class="comment">// Returns: 0 if OK, error number on failure</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_setspecific</span><span class="params">(<span class="keyword">pthread_key_t</span> key, <span class="keyword">const</span> <span class="keyword">void</span> *value)</span></span>;</span><br><span class="line"><span class="comment">// 可以通过 get 函数的返回值来确定是否需要调用 set 函数。</span></span><br></pre></td></tr></table></figure><ul><li>取消选项</li></ul><p>有 2 个额外的线程属性并没有包含在上述的 pthread_attr_t 中，它们分别是可取消状态和可取消类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Returns: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// 可以设置成 PTHREAD_CANCEL_ENABLE 或 PTHREAD_CANCEL_DISABLE</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_setcancelstate</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">int</span> *oldstate)</span></span>;</span><br><span class="line"><span class="comment">// set 函数把当前的可取消状态设置为 state，同时将原来的状态通过 oldstate 返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用 pthread_testcancel 函数手动添加取消点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pthread_testcancel</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>如果将状态设置为 PTHREAD_CANCEL_DISABLE，那么调用 pthread_cancle 函数并不会杀死线程，取消请求会一直处于挂起状态，直到状态被设置为 ENABLE。同理，此时调用 pthread_testcancel 没有任何效果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Returns: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// 可以设置成 PTHREAD_CANCEL_DEFERRED 或 PTHREAD_CANCEL_ASYNCHRONOUS</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_setcanceltype</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">int</span> *oldtype)</span></span>;</span><br></pre></td></tr></table></figure><p>默认设置为 PTHREAD_CANCEL_DEFERRED，即推迟取消，线程到达取消点之前不会被真正取消。如果设置为 PTHREAD_CANCEL_ASYNCHRONOUS，即异步取消，那么线程可以在任意时间撤销，而不必等待到达取消点</p><h3 id="线程和信号"><a href="#线程和信号" class="headerlink" title="线程和信号"></a>线程和信号</h3><p>每个线程有自己的信号屏蔽字，通过 pthread_sigmask 函数进行设置，参数与 sigprocmask 类似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="comment">// Returns: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// 需要注意的是，如果在主线程中屏蔽了一些信号，那么被创建的线程会继承当前的信号屏蔽字</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_sigmask</span><span class="params">(<span class="keyword">int</span> how, <span class="keyword">const</span> <span class="keyword">sigset_t</span> *<span class="keyword">restrict</span> <span class="built_in">set</span>,<span class="keyword">sigset_t</span> *<span class="keyword">restrict</span> oset)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns: 0 if OK, error number on failure</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigwait</span><span class="params">(<span class="keyword">const</span> <span class="keyword">sigset_t</span> *<span class="keyword">restrict</span> <span class="built_in">set</span>, <span class="keyword">int</span> *<span class="keyword">restrict</span> signop)</span></span>;</span><br><span class="line"><span class="comment">// 线程可以通过 sigwait 函数等待一个或多个信号出现。如果多个线程通过该函数等待信号，则在传递信号的时候，只有一个线程可以从该函数返回。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns: 0 if OK, error number on failure</span></span><br><span class="line"><span class="comment">// 可以调用 pthread_kill 函数将信号发送给指定的线程（需属于同一进程）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_kill</span><span class="params">(<span class="keyword">pthread_t</span> thread, <span class="keyword">int</span> signo)</span></span>;</span><br><span class="line"><span class="comment">// 如果传递给 signo 的值是 0，则可以用来检测线程是否存在。如果接收信号的线程没有对应的处理函数，则该信号会发送给主线程</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> err;</span><br><span class="line">  <span class="keyword">sigset_t</span> mask, old;</span><br><span class="line">  <span class="keyword">pthread_t</span> pt1, pt2;</span><br><span class="line"></span><br><span class="line">  sigemptyset(&amp;mask);</span><br><span class="line">  sigaddset(&amp;mask, SIGQUIT); <span class="comment">/* 如果不屏蔽QUIT信号，则主线程会收到该信号 */</span></span><br><span class="line">  sigaddset(&amp;mask, SIGINT);</span><br><span class="line">  err = pthread_sigmask(SIG_BLOCK, &amp;mask, &amp;old);</span><br><span class="line">  assert(err == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  signal(SIGQUIT, main_q); <span class="comment">/* QUIT信号处理函数 */</span></span><br><span class="line"></span><br><span class="line">  err = pthread_create(&amp;pt1, <span class="literal">NULL</span>, th1, <span class="literal">NULL</span>);</span><br><span class="line">  assert(err == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"main:send QUIT signal.\n"</span>);</span><br><span class="line">  <span class="comment">// 线程1未屏蔽QUIT信号，但没有处理程序，会返回给主线程</span></span><br><span class="line">  pthread_kill(pt1, SIGQUIT);</span><br><span class="line"></span><br><span class="line">  sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 线程1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">th1</span><span class="params">(<span class="keyword">void</span>* a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> err, signo;</span><br><span class="line">  <span class="keyword">sigset_t</span> mask;</span><br><span class="line"></span><br><span class="line">  sigemptyset(&amp;mask);</span><br><span class="line">  sigaddset(&amp;mask, SIGINT);</span><br><span class="line">  pthread_sigmask(SIG_BLOCK, &amp;mask, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    err = sigwait(&amp;mask, &amp;signo);</span><br><span class="line">    assert(err == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">switch</span> (signo) &#123;</span><br><span class="line">      <span class="keyword">case</span> SIGINT:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nth1:INT.\n"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nth1:unexcepted signal %d.\n"</span>, signo);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在多线程中，一般安排专用线程处理信号，通过互斥量的保护，信号处理线程可以安全地改动数据。</p><h3 id="线程和fork"><a href="#线程和fork" class="headerlink" title="线程和fork"></a>线程和fork</h3><p>线程调用 fork 时，为子进程创建了整个进程地址空间的副本，同时还继承了互斥量、读写锁和条件变量的状态。为此，子进程返回后，如果不是马上调用 exec，则需要清理锁的状态。因为子进程中只含有调用 fork 的那个线程的副本，父进程中其他占有锁的线程在子进程中不存在。</p><p>要清除锁的状态，可以使用 pthread_atfork 函数建立 fork 处理程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Returns: 0 if OK, error number on failure</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_atfork</span><span class="params">(<span class="keyword">void</span> (*<span class="built_in">prepare</span>)(<span class="keyword">void</span>), <span class="keyword">void</span> (*parent)(<span class="keyword">void</span>),<span class="keyword">void</span> (*child)(<span class="keyword">void</span>))</span></span>;</span><br></pre></td></tr></table></figure><p>prepare 由父进程在 fork 创建子进程前调用。任务是获取父进程定义的所有锁。<br>parent 在 fork 创建子进程后、返回之前在父进程上下文中调用。任务是对获取的所有锁进行解锁。<br>child 在 fork 返回前在子进程上下文中调用。任务是释放所有的锁。</p><p>可以多次调用该函数以设置多套 fork 处理程序。对于不需要的某个处理程序，可以传入空指针。多次调用时，parent 和 child 以注册时的顺序执行，而 prepare 的执行顺序与注册时相反。</p><h1 id="进程间通信IPC"><a href="#进程间通信IPC" class="headerlink" title="进程间通信IPC"></a>进程间通信IPC</h1><p>管道pipe-半双工（高级管道popen、有名管道FIFO-半双工）、消息队列、信号量（sem，用来控制多个进程对共享资源的访问，常作为一种锁机制，同步手段）、信号（signal）、共享存储（结合信号量）、套接字socket</p><p>FIFO命名管道</p><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>一般来说，管道是半双工的（即数据只能在一个方向上流动），并且只能在具有公共祖先的两个进程之间使用。通常，父进程创建管道后会接着调用 fork，从而利用管道在父子进程之间通信。</p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/%E5%8D%8A%E5%8F%8C%E5%B7%A5%E7%AE%A1%E9%81%93.png" alt=""> </p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/fork-%E5%8D%8A%E5%8F%8C%E5%B7%A5%E7%AE%A1%E9%81%93.png" alt=""></p><p>父子进程可以分别关闭管道的读 / 写端，以利用管道在父子进程中传递信息。例如，如果想要创建从父进程到子进程的管道，则可以关闭父进程的读端和子进程的写端。由于管道半双工的特性，想要在父子进程间双向传递信息需要建立 2 个管道。</p><h3 id="创建管道"><a href="#创建管道" class="headerlink" title="创建管道"></a>创建管道</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="comment">// Returns: 0 if OK, −1 on error</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span> fd[<span class="number">2</span>])</span></span>;</span><br></pre></td></tr></table></figure><p>fd 参数返回两个文件描述符，fd[0] 为读而打开，fd[1] 为写而打开。fd[1] 的输出是 fd[0] 的输入。</p><h3 id="读写管道规则"><a href="#读写管道规则" class="headerlink" title="读写管道规则"></a>读写管道规则</h3><ul><li><p>当读一个写端被关闭的管道，在所有数据被读取后，read 返回 0</p></li><li><p>当写一个读端被关闭的管道，会产生 SIGPIPE 信号。如果忽略该信号或从信号处理程序返回，则 write 返回 - 1，且设置 errno 为 EPIPE</p></li><li><p>写入不超过 PIPE_ BUF 字节的操作是原子的，如果写入数据的大小超过该值，在多个进程同时写一个管道时，所写的数据可能交叉</p></li></ul><h3 id="popen-pclose"><a href="#popen-pclose" class="headerlink" title="popen/pclose"></a>popen/pclose</h3><p>管道的通常用法是创建一个连接到另一个进程的管道，然后读取其输出或者向其输入端发送数据。可以使用 popen 和 pclose 实现这一功能。</p><p>这两个函数实现的操作是：创建一个管道，fork 一个子进程，关闭未使用的管道，执行 shell 运行命令，然后等待命令终止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// Returns: file pointer if OK, NULL on error</span></span><br><span class="line"><span class="function">FILE *<span class="title">popen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cmdstring, <span class="keyword">const</span> <span class="keyword">char</span> *type)</span></span>;</span><br><span class="line"><span class="comment">// Returns: termination status of cmdstring, or −1 on error</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pclose</span><span class="params">(FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure><p>popen 先执行 fork，然后调用 exec 执行 cmdstring，并且返回一个标准 I/O 文件指针。</p><p>如果 type 是 “r”，则文件指针连接到 cmdstring 的标准输出，如果是 “w” 则连接到标准输入。cmdstring 以 sh -c cmdstring 的方式执行。pclose 函数关闭标准 I/O 流，等待命令终止，然后返回 shell 的终止状态。（注意不要使用 fclose 函数，它不会等待子进程结束）。</p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/popen.png" alt=""></p><h2 id="FIFO命名管道"><a href="#FIFO命名管道" class="headerlink" title="FIFO命名管道"></a>FIFO命名管道</h2><p>管道只能用于两个进程之间线性连接，FIFO有名字，可用于非线性连接。使得不相关的进程间也能交换数据，也是一种文件类型，创建 FIFO 与创建文件类似，需要指定其路径。</p><blockquote><p><code>FIFO</code>是一种文件类型，通过<code>stat</code>结构的<code>st_mode</code>成员的编码可以知道文件是否是<code>FIFO</code>类型。可以用<code>S_ISFIFO</code>宏对此进行测试</p></blockquote><p>FIFO有以下2个<strong>用途</strong>：</p><ol><li>shell命令使用FIFO将数据从一条管道传送到另一条时，无需创建中间临时文件</li><li>客户进程-服务器进程应用程序中，FIFO用作汇聚点（多个客户进程向服务器同一个众所周知的FIFO写），在客户进程和服务器进程二者之间传递数据</li></ol><h3 id="创建FIFO"><a href="#创建FIFO" class="headerlink" title="创建FIFO"></a>创建FIFO</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="comment">// Both return: 0 if OK, −1 on error</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mkfifo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">mode_t</span> mode)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mkfifoat</span><span class="params">(<span class="keyword">int</span> dirfd, <span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">mode_t</span> mode)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p>mkfifo：mode 参数指明 FIFO 的文件权限，与 open 函数中的 mode 相同。</p></li><li><p>mkfifoat：path 参数有如下几种情况：</p><ul><li>如果指定为绝对路径，则会忽略 dirfd 参数，行为与 mkfifo 类似</li><li>如果指定为相对路径，则该路径与 dirfd 打开的目录有关</li><li>如果指定为相对路径，且 dirfd 有参数 AT_FDCWD，那么路径以当前目录开始</li></ul></li></ul><blockquote><p>应用程序可以用<code>mknod</code>和<code>mknodat</code>函数创建FIFO。因为POSIX.1原先并没有包括<code>mknod</code>函数，所以<code>mkfifo</code>是专门为POSIX.1设计的。<code>mknod</code>和<code>mknodat</code>函数现在已包括在POSIX.1的XSI扩展中</p></blockquote><h3 id="打开FIFO"><a href="#打开FIFO" class="headerlink" title="打开FIFO"></a>打开FIFO</h3><p>可以使用 open 打开 FIFO</p><ul><li>一般情况下，在打开时如果没有设置非阻塞标志 O_NONBLOCK，只读（O_RDONLY）<code>open</code>要阻塞到某个其它进程为写而打开这个FIFO为止。类似地，只写（O_ WRONL ）<code>open</code>要阻塞到某个其它进程为读而打开它为止</li></ul><p>但是，不应该使用 O_RDWR 的方式来绕过这种阻塞行为，而应该使用非阻塞标志。使用读写方式打开 FIFO，会导致读取数据时永远看不到文件结束，因为至少会有一个写描述符是打开着的。</p><h3 id="读写FIFO"><a href="#读写FIFO" class="headerlink" title="读写FIFO"></a>读写FIFO</h3><ul><li>若<code>write</code>一个尚无进程为读而打开的FIFO，则产生信号<code>SIGPIPE</code> </li><li>若某个FIFO的最后一个写进程关闭了该FIFO，则将为该FIFO的读进程产生一个文件结束标志</li></ul><p>一个给定的FIFO有多个写进程是常见的。这意味着，如果不希望多个进程所写的数据交叉，则必须考虑原子写操作。和管道一样，常量<code>PIPE_BUF</code>说明了可被原子地写到FIFO的最大数据量。</p><p><img data-src="C:%5CUsers%5Cxubei%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220617161038339.png" alt="image-20220617161038339"> </p><p>使用 FIFO 进行客户进程与服务器进程之间的通信。每个客户进程可以将自己的请求写到一个公共的 FIFO 文件中（请求长度需要小于 PIPE_BUF 以避免客户进程之间的数据交叉），服务器进程针对每个客户进程创建 FIFO，用于向客户进程发送数据。客户进程的 FIFO 的路径名可以使用客户进程的 PID 号作为基础，如 /tmp/servv1.PID，这样客户进程就知道该从哪个 FIFO 读取服务器进程返回的数据了。</p><h2 id="XSI-IPC"><a href="#XSI-IPC" class="headerlink" title="XSI-IPC"></a>XSI-IPC</h2><p>每个 IPC 对象与键（key）相关联，以使得多个进程可以通过它进行联系。在创建 IPC 结构时，必须指定一个键。而在系统内部，则使用标识符引用 IPC 结构。——<strong>消息队列、信号量、共享内存。</strong> </p><h3 id="XSI-IPC介绍"><a href="#XSI-IPC介绍" class="headerlink" title="XSI-IPC介绍"></a>XSI-IPC介绍</h3><h4 id="标识符和键"><a href="#标识符和键" class="headerlink" title="标识符和键"></a>标识符和键</h4><p>标识符</p><ul><li>每个内核中的IPC结构（消息队列、信号量或共享内存）都用一个非负整数的<strong>标识符</strong>加以引用</li><li>与文件描述符不同，<strong>IPC标识符</strong>不是小的整数。当一个IPC结构被创建，然后又被删除时，与这种结构相关的标识符连续加1，直至到达一个整形数的最大正值，然后又回转到0</li></ul><p>键</p><ul><li><strong>标识符是IPC对象的内部名</strong>。为使多个合作进程能够在同一IPC对象上汇聚，需要提供一个外部命名方案。为此，<strong>每个IPC对象都与一个键相关联，将这个键作为该对象的外部名</strong>（创建IPC结构时，应指定一个键）。<strong>键的类型是基本系统数据类型<code>key_t</code></strong>，通常在<code>&lt;sys/types.h&gt;</code>中被定义为长整形。这个键由内核变换成标识符。</li></ul><h4 id="权限和结构"><a href="#权限和结构" class="headerlink" title="权限和结构"></a>权限和结构</h4><p>每个IPC结构关联了一个<code>ipc_perm</code>结构（<code>&lt;sys/ipc.h&gt;</code>），规定了权限和所有者，至少包括以下成员</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ipc_perm</span>&#123;</span></span><br><span class="line">    <span class="keyword">uid_t</span> uid;      <span class="comment">/* 拥有者的有效用户ID */</span></span><br><span class="line">    <span class="keyword">gid_t</span> gid;      <span class="comment">/* 拥有者的有效组ID */</span></span><br><span class="line">    <span class="keyword">uid_t</span> cuid;     <span class="comment">/* 创建者的有效用户ID */</span></span><br><span class="line">    <span class="keyword">gid_t</span> cgid;     <span class="comment">/* 创建者的有效组ID */</span></span><br><span class="line">    <span class="keyword">mode_t</span> mode;    <span class="comment">/* 访问模式 */</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>创建IPC结构时，对所有字段都赋初值</li><li>IPC结构的创建者或超级用户可以调用<code>msgctl</code>、<code>semctl</code>或<code>shmctl</code>修改<code>uid</code>、<code>gid</code>和<code>mode</code>字段。修改这些字段类似于对文件调用chown和chmod</li></ul><p><strong>对于任何IPC结构都不存在执行权限</strong>，消息队列和共享内存使用术语”读“和”写“，信号量则用”读“和”更改“。</p><p>键的创建方式，主要有如下几种：</p><ul><li><p>指定为 IPC_PRIVATE，这会创建一个新的 IPC 结构，可以将返回的标识符存入文件供其他进程使用，也可直接给 fork 后的子进程使用</p></li><li><p>在公共头文件中定义一个键，然后由一个进程（通常是服务器进程）根据这个键来创建新的 IPC 结构。但是这种方式可能会与已经存在的键冲突，需要进程删除原有的 IPC 结构再重新创建。</p></li><li><p>使用 ftok 函数，将路径名和某个数字（0-255）变换为一个键。</p></li></ul><blockquote><p>key_t ftok(const char *path, int id);  // Returns: key if OK, (key_t)−1 on error</p></blockquote><p>path 参数必须引用的是现有的文件，id 参数只使用其低 8 位。</p><p>在创建 IPC 结构时还需要指定其权限，与文件权限类似，但是不存在执行权限。</p><p>注意：</p><ul><li>IPC_PRIVATE 只能用于创建新的 IPC 结构，而不能用来引用一个现有的 IPC 结构。</li><li>如果希望确保新创建的 IPC 结构没有引用具有同一标识符的现有 IPC 结构，则可以在 flag 中同时指定 IPC_CREAT 和 IPC_EXCL。这样，如果已经存在则会返回 EEXIST。</li></ul><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ul><li><p>在系统范围内起作用，没有引用计数</p><ul><li>如果创建一个消息队列，放入消息后终止，消息队列和内容不会删除，直到调用msgrcv或msgctl读取或删除消息队列，或者ipcrm删除消息队列或自举系统删除消息队列，</li></ul></li><li><p>在文件系统重没有名字</p><ul><li>不能用ls查看IPC对象</li><li>不能对它们使用多路转接I/O函数（select-poll） </li></ul></li></ul><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>消息队列是消息的链接表，存储在内核中，由消息队列标识符标识。以下简称队列。相关的数据结构很少用到，后面的信号量和共享存储同理。</p><p>结构</p><p>每个队列都有一个<code>msqid_ds</code>结构与其关联，这个结构定义了队列的当前状态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msqid_ds</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ipc_perm</span>    <span class="title">msg_perm</span>;</span></span><br><span class="line">    <span class="keyword">msgqnum_t</span>          msg_qnum;    <span class="comment">/* 队列中的消息数 */</span></span><br><span class="line">    <span class="keyword">msglen_t</span>           msg_qbytes;  <span class="comment">/* 队列中消息的字节 */</span></span><br><span class="line">    <span class="keyword">pid_t</span>              msg_lspid;   <span class="comment">/* 最后调用msgsnd()的进程ID */</span></span><br><span class="line">    <span class="keyword">pid_t</span>              msg_lrpid;   <span class="comment">/* 最后调用msgrcv()的进程ID */</span></span><br><span class="line">    <span class="keyword">time_t</span>             msg_stime;   <span class="comment">/* 最后调用msgsnd()的时间 */</span> </span><br><span class="line">    <span class="keyword">time_t</span>             msg_rtime;   <span class="comment">/* 最后调用msgrcv()的时间 */</span></span><br><span class="line">    <span class="keyword">time_t</span>             msg_ctime;   <span class="comment">/* 最后一次修改队列的时间 */</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/msg%E7%B3%BB%E7%BB%9F%E9%99%90%E5%88%B6.png" alt=""></p><p>最大消息队列数，消息队列最大容量，一个消息最大长度8192。</p><p><a href="https://www.programminghunter.com/article/8679861259/" target="_blank" rel="noopener">linux 消息队列的限制</a> ipcs -q</p><h4 id="创建-打开消息队列"><a href="#创建-打开消息队列" class="headerlink" title="创建/打开消息队列"></a>创建/打开消息队列</h4><p>msgget 用于创建或打开一个队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="comment">// Returns: message queue ID if OK, −1 on error</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><p>key 参数可以是通过 ftok 函数生成的，也可以是 IPC_PRIVATE。flag 用于设定读写权限，如果是新建该 IPC 结构则可以添加 IPC_CREAT。</p><h4 id="添加到队列"><a href="#添加到队列" class="headerlink" title="添加到队列"></a>添加到队列</h4><p>将新消息添加到队列尾端</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Returns: 0 if OK, −1 on error</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgsnd</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">const</span> <span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> nbytes, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">// msqid 是 get 函数返回的队列 ID，nbytes 是消息数据的长度</span></span><br><span class="line"><span class="comment">// ptr 指向一个结构，其包含一个正的消息类型，和消息数据（nbytes 为 0 则无消息数据）,可以定义其结构如下</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msgbuf</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> mtype;       <span class="comment">/* message type, must be &gt; 0 */</span></span><br><span class="line">    <span class="keyword">char</span> mtext[<span class="number">1</span>];    <span class="comment">/* message data, of length nbytes */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>flag 可以指定为 IPC_NOWAIT，当消息队列满时（或达到系统限制），会立即出错返回 EAGAIN。</p><p>否则，进程会一直阻塞直到：有空间容纳消息；队列被删除（返回 EIDRM)；或捕捉到信号并从处理程序返回（返回 EINTR）。</p><h4 id="获取消息"><a href="#获取消息" class="headerlink" title="获取消息"></a>获取消息</h4><p>用于从队列中取出消息，可以指定获取某些类型的数据，而不是必须按照先进先出的次序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">msgrcv</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> nbytes, <span class="keyword">long</span> type, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">// ptr 指向的结构与 snd 函数一样，而 nbytes 则指定了消息长度，如果返回的消息长度 &gt; nbytes，而 flag 中设置了 MSG_NOERROR，则消息被截断。如果没有设置则出错返回 E2BIG，而消息仍然留在队列中。</span></span><br></pre></td></tr></table></figure><p>type==0：返回队列中的第一个消息</p><p>type&gt;0：返回消息类型为 type 的第一个消息</p><p>type&lt;0：返回消息类型≤type 绝对值的消息，如果有若干个满足则取类型最小的。</p><p>flag 参数同样可以指定为非阻塞</p><h4 id="操作消息队列"><a href="#操作消息队列" class="headerlink" title="操作消息队列"></a>操作消息队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgctl</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">int</span> cmd, struct msqid_ds *buf )</span></span>;</span><br></pre></td></tr></table></figure><p>对队列执行多种操作，msqid 队列ID（标识符），<code>msgget</code>的返回值</p><p>cmd 参数指定队列需要执行的操作：</p><ul><li>IPC_STAT：获取队列的 msqid_ds 结构信息，存放于 buf 指向的结构中</li><li>IPC_SET：将 msg_perm.uid，msg_perm.gid，msg_perm.mode 和 msg_qbytes 通过 buf 复制到队列的 msqid_ds 结构中。该命令只能由超级用户或者有效用户 ID 等于 msg_perm.cuid 或 msg_perm.uid 的用户执行。</li><li>IPC_RMID：删除队列及其中的数据。也只能由上述的两类用户执行。</li></ul><p>这 3 条命令也适用与信号量（semctl）和共享存储（shmctl）。</p><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>信号量是一个计数器，用于为多个进程提供对共享数据对象的访问。创建的时候需要指明信号量的个数，在使用的时候也要指明用的是哪个信号量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="comment">// Returns: semaphore ID if OK, −1 on error// </span></span><br><span class="line"><span class="comment">// 创建或打开一个信号量合集 id</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> nsems, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">// nsems 用于指定该集合中的信号量数，如果是创建新集合，则需要指定数量；如果是引用现有的集合，则将其设置为 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含多种信号量操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semctl</span><span class="params">(<span class="keyword">int</span> semid, <span class="keyword">int</span> semnum, <span class="keyword">int</span> cmd, ... <span class="comment">/* union semun arg */</span> )</span></span>;</span><br><span class="line"><span class="comment">// 第 4 个参数 arg 由 cmd 的实际值来决定是否使用，注意该参数并不是指针。如果需要使用该参数，其类型需要自己定义</span></span><br><span class="line"><span class="keyword">union</span> semun &#123;</span><br><span class="line">    <span class="keyword">int</span>              val;   <span class="comment">/* for SETVAL */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span>   <span class="comment">/* for IPC_STAT and IPC_SET */</span></span><br><span class="line">    <span class="keyword">unsigned</span> short  *<span class="built_in">array</span>; <span class="comment">/* for GETALL and SETALL */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 参数 semnum 用于指定信号量集合中的某个成员，该值在 0 ~ nsmes-1 之间</span></span><br><span class="line"><span class="comment">// cmd 由如下 10 个可选项: 1.IPC_STAT，IPC_SET，IPC_RMID：与队列类似；2.GETVAL，SETVAL：返回 / 设置（通过 arg.val）semnum 指定的成员的信号量值（semval）;3.GETPID，GETNCNT，GETZCNT：返回指定成员的 sempid，semncnt，semzcnt；4.GETALL，SETALL：取 / 设置所有的信号量值（通过 arg.array）</span></span><br><span class="line"><span class="comment">// 除 GETALL 以外所有的 GET 命令都由函数的返回值返回，其他命令则是成功返回 0，失败返回 - 1 并设置 errno</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动执行信号量集合上的操作数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semop</span><span class="params">(<span class="keyword">int</span> semid, struct sembuf semoparray[], <span class="keyword">size_t</span> nops)</span></span>;</span><br><span class="line"><span class="comment">// nops 是数组 semoparray 的元素个数，semoparray 是一个信号量操作数组，其中存放每个信号量的操作，其结构如下：</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> &#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> short sem_num; <span class="comment">/* member # in set (0, 1, ..., nsems-1) */</span></span><br><span class="line">  short          sem_op;  <span class="comment">/* operation (negative, 0, or positive) */</span></span><br><span class="line">  short          sem_flg; <span class="comment">/* IPC_NOWAIT, SEM_UNDO */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>sem_flg 的 SEM_UNDO 标志标识当进程终止时，该操作修改的信号量值会被恢复，即重新设置为调用该操作之前的数值。</p><p>sem_op 可以指定如下 3 种值：</p><ul><li><p>正值，表示进程释放的占用的资源数，sem_op 值会加到对应的信号量的值上。</p></li><li><p>0，表示进程希望等待该信号量值变为 0。IPC_NOWAIT 标志可以控制进程是否阻塞，相关的出错返回信息可以查阅手册，此处省略。</p></li><li><p>负值，表示进程想要获取的资源数。如果信号量值≥sem_op 的绝对值（满足需求），则会从当前的信号量值上减去对应的值，否则由 IPC_NOWAIT 标志决定进程是否阻塞。<br>semop 函数具有原子性，即要么执行数组中所有的操作，要么什么也不做。</p></li></ul><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/%E4%BF%A1%E5%8F%B7%E9%87%8F%E7%B3%BB%E7%BB%9F%E9%99%90%E5%88%B6.png" alt=""> </p><h3 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h3><p>共享存储允许两个或多个进程共享一个给定的存储区。但是，需要注意存储区访问的同步问题，当进程在写入数据时其他进程不应该去读取这些数据。一般使用信号量来解决这一同步问题。</p><p>相比与通过文件映射的方式来共享存储区的方式，XSI 共享存储没有相关的文件，它共享的是内存的匿名段。</p><blockquote><p>mmap就是共享存储的一种形式，但是XSI共享存储与其区别在于，XSI共享存储没有相关文件。XSI共享存储段是内存的匿名段</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="comment">// Returns: shared memory ID if OK, −1 on error</span></span><br><span class="line"><span class="comment">// 用于创建或引用一个共享存储段</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">// 实现一般将大小向上取整为系统页长的整数倍，若指定的 size 不是整数倍，则余下的空间是不可使用的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  IPC_STAT，IPC_SET 和 IPC_RMID，相关解释可以参考消息队列部分</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmctl</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">int</span> cmd, struct shmid_ds *buf )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将共享存储段连接到进程的地址空间。具体连接到地址空间的什么位置由 2、3 两个参数决定</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">shmat</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">const</span> <span class="keyword">void</span> *addr, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">// flag 还可以指定 SHM_RDONLY 以只读方式连接共享段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分离共享存储段</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmdt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *addr)</span></span>;</span><br><span class="line"><span class="comment">// 这一操作不会删除系统中共享存储段的标识符及其数据结构。想要删除对应的数据结构，需要调用 shmctl 的 IPC_RMID 命令。</span></span><br></pre></td></tr></table></figure><p>shmat 用于将共享存储段连接到进程的地址空间。具体连接到地址空间的什么位置由 2、3 两个参数决定。</p><p>1.addr=0，则连接到内核选择的第一个可用地址上。（推荐）<br>2.addr≠0，且 flag 没有指定 SHM_RND，那么连接到 addr 指定的地址。<br>3.addr≠0，且指定了 SHM_RND，那么系统会按照公式 (addr-(addr % SHMLBA)) 决定连接地址。该公式作用是将地址向下取最近的 SHMLBA 的倍数，而常数 SHMLBA 表示 “低边界地址倍数”。<br>flag 还可以指定 SHM_RDONLY 以只读方式连接共享段。</p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E9%99%90%E5%88%B6.png" alt=""> </p><h2 id="POSIX信号量"><a href="#POSIX信号量" class="headerlink" title="POSIX信号量"></a>POSIX信号量</h2><p>POSIX 信号量与 XSI 信号量最大的不同就是没有信号量集的概念，一次只能操作一个信号量。还有就是在删除信号量时，正在使用 XSI 信号量的操作会失败；而 POSIX 信号量的操作会正常执行，直到该信号量的最有一个引用被释放。</p><p>POSIX 信号量有两种形式：命名的和未命名的。两者的差异在于创建和销毁的形式上，使用的方式是一样的。未命名的信号量只存在于内存中，因此想要使用这些信号量的进程需要有对应的访问权限，如同一进程中的线程，或者是不同进程中映射相同的内存内容到自己的地址空间的线程。而命名信号量可以被任何直到它们名字的进程访问。</p><p>命名信号量：名字的第一个字符应该是 /。因为一般 POSIX 信号量的实现要使用文件系统；名字不应该包含其他斜杠；名字长度是实现定义的，不应长于_POSIX_NAME_MAX。</p><h4 id="创建-获取信号量"><a href="#创建-获取信号量" class="headerlink" title="创建/获取信号量"></a>创建/获取信号量</h4><p>用于创建一个新的信号量或使用一个现有的信号量 oflag可为0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="comment">// Returns: Pointer to semaphore if OK, SEM_FAILED on error</span></span><br><span class="line"><span class="function"><span class="keyword">sem_t</span> *<span class="title">sem_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">int</span> oflag, ... <span class="comment">/* mode_t mode,unsigned int value */</span> )</span></span>;</span><br></pre></td></tr></table></figure><p>当 oflag 包含 O_CREAT 标志时，如果信号量不存在则会创建新的，如果存在则会被使用，但不会重新初始化。指定此标志时，还需要提供后面的 2 个参数。mode 指定访问权限，这与打开文件的权限相同；value 指定信号量的初值。<br>如果 oflag 同时指定了 O_EXCL 标志，则在创建信号量时，如果信号量已经存在就会出错</p><ul><li>使用现有的命名信号量时，仅指定2个参数：<ul><li><code>name</code>：信号量的名字</li><li><code>oflag</code>：设为0</li></ul></li><li>创建新的命名信号量<ul><li><code>name</code>：信号量的名字</li><li><code>oflag</code>：指定了<code>O_CREAT</code>标志。当该参数置为<code>O_CREAT|O_EXCL</code>并且信号量存在时，函数会失败</li><li><code>mode</code>：谁可以访问信号量，值与<a href="https://github.com/arkingc/note/blob/master/操作系统/UNIX环境高级编程.md#21-打开文件" target="_blank" rel="noopener">open函数</a>的权限位相同</li><li><code>value</code>：信号量的初始值（<code>0~SEM_VALUE_MAX</code>）</li></ul></li></ul><p><strong>为了移植性，信号量的命名应该遵循下列规则</strong>：</p><ul><li>名字的第一个字符应该为斜杠(<code>/</code>)</li><li>名字不应该包含其他斜杠以此避免实现定义的行为</li><li>信号量名字的最大长度是实现定义的，不应该鲳鱼<code>_POSIX_NAME_MAX</code>个字符长度。因为这是文件系统的实现能允许的最大名字长度的限制</li></ul><h4 id="关闭信号量"><a href="#关闭信号量" class="headerlink" title="关闭信号量"></a>关闭信号量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_close</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br></pre></td></tr></table></figure><p>sem_close关闭一个信号量，释放相关资源, 进程退出时如果没有调用该函数，系统也会自动关闭打开的信号量。POSIX 信号量没有 UNDO 机制，所以信号量的值不会受到影响</p><h4 id="销毁信号量"><a href="#销毁信号量" class="headerlink" title="销毁信号量"></a>销毁信号量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_unlink</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</span><br><span class="line"><span class="comment">// sem_unlink，</span></span><br></pre></td></tr></table></figure><p>删除信号量的名字,如果没有打开的信号量引用，信号量会被立即销毁，否则会延迟到最后一个打开的引用关闭</p><h4 id="信号量操作"><a href="#信号量操作" class="headerlink" title="信号量操作"></a>信号量操作</h4><p>与 XSI 信号量不同，POSIX 信号量一次操作只能 + 1 或者 - 1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="comment">// All return: 0 if OK, −1 on error</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_trywait</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_wait</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_timedwait</span><span class="params">(<span class="keyword">sem_t</span> *<span class="keyword">restrict</span> sem,<span class="keyword">const</span> struct timespec *<span class="keyword">restrict</span> tsptr)</span></span>;</span><br><span class="line"><span class="comment">// 这 3 个函数实现信号量的 - 1 操作</span></span><br><span class="line"><span class="comment">// 当信号量计数为 0 时，使用 sem_wait 函数会阻塞，直到成功使信号量 - 1 或者被信号中断；而 sem_trywait 会返回 - 1 且设置 errno 为 EAGAIN。</span></span><br><span class="line"><span class="comment">// 使用 sem_timedwait 可以设定等待时间，超时后会返回 - 1 且设置 errno 为 ETIMEOUT</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_post</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br><span class="line"><span class="comment">// 使信号量计数 + 1。如果有进程被改信号量阻塞，那么进程会被唤醒。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_getvalue</span><span class="params">(<span class="keyword">sem_t</span> *<span class="keyword">restrict</span> sem, <span class="keyword">int</span> *<span class="keyword">restrict</span> valp)</span></span>;</span><br><span class="line"><span class="comment">// 获取信号量值，该数值存储在 valp 指向的地址处。注意函数返回的数值有可能是过时的</span></span><br></pre></td></tr></table></figure><p>如果在多个进程间共享一个资源，则可使用3种技术中的一种来协调访问，可以使用映射到两个进程地址空间中的信号量、记录锁或者（共享存储中的）互斥量，（共享存储中的）互斥量更快，但是记录锁简单也快</p><h4 id="未命名信号量"><a href="#未命名信号量" class="headerlink" title="未命名信号量"></a>未命名信号量</h4><p>主要用于单个进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个未命名信号量，value 指定其初值，pshared 值为 0 时，信号量仅在进程的线程之间共享；不为 0 则表明会在进程之间共享</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_init</span><span class="params">(<span class="keyword">sem_t</span> *sem, <span class="keyword">int</span> pshared, <span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_destroy</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br><span class="line"><span class="comment">// 销毁未命名信号量。销毁之后不能使用任何带有 sem 的信号量函数，除非通过 sem_init 重新初始化它</span></span><br></pre></td></tr></table></figure><h2 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="comment">// 成功时返回一个套接字描述符，失败则返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure><p>int domain : 用于确定网络类型</p><p>int type : 用于确定协议类型</p><p>int protocol : 用于消歧义，决定网络协议，通常是0</p><p>参考：<a href="https://github.com/arkingc/note/blob/master/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/UNIX%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B.md" target="_blank" rel="noopener">Unix高级编程笔记</a> </p><p>书籍：<a href="https://awesome-programming-books.github.io/linux/UNIX环境高级编程(第三版).pdf" target="_blank" rel="noopener">《UNIX环境高级编程(第三版)》</a> </p>]]></content>
    
    <summary type="html">
    
      主要是记录unix环境高级编程笔记，供查阅
    
    </summary>
    
    
      <category term="技术" scheme="https://hellolinux.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="https://hellolinux.xyz/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="linux" scheme="https://hellolinux.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>2022年罗永浩创业访谈</title>
    <link href="https://hellolinux.xyz/posts/d5fb7a8a.html"/>
    <id>https://hellolinux.xyz/posts/d5fb7a8a.html</id>
    <published>2022-06-18T12:46:25.000Z</published>
    <updated>2022-06-18T12:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/1%E7%BD%97%E6%B0%B8%E6%B5%A9.jpg" alt=""></p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/2%E7%BD%97%E6%B0%B8%E6%B5%A9.jpg" alt=""></p><p><img data-src="https://raw.githubusercontent.com/cracker8090/imgbed/master/blogImg/3%E7%BD%97%E6%B0%B8%E6%B5%A9.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      2022老罗访谈记录
    
    </summary>
    
    
      <category term="创业" scheme="https://hellolinux.xyz/categories/%E5%88%9B%E4%B8%9A/"/>
    
    
      <category term="创业" scheme="https://hellolinux.xyz/tags/%E5%88%9B%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>通缩和黑天鹅的可能性</title>
    <link href="https://hellolinux.xyz/posts/5a48f52.html"/>
    <id>https://hellolinux.xyz/posts/5a48f52.html</id>
    <published>2022-06-17T09:23:59.000Z</published>
    <updated>2022-06-17T09:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通缩"><a href="#通缩" class="headerlink" title="通缩"></a>通缩</h1><p>导致通缩原因：</p><ul><li>债务压力增大，个人 家庭债务</li><li>资产价格下降 目前全球的主流金融市场的现状</li></ul><p>美国有走向通缩的条件。中国在走美国过去的道路，下一个循环可能会走向通缩。</p><p>策略：大量防水 2008年的美国成功（增加泡沫、债务），2000左右日本失败（老龄化）</p><h1 id="黑天鹅"><a href="#黑天鹅" class="headerlink" title="黑天鹅"></a>黑天鹅</h1><p>引发世界金融危机或者局部金融危机的事件</p><h2 id="现代货币理论MMT"><a href="#现代货币理论MMT" class="headerlink" title="现代货币理论MMT"></a>现代货币理论MMT</h2><ul><li>国家货币理论</li><li>内生货币理论</li><li>金融不稳定假说</li><li>凯恩斯主义</li><li>功能财政理论</li><li>三部门均衡理论</li></ul><p>现在很多国家都奉行凯恩斯为主的经济体系（MMT为主），采用发币印债来缓解各种问题，这也是世界金融危机8-10年定论的一个基础。</p><p>而这，也是2008年之后BTC出现的原因之一，也就是当时凯恩斯对立面的奥地利经济学派锁奉行的，而这一切都需要时间去检验，目前只能说明当西凯恩斯主义是存在很大问题的。</p><h2 id="黑天鹅可能性"><a href="#黑天鹅可能性" class="headerlink" title="黑天鹅可能性"></a>黑天鹅可能性</h2><p>政府债/GDP的比率，会出现泡沫被挤的风险。</p><p>而日本、意大利，欧洲等其他国家，再就是币圈的万亿市值，这其中的任何一个地方出现崩盘或者违约，都会世界金融市场的一个重磅炸弹，一个引爆世界金融危机或者局部金融危机，为什么说是局部金融危机，因为目前世界已经出现了两元或者多元货币体系，俄罗斯重新走向金本位，未来可能还会有国家会走向银本位，或者有的采用BTC本位，这些都是可能性。</p><p>金融风险的重轻先后：</p><ul><li>跟美元很紧密的西方国家，而且债务和GDP比率较高，国内经济再发展较难，日本、意大利，前不久已经被桥水（Ray Dalio）做空债务或金融市场，上面的两个国家都存在前面说的一些问题。</li><li>再者，欧洲的一些国家经受俄乌战争带来的未来不确定性的战争通胀加剧，可能也会有些国家出现或强或弱的金融危机。</li><li>俄罗斯，出现的风险比前面的低一些，除非战争出现一边倒的俄罗斯打败，否则出现大的风险较难，因为已经完全摆脱了美元的影响，且是资源大国。</li><li>中国，为什么中国排在后面，主要是目前中国没有跟战争接壤，另外跟俄罗斯、美国的微妙关系，跟美元有关系，但是又不是强相关（这里可能存在外汇管制），另外中国的利率还有空间，人民币有在一定程度作为结算货币，就如前一篇文章说到的，下一轮就会走向高通胀时代，这也是凯恩斯主义的终局。</li></ul><p>以上只是自己的个人粗见，欢迎交流：<a href="https://twitter.com/Changeli0n" target="_blank" rel="noopener">推特</a> <a href="https://hellolinux.xyz/about/">个人主页</a> </p>]]></content>
    
    <summary type="html">
    
      主要讲未来的通缩和黑天鹅的可能性
    
    </summary>
    
    
      <category term="经济" scheme="https://hellolinux.xyz/categories/%E7%BB%8F%E6%B5%8E/"/>
    
    
      <category term="经济" scheme="https://hellolinux.xyz/tags/%E7%BB%8F%E6%B5%8E/"/>
    
  </entry>
  
  <entry>
    <title>美元流动性简析</title>
    <link href="https://hellolinux.xyz/posts/6a930604.html"/>
    <id>https://hellolinux.xyz/posts/6a930604.html</id>
    <published>2022-06-17T09:22:49.000Z</published>
    <updated>2022-06-17T09:22:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前一篇文章：《<a href="https://hellolinux.xyz/posts/fa2bb907.html">经济篇-美国升息QT解读（笔记）</a>》，缩表和QE时相反操作</p><h1 id="美元指数"><a href="#美元指数" class="headerlink" title="美元指数"></a>美元指数</h1><ul><li>美元指数：美元强弱的指标，全球资金动向的指数，美元需求越旺盛，美元指数就会越高。</li><li>美元指数构成，一篮子货币组成（欧元57%、日元13%、英镑12%、加拿大9%、瑞典法郎4%、瑞士法郎3.6%），去年欧元走弱推动了美元上涨</li><li>美元指数微笑曲线：美国经济极度疲软或强劲时，美元指数上升；美国经济相对其他经济体不是特别强的时候，美元指数下降。</li></ul><p>美元进入加息周期，利息高，美元指数就会上升，资金跑回美国吃利息，降息则相反，美元会从美国流出，跑回其他国家，疫情引起美元流动性供给缺失（疫情、现金为王，成为抢手货，美元指数走强），利率降0，准备金降0，撒钱。</p><p>长期：改变收入分配结构、补充底层购买力、改变债务驱动型增长方式才是解决问题之根本。</p><h1 id="加密货币受益者"><a href="#加密货币受益者" class="headerlink" title="加密货币受益者"></a>加密货币受益者</h1><p>投机者、机构投资者-公司（分散风险）、蹭流量的（elon）、产业链玩家（交易所 ETF）、黑市交易者。</p><p>黄金11w亿美元，BTC对比，需要的时间还很长，不是几年就能解决的。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.youtube.com/watch?v=hDkCf4FIbfI&ab_channel=小Lin说" target="_blank" rel="noopener">【比特币资本战】十年翻10000倍，20万人一夜血亏400亿，背后究是谁在获益？</a></p><p><a href="https://www.youtube.com/watch?v=cWVGiz8nf-I&ab_channel=MoneyXYZ" target="_blank" rel="noopener">什么是”美元回流”?美联储加息缩表在”收割”全世界?国际资本是如何流动的?</a> </p>]]></content>
    
    <summary type="html">
    
      美元指数及流动性
    
    </summary>
    
    
      <category term="经济" scheme="https://hellolinux.xyz/categories/%E7%BB%8F%E6%B5%8E/"/>
    
    
      <category term="经济" scheme="https://hellolinux.xyz/tags/%E7%BB%8F%E6%B5%8E/"/>
    
  </entry>
  
  <entry>
    <title>推荐网站</title>
    <link href="https://hellolinux.xyz/posts/6b1a18a6.html"/>
    <id>https://hellolinux.xyz/posts/6b1a18a6.html</id>
    <published>2022-06-14T09:47:52.000Z</published>
    <updated>2022-06-14T09:47:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="国外社交媒体热点中文简介"><a href="#国外社交媒体热点中文简介" class="headerlink" title="国外社交媒体热点中文简介"></a>国外社交媒体热点中文简介</h1><p><a href="https://www.buzzing.cc/" target="_blank" rel="noopener">https://www.buzzing.cc/</a></p><h1 id="主要软件的开源替代查找网址"><a href="#主要软件的开源替代查找网址" class="headerlink" title="主要软件的开源替代查找网址"></a>主要软件的开源替代查找网址</h1><p><a href="https://www.opensourcealternative.to/" target="_blank" rel="noopener">https://www.opensourcealternative.to/</a></p><h1 id="一个印度著名瑜伽教练"><a href="#一个印度著名瑜伽教练" class="headerlink" title="一个印度著名瑜伽教练"></a>一个印度著名瑜伽教练</h1><p>sadhguru app、网站、youtube</p><h1 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h1><p>一个还是学生的技术网站：<a href="https://blog.mwish.me/" target="_blank" rel="noopener">https://blog.mwish.me/</a></p><h1 id="gartner技术发展曲线"><a href="#gartner技术发展曲线" class="headerlink" title="gartner技术发展曲线"></a>gartner技术发展曲线</h1><p>2022：<br><a href="https://www.gartner.com/cn/information-technology/insights/top-technology-trends" target="_blank" rel="noopener">https://www.gartner.com/cn/information-technology/insights/top-technology-trends</a><br>2021：<br><a href="https://www.freebuf.com/news/286389.html" target="_blank" rel="noopener">https://www.freebuf.com/news/286389.html</a></p><h1 id="语雀IT百科"><a href="#语雀IT百科" class="headerlink" title="语雀IT百科"></a>语雀IT百科</h1><p><a href="https://www.yuque.com/yuque/blog/yuque-info-tech-encyclopedia" target="_blank" rel="noopener">《语雀 IT 百科》</a> </p><h1 id="树莓派手动搭建YT"><a href="#树莓派手动搭建YT" class="headerlink" title="树莓派手动搭建YT"></a>树莓派手动搭建YT</h1><p>搬瓦工+ 树莓派+ Debian + Clash 旁路路由 + XBox One  + 电视 + Youtube + CBSN Live + 实时字幕  = 假装在美国 <a href="https://twitter.com/haoel/status/1323838862259449856" target="_blank" rel="noopener">link</a> </p><h1 id="IT网站聚合"><a href="#IT网站聚合" class="headerlink" title="IT网站聚合"></a>IT网站聚合</h1><p><a href="https://bigezhang.com/" target="_blank" rel="noopener">https://bigezhang.com/</a></p>]]></content>
    
    <summary type="html">
    
      主要是推荐的网址
    
    </summary>
    
    
      <category term="推荐" scheme="https://hellolinux.xyz/categories/%E6%8E%A8%E8%8D%90/"/>
    
      <category term="网址" scheme="https://hellolinux.xyz/categories/%E6%8E%A8%E8%8D%90/%E7%BD%91%E5%9D%80/"/>
    
    
      <category term="网址" scheme="https://hellolinux.xyz/tags/%E7%BD%91%E5%9D%80/"/>
    
      <category term="推荐" scheme="https://hellolinux.xyz/tags/%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>效率工具</title>
    <link href="https://hellolinux.xyz/posts/f6bb345a.html"/>
    <id>https://hellolinux.xyz/posts/f6bb345a.html</id>
    <published>2022-06-14T07:43:52.000Z</published>
    <updated>2022-06-14T07:43:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创作者变现工具"><a href="#创作者变现工具" class="headerlink" title="创作者变现工具"></a>创作者变现工具</h1><h2 id="小报童"><a href="#小报童" class="headerlink" title="小报童"></a>小报童</h2><p>flomo团队的小报童：<a href="https://xiaobot.net/home.html" target="_blank" rel="noopener">https://xiaobot.net/home.html</a></p><p>一个基于微信服务号的付费文字短内容平台。</p><p>目前在测试阶段，它的主要特点就是不需要做社群工具——小密圈，不需要广告变现——头条、微信公众号等，不做算法推荐——小红书、知乎、b站。主打为个人而非公司。</p><ul><li>个人付费，多种时长定价选择，降低订阅门槛，会员自动到期提醒，不必费心管理</li><li>微信提醒更新，提高内容触达，点击即可阅读，无需安装应用，留言实时通知，互动更为紧密</li><li>摒弃富文本，聚焦于核心观点表达，无需客户端，微信内随时随地创作，标签即分类，让内容井然有序</li></ul><p>读者通过作者提供的二维码进入订阅页面，可以选择订阅三个月或一年的阅读权限，并选择服务号推送的时机，如每天定时推送一次，还是一周推送一次，但不是实时推送。</p><p>其实另外一种方式就是newsletter的方式，但是需要作者自己去维护一下，在国外比较流行。</p><h1 id="全平台网络书签Raindrop"><a href="#全平台网络书签Raindrop" class="headerlink" title="全平台网络书签Raindrop"></a>全平台网络书签Raindrop</h1><p><a href="https://app.raindrop.io/" target="_blank" rel="noopener">https://app.raindrop.io/</a></p><p>摘要预览，跨平台同步</p><p>可以加标签和分类，支持预览。支持导入导出。</p><p>可以共享，可以跟他人一起维护某个公开。智能识别到文章，然后稍后读。</p><h1 id="github-docker代理"><a href="#github-docker代理" class="headerlink" title="github docker代理"></a>github docker代理</h1><p><a href="https://doc.fastgit.org/zh-cn/guide.html?continueFlag=5a493c110efe1a1cba1b5741b8aaf13a" target="_blank" rel="noopener">fastGit</a> </p><ul><li><a href="https://ghproxy.com/" target="_blank" rel="noopener">GitHub Proxy</a> - GitHub Proxy 是一个代理 clone 和下载 GitHub 仓库、文件、releases 的网站。</li><li><a href="https://dockerproxy.com/" target="_blank" rel="noopener">Docker Proxy</a> - Docker Proxy 是一个多平台容器镜像代理服务,支持 Docker Hub, GitHub, Google, k8s 等镜像仓库.</li></ul><h1 id="FRP和文件分享"><a href="#FRP和文件分享" class="headerlink" title="FRP和文件分享"></a>FRP和文件分享</h1><ul><li><a href="https://freefrp.net/" target="_blank" rel="noopener">Free FRP</a> - 免费 FRP 内网穿透服务。</li><li><a href="https://drop.ioiox.com/" target="_blank" rel="noopener">Snadrop Services</a> - 内网全平台文件传输服务。</li><li><a href="https://send.ioiox.com/" target="_blank" rel="noopener">Send Files</a> - 临时文件分享网站。</li></ul><h1 id="在线阅读工具"><a href="#在线阅读工具" class="headerlink" title="在线阅读工具"></a>在线阅读工具</h1><p><a href="https://www.neat-reader.com/" target="_blank" rel="noopener">https://www.neat-reader.com/</a></p><h1 id="gpic图片工具"><a href="#gpic图片工具" class="headerlink" title="gpic图片工具"></a>gpic图片工具</h1><p><a href="https://gpic.site/" target="_blank" rel="noopener">https://gpic.site/</a></p><h1 id="知识管理工具"><a href="#知识管理工具" class="headerlink" title="知识管理工具"></a>知识管理工具</h1><p>DEVONthink<br>它的对立面obsidian、notion、Roam</p><p>Obsidian - 记笔记</p><p>Drafts - 速记 可用其他替代</p><p>Matter - 稍后读 标注 hypothesis（标注高亮分享）</p><p>Raindrop - 存网页 付费 pocket+rss</p><p>每日事件提醒 GTD或者其他</p><h1 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h1><p><a href="https://nitter.net/twitterusername/rss" target="_blank" rel="noopener">https://nitter.net/twitterusername/rss</a></p><p><a href="https://rssforever.com/" target="_blank" rel="noopener">RSS Forever</a> - rssforever 提供免费的 RSS 和 RSSHub 服务。</p><h2 id="feed43-amp-feedbro"><a href="#feed43-amp-feedbro" class="headerlink" title="feed43&amp;feedbro"></a>feed43&amp;feedbro</h2><p>网址：<a href="https://feed43.com/" target="_blank" rel="noopener">feed43</a> </p><p>参考：<a href="https://www.youtube.com/watch?v=KusXXktShdQ&ab_channel=GotBook" target="_blank" rel="noopener">如何使用Feed43制作一个RSS订阅源并获取全文</a> </p><p>网址、标题、时间、正文</p><p>插件网址：<a href="https://chrome.google.com/webstore/detail/feedbro/mefgmmbdailogpfhfblcnnjfmnpnmdfa" target="_blank" rel="noopener">feedbro插件</a>  </p><p><a href="https://sspai.com/post/68486" target="_blank" rel="noopener">基于 RSS 的信息体系构建</a> </p><h1 id="iA-Writer写作软件"><a href="#iA-Writer写作软件" class="headerlink" title="iA Writer写作软件"></a>iA Writer写作软件</h1><p>一个MAC上markdown写作软件,支持 DOCX格式和Markdown文档间的转换</p><h1 id="Apple应用降级"><a href="#Apple应用降级" class="headerlink" title="Apple应用降级"></a>Apple应用降级</h1><p><a href="https://qianling.pw/ios-app/" target="_blank" rel="noopener">https://qianling.pw/ios-app/</a></p><h1 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h1><h2 id="转换工具"><a href="#转换工具" class="headerlink" title="转换工具"></a>转换工具</h2><p><a href="https://www.danstools.com/" target="_blank" rel="noopener">https://www.danstools.com/</a></p><h2 id="Tailwind-CSS-插件工具"><a href="#Tailwind-CSS-插件工具" class="headerlink" title="Tailwind CSS 插件工具"></a>Tailwind CSS 插件工具</h2><p><a href="https://gimli.app/tailwinddx.html" target="_blank" rel="noopener">https://gimli.app/tailwinddx.html</a></p><h2 id="meilisearch"><a href="#meilisearch" class="headerlink" title="meilisearch"></a>meilisearch</h2><p>类似ES的搜索工具，500GB<br><a href="https://github.com/meilisearch/MeiliSearch" target="_blank" rel="noopener">https://github.com/meilisearch/MeiliSearch</a></p>]]></content>
    
    <summary type="html">
    
      主要是效率相关的工具
    
    </summary>
    
    
      <category term="效率" scheme="https://hellolinux.xyz/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="工具" scheme="https://hellolinux.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="效率" scheme="https://hellolinux.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>cosmos生态-terra上的收益boost reactor money介绍</title>
    <link href="https://hellolinux.xyz/posts/8a028c0d.html"/>
    <id>https://hellolinux.xyz/posts/8a028c0d.html</id>
    <published>2022-04-22T03:11:15.000Z</published>
    <updated>2022-04-22T03:11:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Reactor 是一个优化的收益平台，旨在提高 Terra 的奖励，具有简单易用的界面。通过最大化 VE 结构的好处，Reactor 可以帮助增加整个 Terra 生态系统的流动性。通过 Reactor 简化所有用户（质押者、流动性提供者、借款者和收益者）的boost机制。</p><p>作为未来 vxASTRO、veANC 和其他项目的多个 veToken 的持有者，Reactor 将参与这些投票程序，并将这些投票权传递给投票锁定的 RCT（vlRCT）持有者。因此，一个 RCT 代币将拥有 Terra 生态系统中多个治理项目的权利。</p><blockquote><p>reASTRO 是 Reactor 的新衍生代币，每 xASTRO 1 个 reASTRO</p></blockquote><h2 id="ASTRO-staker"><a href="#ASTRO-staker" class="headerlink" title="ASTRO staker"></a>ASTRO staker</h2><p>将ASTRO存入平台。这个 ASTRO 被永久锁定，以 1:1 的比例获得 reASTRO 代币。在平台上质押 reASTRO：</p><ul><li>所有正常的 vxASTRO 奖励都分配给质押者</li><li>在 ASTRO 中获得一部分（10%）的平台费用</li><li>为您收到的每个 ASTRO 按比例接收 Reactor 平台的原生代币 (RCT)</li><li>质押者可以随时使用 Astroport 中的激励性 reASTRO/ASTRO 流动资金池将 reASTRO 兑换成 ASTRO</li></ul><blockquote><p>为了引导 ASTRO 和 reASTRO 代币的流动性，Astroport Generators 中 ASTRO/reASTRO 池的流动性提供者将获得双重耕作奖励，同时获得 ASTRO 和 RCT 代币作为奖励</p></blockquote><h2 id="Astroport-LP"><a href="#Astroport-LP" class="headerlink" title="Astroport LP"></a>Astroport LP</h2><ul><li><p>将 Astroport LP 代币存入 Reactor，您将自动获得 ASTRO 奖励</p></li><li><p>为您收到的每个 ASTRO 按比例接收 Reactor 平台的原生代币 (RCT)</p></li><li><p><strong>没有</strong>存款或取款费用</p></li></ul><h2 id="RCT-锁定"><a href="#RCT-锁定" class="headerlink" title="RCT 锁定"></a>RCT 锁定</h2><p>RCT 储物柜在 reASTRO 中获得部分平台费用（<strong>5%</strong> ）</p><p>贿赂市场的奖励</p><h2 id="费用"><a href="#费用" class="headerlink" title="费用"></a>费用</h2><p>LP没有存款或取款费用：</p><ul><li>15% 的总平台费用将用于 reASTRO 质押者和 RCT 储物柜。<ul><li>10% 给 reASTRO 质押者，作为 ASTRO</li><li>5% 给 RCT 储物柜，以 reASTRO 形式提供</li></ul></li></ul><h1 id="代币经济"><a href="#代币经济" class="headerlink" title="代币经济"></a>代币经济</h1><p>总供应 1亿</p><ul><li><p>6% 投资者：Hashed、Delphi Ventures 和 GT Capital 的种子轮融资占 3%，为未来的投资者和潜在的战略合作伙伴预留了额外的 3%。</p></li><li><p>8.5–13.5% ：bigbang，如果达到特定阈值，将额外获得 5% 作为 The Big Bang 事件的奖励。否则，剩余的 5% 将作为 Astroport Farming Rewards 返还。</p></li><li><p>60–65%：farming奖励</p><ul><li><p><strong>30%-35% Astroport 奖励</strong>— 在 Reactor 上收到的 ASTRO 按比例奖励。包括 reASTRO 养殖和 Astroport LP 养殖</p></li><li><p><strong>15% 预留 LP 奖励</strong>— 按比例奖励 Terra 上的 Anchor 或 Future Ve-Structure 项目</p></li><li><p><strong>15% 流动性挖矿</strong>——分配超过 4 年。（激励计划，目前为 RCT/UST 和 reASTRO/xASTRO 等）</p><p><em>注意：reASTRO 是协议的新衍生代币，每 xASTRO 1 个 reASTRO</em> </p></li></ul></li><li><p>10% 国库：在 1 年内归属。用于未来的激励和社区驱动的活动</p></li><li><p>10% 团队：1 年悬崖，2 年归属</p></li><li><p>0.5％空投</p></li></ul><p>每当 Reactor 从 Astroport 收集 ASTRO 奖励时，就会生成 RCT。这包括所有 LP 池和 reASTRO 池。</p><p>铸造的 RCT 数量根据通过 Reactor 收集的 ASTRO 代币数量按比例确定，ASTRO 与 RCT 的比率随着 RCT 供应量的增加（最多 3500 万）而增加。</p><h2 id="空投"><a href="#空投" class="headerlink" title="空投"></a>空投</h2><p>向总共三组参与者分配 0.5% 或 500,000 $RCT</p><ul><li><p>Astroport (350k)</p><p>ASTRO-UST LP holders (100k) (including lockdrop participants)</p><p>xASTRO stakers (250k)</p></li><li><p>Astroport bLuna-Luna LP holders (50K) (including lockdrop participants) </p></li><li><p>ANC token stakers (100k) </p></li></ul><p>每个类别范围：1-1000 $RCT，一个地址最多3000 $RCT，Phase-2之后获取</p><h1 id="bigbang"><a href="#bigbang" class="headerlink" title="bigbang"></a>bigbang</h1><p>April 28th 2PM UTC </p><p><a href="https://bigbang.reactor.money/" target="_blank" rel="noopener">https://bigbang.reactor.money/</a></p><ul><li><p>阶段 0：空投 — <strong>500,000 (0.5%) RCT</strong></p></li><li><p>第 1 阶段：RCT-UST 流动性引导池 — <strong>2,500,000 (2.5%) RCT</strong></p><p>LBP 完成后，Reactor 将提取 70% 的资金，剩余的 LP 将转入 Astroport RCT-UST 池。从 Phase-1 获得的 UST 将成为 Reactor 的战略基金，主要用于增加符合条件的 veToken 作为 $ASTRO、$ANC 和其他潜在项目的代币。 </p></li><li><p>第 2 阶段：ConvertDrop 事件 — <strong>6,000,000 (6%) RCT</strong> </p><p>第二阶段将持续<strong>7 天</strong>。用户可以在 7 天内随时参与 Convertdrop。<strong>ASTRO、xASTRO</strong>和<strong>ANC</strong>持有者可以将他们的代币转换为<strong>reASTRO</strong>和<strong>reANC</strong>，并在锁定期进行质押，以获得早期转换奖励。参与者在整个 Convertdrop 期间只能提取一次他们的 ASTRO 和 ANC。在前五天，用户可以提取任意数量的原始代币。从第 6 天开始，参与者最多只能提取 50% 的代币。在第 7 天，每个参与者的提款津贴将从 50% 线性下降到 0%。</p><p>当锁定到期时，用户将能够以<strong>reASTRO/reANC</strong>的形式收回他们的 ASTRO/xASTRO/ANC ，并可以立即兑换为 xASTRO/ANC。</p></li><li><p>第3阶段：在 Reactor 的网站上领取他们的空投奖励。用户可以提取他们解锁的 reASTRO 和 reANC 并从第二阶段获得 RCT 奖励。RCT 持有者可以将 RCT 锁定在 vlRCT 保险库中，以提早积累 vlRCT。</p></li></ul><p>随着 Reactor 的推出，用户的 reASTRO 将自动被质押到 Reactor 的 reASTRO 质押池中以继续耕种并从 Reactor 的性能费中获得 ASTRO 以及 RCT 代币。</p><p><img data-src="../images/rct.png" alt="rct"> </p><h1 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h1><p><a href="https://reactor.money/" target="_blank" rel="noopener">https://reactor.money/</a></p><p><a href="https://twitter.com/reactor_money" target="_blank" rel="noopener">https://twitter.com/reactor_money</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://medium.com/@reactor.money/rct-tokenomics-df61574a5a93" target="_blank" rel="noopener">RCT Tokenomics</a> </p><p><a href="https://medium.com/@reactor.money/the-big-bang-the-rct-token-generation-event-4f2d1eb3ac40" target="_blank" rel="noopener">The Big Bang: The RCT Token Generation Event</a> </p><p><a href="https://docs.reactor.money/" target="_blank" rel="noopener">https://docs.reactor.money/</a></p><p><strong>欢迎交流：</strong> <a href="https://twitter.com/Changeli0n" target="_blank" rel="noopener">个人推特</a> <a href="https://matters.news/@hellolinux" target="_blank" rel="noopener">matters</a> <a href="https://t.me/hellolinuxLab" target="_blank" rel="noopener">个人分享TG频道</a> </p>]]></content>
    
    <summary type="html">
    
      terra上的收益boost reactor money介绍
    
    </summary>
    
    
      <category term="区块链" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="cosmos" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/cosmos/"/>
    
    
      <category term="cosmos" scheme="https://hellolinux.xyz/tags/cosmos/"/>
    
      <category term="luna" scheme="https://hellolinux.xyz/tags/luna/"/>
    
      <category term="rct" scheme="https://hellolinux.xyz/tags/rct/"/>
    
  </entry>
  
  <entry>
    <title>hypothesis介绍</title>
    <link href="https://hellolinux.xyz/posts/dcbbbbe4.html"/>
    <id>https://hellolinux.xyz/posts/dcbbbbe4.html</id>
    <published>2022-04-20T14:07:31.000Z</published>
    <updated>2022-04-20T14:07:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>网站：<a href="https://hypothes.is/" target="_blank" rel="noopener">https://hypothes.is/</a></p><p><a href="https://chrome.google.com/webstore/detail/hypothesis-web-pdf-annota/bjfhmglciegochdpefhhlphglcehbmek" target="_blank" rel="noopener">Chrome 浏览器插件</a> </p><p>与 Pocket、Instapaper 等知名服务相比，界面简陋，且上手门槛较高。但在熟悉操作后，是一个能较好兼顾上述三个理想特性的工具。</p><ul><li><strong>跨平台：</strong> 提供了一个代理入口 <a href="https://via.hypothes.is/" target="_blank" rel="noopener"><code>https://via.hypothes.is/</code></a>，通过该入口访问网页后可以直接开始批注。</li><li><strong>可溯源：</strong>Hypothesis 在批注时不仅会记录批注内容，而且会通过多种方式记录批注在原文中的位置（下文将会详细解释），这使得即便网页内容发生较大变化，它仍然能准确定位。</li><li><strong>可迁移：</strong>Hypothesis 提供了完善的 API，可以结构化地导出所有批注数据。此外，Hypothesis API 还有一个半官方的网页前端 <a href="https://jonudell.info/h/facet/" target="_blank" rel="noopener">Facet</a>，可以搜索满足特定条件的批注，并导出为 HTML、CSV 等格式。</li></ul><p>获取API token</p><blockquote><p>Hypothesis 官网注册账号，完成注册并登录后，点击页面右上角的齿轮图标，选择「<a href="https://hypothes.is/account/developer" target="_blank" rel="noopener">Developer</a>」，生成自己账号对应的 <strong>API token</strong>，留存备用。</p></blockquote><h1 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h1><ul><li><p>选中网页上任意文本，页面就会弹出一个工具列，允许你选择将这段文本高亮（highlight）或添加批注（annotate）；<strong>批注功能支持 Markdown 语法、LaTeX 公式和添加标签（tag）</strong>。</p><p>注意到面板顶部的「Public」字样，这代表批注内容将被存放在一个公开的分组（group）中，其他 Hypothesis 用户在批注相同网页时将可以看到你的用户名和批注。如果对此介意，可以点击并切换到「Private」分组。你也可以根据自己的整理需要，创建任意名称的分组。</p></li><li><p>Hypothesis 主界面会显示近期批注过的网页；点击标题将其展开，即可看到各条批注，并进行跳转到原文、编辑、链接分享等操作。你也可以通过页面顶部的搜索框根据内容、分组、URL、标签等条件搜索批注。</p></li><li><p>Hypothesis 官网的检索功能比较简陋，也没有提供批量导出功能。对此，最简单的解决方案是使用前面提到的 <a href="https://jonudell.info/h/facet/" target="_blank" rel="noopener">Facet</a> 工具。</p><p>访问该工具页面后，在左上角的「User」框中填入自己的 Hypothesis 用户名，并在左下角的「Hypothesis API token」框中填入之前生成的 API token，然后根据需要填写其他检索条件（留空则默认显示近期批注页面），就可以在页面右侧看到实时更新的检索结果。如果需要批量导出，可以点击「CSV」或「JSON」按钮获得相应格式的数据，然后用 Excel 等工具进一步处理即可。</p></li><li><p>对于具有较高保存价值的网页，先用 <a href="https://archive.org/web/" target="_blank" rel="noopener">Wayback Machine</a> 等工具创建快照副本，再用 Hypothesis 对副本做批注，会是更稳妥的做法。</p></li></ul><h1 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h1><h2 id="自动备份标注到-Obsidian-笔记库"><a href="#自动备份标注到-Obsidian-笔记库" class="headerlink" title="自动备份标注到 Obsidian 笔记库"></a>自动备份标注到 Obsidian 笔记库</h2><ul><li>每个网页生成一个文件，存在专门的文件夹中</li><li>meta 中记录网页标题、链接、创建和更新时间</li><li>以列表的方式整理标注，并保持原文中的顺序，其中 Page Note 放最前面</li><li>区分原文和我自己写的笔记</li><li>Hypothesis 的每个标注可以添加标签，若有标签，以 <code>[[标签名]]</code> 名的方式接在标注文本后面</li></ul><p>脚本：<a href="https://github.com/skyue/script/blob/main/hydown.py" target="_blank" rel="noopener">hydown.py</a> </p><h2 id="自动分享内容到博客"><a href="#自动分享内容到博客" class="headerlink" title="自动分享内容到博客"></a>自动分享内容到博客</h2><ul><li>对想分享的内容创建一个 Page Note 并打上 <code>hypothesis</code> 标签</li><li>把带有 <code>hypothesis</code> 标签的内容，自动发布到 typecho 博客</li></ul><p>脚本：<a href="https://github.com/skyue/script/blob/main/hypublish.py" target="_blank" rel="noopener">hypublish.py</a> </p><h2 id="使用-crontab-本地自动执行上述两个脚本"><a href="#使用-crontab-本地自动执行上述两个脚本" class="headerlink" title="使用 crontab 本地自动执行上述两个脚本"></a>使用 crontab 本地自动执行上述两个脚本</h2><p>crontab定时操作</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">30 </span><span class="number">10</span> * * * /<span class="keyword">usr</span>/local/bin/python3 ~/script/hydown.py</span><br><span class="line"><span class="symbol">30 </span><span class="number">7</span> * * * /<span class="keyword">usr</span>/local/bin/python3 ~/script/hypublish.py</span><br></pre></td></tr></table></figure><h1 id="订阅公开"><a href="#订阅公开" class="headerlink" title="订阅公开"></a>订阅公开</h1><ul><li><strong>Atom</strong>: <code>https://hypothes.is/stream.atom?user=paulallison</code></li><li><strong>RSS:</strong> <code>https://hypothes.is/stream.rss?user=paulallison</code></li><li><strong>Atom:</strong> <code>https://hypothes.is/stream.atom?tags=edu305</code></li><li><strong>RSS:</strong> <code>https://hypothes.is/stream.rss?tags=edu305</code></li><li><strong>Atom:</strong> <code>https://hypothes.is/stream.atom?uri=http://www.theatlantic.com/politics/archive/2015/07/tanehisi-coates-between-the-world-and-me/397619/</code></li><li><strong>RSS:</strong> <code>https://hypothes.is/stream.rss?uri=http://www.theatlantic.com/politics/archive/2015/07/tanehisi-coates-between-the-world-and-me/397619/</code> </li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://sspai.com/post/63033" target="_blank" rel="noopener">开源、可定制的网页批注工具——Hypothesis</a> </p><p><a href="https://www.skyue.com/22012820.html" target="_blank" rel="noopener">Hypothesis 教程：一款免费好用的网页标注工具</a> </p><p><a href="https://web.hypothes.is/help/atom-rss-feeds-for-annotations/" target="_blank" rel="noopener">Atom &amp; RSS Feeds for Annotation</a> </p>]]></content>
    
    <summary type="html">
    
      网页记录标注工具Hypothesis
    
    </summary>
    
    
      <category term="效率" scheme="https://hellolinux.xyz/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="效率" scheme="https://hellolinux.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="Hypothesis" scheme="https://hellolinux.xyz/tags/Hypothesis/"/>
    
  </entry>
  
  <entry>
    <title>经济篇-美国升息QT解读（笔记）</title>
    <link href="https://hellolinux.xyz/posts/fa2bb907.html"/>
    <id>https://hellolinux.xyz/posts/fa2bb907.html</id>
    <published>2022-04-11T11:41:39.000Z</published>
    <updated>2022-04-11T11:41:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Debt/GDP，目前的数值来到了1940年代的同期高点，意思就是信用透支比较严重，目前要做的就是减少这个比值。</p><p><img data-src="../images/debtgdp.png" alt=""> </p><p>GDP = 消费者消费 + 政府开支 + 投资 + 进出口</p><p>加税就会减少消费，减低债务就会减少政府开支，美国进出口本身贸易赤字。</p><p><strong>美国总策略</strong> </p><p>目前采用的策略就是金融抑制，意思就是 利息压低到低于通膨，造成负利息，减少债务压力。</p><p>美国目前的策略是采用升息和QT的方式，金融机构预测年底利息达到1.7%，缩表计划是每个月 国债60b，MBS 35b，这里的国债和MBS是采用到期不再投资的方式缩表。</p><p>美国目前的实际利息为-7%。</p><p>政府采用的策略本身就会造成通膨，这些政府是知道的，因为在1940-1950已经证明了。</p><p><strong>如果持有现金意味着你的资产在贬值，投资的时候需要注意。</strong> </p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.usdebtclock.org/" target="_blank" rel="noopener">https://www.usdebtclock.org/</a></p><p><a href="https://www.longtermtrends.net/us-debt-to-gdp/" target="_blank" rel="noopener">https://www.longtermtrends.net/us-debt-to-gdp/</a></p><p><a href="https://www.youtube.com/watch?v=T9SSZ9ATu84&amp;ab_channel=C%26KGO%21" target="_blank" rel="noopener">https://www.youtube.com/watch?v=T9SSZ9ATu84&amp;ab_channel=C%26KGO%21</a> </p>]]></content>
    
    <summary type="html">
    
      美国升息QT解读
    
    </summary>
    
    
      <category term="经济" scheme="https://hellolinux.xyz/categories/%E7%BB%8F%E6%B5%8E/"/>
    
    
      <category term="经济" scheme="https://hellolinux.xyz/tags/%E7%BB%8F%E6%B5%8E/"/>
    
  </entry>
  
  <entry>
    <title>如何快速了解一个行业</title>
    <link href="https://hellolinux.xyz/posts/2cb602d0.html"/>
    <id>https://hellolinux.xyz/posts/2cb602d0.html</id>
    <published>2022-04-10T04:09:17.000Z</published>
    <updated>2022-04-10T04:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>可以先上麦肯锡网站大概了解下</p><p>然后整体框架</p><ul><li>1.行业整体情况，marketcap size，过去几年成长怎样，市场规模、变化趋势、影响因素</li><li>2.竞争对手、互补型。</li></ul><p><strong>波特五力模型</strong></p><p>潜在进入者、供应商（供方议价能力）、顾客（买方议价能力）、替代员（替代品威胁）、<strong>直接竞争对手能力</strong></p><p>进入难度和壁垒 竞争优势</p><ul><li>3.公司自身 产业的位置</li></ul>]]></content>
    
    <summary type="html">
    
      如何快速了解一个行业
    
    </summary>
    
    
      <category term="效率" scheme="https://hellolinux.xyz/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="效率" scheme="https://hellolinux.xyz/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>Teasure DAO介绍</title>
    <link href="https://hellolinux.xyz/posts/e3521121.html"/>
    <id>https://hellolinux.xyz/posts/e3521121.html</id>
    <published>2022-04-09T06:09:17.000Z</published>
    <updated>2022-04-09T06:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Treasure DAO 衍生于现象级 NFT 项目 Loot 生态，从项目叫做 Treasure NFT（也就是Loot仿盘）开始，因为 Loot 的大火，Treasure NFT 趁热打铁有了一定的社区规模之后，推出了挖矿机制。用户可以将持有的 Loot、MAGIC-ETH LP 代币、AGLD、the n project 和 Treasure NFT 存入合约挖 $Magic。除了 Loot 本身的热度以外，Treasure NFT 也在通过其他 Loot 生态中的热门项目进行引流，进而发展成了现在的 Treasure DAO 生态。</p><p>treasure由treasureDAO治理，是一个nft发射平台，它有自己的游戏和游戏里的NFT（角色+装备），也可以和别的NFT合作。，treasure的一个生态模式是：<strong>magic代币+nft+gamefi，</strong> 为众多封闭的 NFT 提供桥梁，连接到游戏和元宇宙。</p><p>主要组成部分：magic代币、宝物（可以生成新资源的魔法物品）、军团/玩家。</p><p>这三者有内在关系，MAGIC提供游戏世界的动力；Treasures宝物是玩家用来达成目的的资源；玩家进行游戏活动需要MAGIC和Treasures宝物，也赋予它们用途。</p><p>magic是由新资源产生，为了生成新资源，需要同时拥有特定的宝物和抵押MAGIC代币才能完成。而这些新产生的资源，有更大的机会捕获更多的MAGIC。magic和宝物之间有相互支撑的关系，此外，magic还用于购买角色NFT、宝物等，有支付媒介的作用。</p><p>Magic是通用货币，Treasure NFT是核心资源，Legion NFT是核心英雄</p><p>magic也有燃烧机制，不管是用来购买宝物、炼金锻造，还是用来生成新资源，都会消耗magic，这也保证了magic代币的价值。</p><p><strong>角色有NFT，物品有NFT</strong>，这就形成了treasure的游戏NFT市场，除了自己游戏的NFT，还有合作项目的NFT，可以用magic买，甚至有些NFT可以在不同游戏里都能通用。内部<a href="https://marketplace.treasure.lol/" target="_blank" rel="noopener">Curated NFT市场</a> ，外部开放市场Trove。</p><p>TreasureDAO的NFT市场，手续费的5%归属于DAO财库（好几百万MAGIC），Q2推出以ETH结算的Trove NFT交易市场，质押MAGIC可获得平台手续费分红，手续费分红比例为行业最高的100%。通过Trove市场，TresureDAO可以捕获ETH的交易费用，充实DAO财库并让DAO财库的资产多样化，对MAGIC的价值实现更多支撑。</p><p>将Magic LP包装为Token，变成生态系统中的重心引力，稳定整个系统的代币经济模型，还可以用LP Token在游戏中获取超额收益，弥补无常损失。跟OHM合作，提供流动性，主要未来防止币价剧烈波动。</p><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><p>日活近万</p><p>除了已经上线的Bridgeworld之外，Smolverse、LIFE、BattleFly、Peek-A-Boo等一批项目将于近期陆续发布。BridgeWordQ1发布V1，同时持续开发和融合NFT项目brain, body, life、Mushrohms、EtherOrcs等</p><p><strong>重要时间节点：</strong></p><p>2022 Q1 BridgeWord发布V1</p><p>2022 Q2 推出Trove NFT市场</p><p>2022 Q3~Q4 BridgeWord发布V2</p><p><strong>BattleFly 是一个使用 TreasureDAO $MAGIC 代币作为主要货币的 PvP/P2E GameFi 项目。</strong> </p><p>多链：未来可能会在Cosmos开发Treasure/Magic链，变成多链生态。</p><ul><li><p>Legions，分为创世和普通两个系列，免费空投给早期用户结束，是未来平台游戏BridgeWorld的英雄和主要资产，可以升级</p></li><li><p>smol brains，小，Q2繁殖小猴挖Magic，Q2发币$SmolCoin，已空投，很快会空投背包和Pet，马上图片数据永久上链Arweave</p></li><li><p>Body，smolverse第二个NFT，质押长肌肉，utility和brains类似，未来会空投</p></li></ul><h1 id="代币"><a href="#代币" class="headerlink" title="代币"></a>代币</h1><p>流通量：已挖出1.6亿，已释放1.3亿，80%质押中，其中约4千万将于1月24号解锁，有一定抛压。Magic已经被抹茶强上L1的代币，但主要流动性还是在Sushi L2上。</p><p>2022.4.8 总量3.5亿，流通4536万，价格3.11，市值1.4亿，FDV 10.7亿， 2022.2.19ATH 6.32 ，2021.10.7 ATL 0.019，OKX、MEXC sushi（arbitrum）。</p><p>玩家可以通过玩游戏、挖矿和参与Bridgeworld来赚取 MAGIC。MAGIC的发行机制和比特币很相似，挖矿产出数量每年减半一次。</p><ul><li><p>Treasure挖矿：33%，1.15亿枚</p></li><li><p>挖矿：25%，8700万枚</p></li><li><p>流动性：17%，5950万枚</p></li><li><p>生态基金：15%，5250万枚</p></li><li><p>团队：10%，3500万枚</p></li></ul><p><strong>投资机构：</strong> 1KX（Axie创始人之一）</p><p><strong>团队背景：</strong> 核心人员John为Cosmos上最大TVL的DEX Osmosis的增长负责人，Jumpman为主要顾问，团队目前20人左右</p><p><strong>早期参与方式：</strong></p><p>1、质押MAGIC挖矿获得MAGIC</p><p>2、质押MAGIC获得NFT，加快挖矿速度</p><p>3、通过生态内游戏Bridgeworld、Life等赚取MAGIC</p><p>4、质押Legion系列NFT和Treasure NFT赚取MAGIC</p><h1 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h1><p>官网：<a href="https://www.treasure.lol/" target="_blank" rel="noopener">https://www.treasure.lol/</a><br>DIS：<a href="https://discord.com/invite/treasuredao" target="_blank" rel="noopener">https://discord.com/invite/treasuredao</a><br>推特：<a href="https://twitter.com/Treasure_DAO" target="_blank" rel="noopener">https://twitter.com/Treasure_DAO</a><br>白皮书：<a href="https://docs.treasure.tools/" target="_blank" rel="noopener">https://docs.treasure.tools</a> </p><p>BridgeWorld白皮书社区首发：</p><p> <a href="https://treasuredaocn.notion.site/76352682184149e4aef1d6b955e53e90?v=f7eb85128b7c4a848329378832e73d0f" target="_blank" rel="noopener">https://treasuredaocn.notion.site/76352682184149e4aef1d6b955e53e90?v=f7eb85128b7c4a848329378832e73d0f</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>跟OHM合作，借用流动性，NFT、LP交易费用等给国库提供更多流动性。</p><p>生成新的资源需要消耗待，代币燃烧。</p><p>创世NFT，MAGIC可以享有治理权和收获奖励。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://mirror.xyz/98kdao.eth/NOIYM__J3uEyAOUFGzoA7AAlABaCJP6IuKaaLTQnFb8" target="_blank" rel="noopener">https://mirror.xyz/98kdao.eth/NOIYM__J3uEyAOUFGzoA7AAlABaCJP6IuKaaLTQnFb8</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMzI2OTA5NA==&amp;mid=2651541041&amp;idx=1&amp;sn=d7b03973ee6bd0626f4df428811b4f54&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzIwMzI2OTA5NA==&amp;mid=2651541041&amp;idx=1&amp;sn=d7b03973ee6bd0626f4df428811b4f54&amp;scene=21#wechat_redirect</a></p><p><a href="https://mirror.xyz/0xCe6fde8581C110B429DfD6B5ECa2658284612cbc/o8gTAt2Ce1f_HnLcjxUfT6FIog-l_6AvN01v7AhQZvo" target="_blank" rel="noopener">https://mirror.xyz/0xCe6fde8581C110B429DfD6B5ECa2658284612cbc/o8gTAt2Ce1f_HnLcjxUfT6FIog-l_6AvN01v7AhQZvo</a></p>]]></content>
    
    <summary type="html">
    
      L2上Teasure DAO介绍
    
    </summary>
    
    
      <category term="区块链" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="gamefi" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/gamefi/"/>
    
    
      <category term="gamefi" scheme="https://hellolinux.xyz/tags/gamefi/"/>
    
      <category term="magic" scheme="https://hellolinux.xyz/tags/magic/"/>
    
  </entry>
  
  <entry>
    <title>Web3入门及个人文章汇总</title>
    <link href="https://hellolinux.xyz/posts/a0f7a969.html"/>
    <id>https://hellolinux.xyz/posts/a0f7a969.html</id>
    <published>2022-04-07T07:09:17.000Z</published>
    <updated>2022-04-07T07:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web3入门"><a href="#web3入门" class="headerlink" title="web3入门"></a>web3入门</h1><p>如何学习Web3？</p><p><a href="https://www.theblockbeats.info/news/30027" target="_blank" rel="noopener">https://www.theblockbeats.info/news/30027</a></p><h1 id="求职"><a href="#求职" class="headerlink" title="求职"></a>求职</h1><p><a href="https://cryptocurrencyjobs.co/" target="_blank" rel="noopener">https://cryptocurrencyjobs.co/</a></p><h1 id="Reading"><a href="#Reading" class="headerlink" title="Reading"></a>Reading</h1><p><a href="https://cdixon.mirror.xyz/TNOgrQGh_xUnBVO7wuYB-NMajrc3_0zN20-XznJRKlk" target="_blank" rel="noopener">收集web3 twitter线程</a> </p><h1 id="文章汇总"><a href="#文章汇总" class="headerlink" title="文章汇总"></a>文章汇总</h1><p>截止到2022-4-16 notion页面</p><p><a href="https://hellolinuxlab.notion.site/71ee11cb1c9d4925b38be587df670c02?v=ea1e982d924a48a99bc69e4f0d1c14d7" target="_blank" rel="noopener">https://hellolinuxlab.notion.site/71ee11cb1c9d4925b38be587df670c02?v=ea1e982d924a48a99bc69e4f0d1c14d7</a></p>]]></content>
    
    <summary type="html">
    
      Web3入门、求职等
    
    </summary>
    
    
      <category term="区块链" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="web3" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/web3/"/>
    
    
      <category term="web3" scheme="https://hellolinux.xyz/tags/web3/"/>
    
  </entry>
  
  <entry>
    <title>Defi世界-算法稳定币介绍</title>
    <link href="https://hellolinux.xyz/posts/22e44a8f.html"/>
    <id>https://hellolinux.xyz/posts/22e44a8f.html</id>
    <published>2022-04-06T09:09:17.000Z</published>
    <updated>2022-04-06T09:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>由于2017年的禁令ICO，导致很多国家不能直接用法币直接购买虚拟货币，在这种情形下产生了对稳定币的需求，也就有了之后的USDT、USDC、DAI，这三个算比较典型且相对稳定。</p><p>USDT和USDC是由法币美元背书，1美元抵押mint1USDT或USDC，但是后面很多人发现USDT的背后抵押存在问题，存在一定暴雷风险，意思就是背后没有足够的抵押物，但是它是最近进入市场，占领较大分隔，跟很多生态已经绑定，仅仅只是怀疑，没有放弃使用。</p><p>而对于DAI，就是ETH做抵押，而且是超额抵押，算是区块链世界自己的稳定币，主要是因为USDC和USDT为了监管原因，在合约中设置了开关，能够对每个地址进行block，类似银行系统的冻结。</p><p><strong>稳定币三大类</strong></p><ul><li><p>中心化机构用法币1：1抵押发行的锚定型稳定币（USDT、USDC等）</p></li><li><p>去中心化的超额抵押型稳定币（DAI、MIM等）</p></li><li><p>算法平衡型的算法稳定币（UST、FRAX等）</p></li></ul><p>稳定币按照其是否存在抵押可以分为超额抵押稳定币（如DAI），全额抵押稳定币（如USDT），部分抵押稳定币（如FRAX），以及算法稳定币（无抵押，如AMPL）而按照其锚定的对象可以分为法币锚定稳定币（锚定1美元），以及非法币锚定稳定币（锚定目标会不断变化）。</p><h1 id="算稳"><a href="#算稳" class="headerlink" title="算稳"></a>算稳</h1><p>算稳的要求：高稳定性（购买力稳定）、低波动（价格稳定）、高流动性、低治理（少干预）。</p><p>双币：UST、FRAX、ESD</p><p>三币：basis cash</p><p>套利：Terra、Float、Fei</p><p><strong>抵押分类</strong></p><ul><li><p>无抵押：AMPL、BASE、ESD</p></li><li><p>有抵押：Frax、Terra、Float、Fei、RAI</p></li></ul><blockquote><p>AMPL：rebase，死亡螺旋，不是ERC20，没有什么应用</p><p>ESD：改良版，博弈，水下打折</p><p>DAI和FEI，需要抵押物来调整流动性，进而稳定币价。利用抵押资产进行回收/释放流动性来维持币价稳定性。FEI本质只是对makerDAO的一个改良版本。</p></blockquote><h2 id="AMPL"><a href="#AMPL" class="headerlink" title="AMPL"></a>AMPL</h2><p>无抵押，纯粹看市场需求去调整自己的供给，维持购买力的稳定，即所谓的“弹性供给机制“。</p><p>AMPL最大得特点是购买力较稳定，但是由于其rebase机制，最后往往价格一段时间波动较大。就目前来看，使用率上较低。</p><p><strong>弹性供应的数字货币：</strong></p><p>AMPL超过1U，就会增发，把价格打回1U；AMPL价格跌破1U，就会通缩，把价格拉回1U。</p><blockquote><p>当增发的时候，由于市场的滞后性，价格是不会立刻修正的，而这个时候持有人的币又增加了，变成持有人币多价涨的双重获利情况，这极大的刺激持有人继续持有，跟吸引新资金的进入。只要共识没有破灭，市值的成长会倍数于资金的流入。但是反过来，当币价跌破1的时候，就会出现通缩，此时对于持有人来说面临币少价跌的双重亏损情况，这会极大的刺激持有人卖出，遏制新资金的进入。</p></blockquote><p>这个机制设置的就是被机制诱导出来的Fomo情绪。</p><h2 id="BASE主要做了两点改变"><a href="#BASE主要做了两点改变" class="headerlink" title="BASE主要做了两点改变"></a>BASE主要做了两点改变</h2><ul><li><p>把Rebase的分级调整改为立刻调整，就变成了加速版的AMPL，带给人极大的刺激。</p></li><li><p>锚定加密市场的市值带来更大的波动性，而波动性使得Rebase更加频繁剧烈，加剧了博弈。</p></li></ul><h2 id="ESD-Empty-Set-Dollar"><a href="#ESD-Empty-Set-Dollar" class="headerlink" title="ESD - Empty Set Dollar"></a>ESD - Empty Set Dollar</h2><p>ESD它的形态介于1代AMPL与2代Basis Cash之间，所以我们定义为1.5代，改进如下：</p><ul><li><p>Rebase后，如果是增发代币的，增发的代币不是像AMPL一样直接平均分发给AMPL的持有人。ESD持有人需要质押才能获得新增发的ESD。有两种质押模式，质押单币ESD进DAO，DAO会获得新分配的ESD的77.5%，解锁需要15个epoch（5天）；或者质押ESD-USDC-LP进LP Reward Pool，该池子会获得新分配ESD的20%，解锁需要5个epoch。（1epoch=8hours）。</p><blockquote><p>ESD持有人通过提供流动性，或者降低自己的流动性，才能获得奖励，不是“不劳而获”，这样降低了抛压，提高了ESD的稳定性。并且Uniswap的ESD-USDC池中的ESD数量不会受到Rebase影响，更容易驱动正循环。</p></blockquote></li><li><p>Rebase后，如果是需要通缩的，不进行通缩，通过债券的方式吸收市场上多余的流动性，这些多余的流动性买入Coupon，而Coupon对于购买人的价值在于当ESD重新增发的时候，会优先分配给Coupon的持有人。</p><p><strong>Coupon是有一个月的时限的，当时限到了之后没有进行增发就会作废。尽管社区认为这是一个阻碍用户进入的机制。但是对于系统来说，这也是另外一种程度的修正。</strong></p><p><strong>债券这种模型实际上是用未来的收益填补现在的亏空。债券购买人通过牺牲自己的流动性拯救系统的亏空，并且获得未来的奖励。</strong></p></li></ul><p>Basis的设计里面被人诟病一点就是，当遇到极端行情的时候，通缩再通缩时，如果产生大量的债券，系统可能无法靠自我修复产生正向的Rebase去填补这些债券的亏空。大量的亏空会使新入场的资金觉得恐慌。给债券一个Dead Time或许是一个方法。</p><p>ESDS 作为治理 Token 和铸币权份额（Seigniorage Shares） ，ESD 将作为单纯的稳定币。</p><p>其中，ESD 总是可以从储备中以 1 USDC 铸造，也可以被销毁兑换为 RR USDC （RR 为当前储备金比率，上限为 1.00）。</p><p>ESDS 可以通过储备购买，并可在储备管理收益、储备投资增长以及目标 RR 降至 1.00 ‌下方后， 在 ESD 发行收入导致 RR 高于目标值时将其烧毁，如果 RR 低于目标值，则可以铸造 ESDS 并出售。</p><blockquote><p>总的来说最后由于改革没有通过，项目走向没落。</p></blockquote><h2 id="Basis-Cash-第二代的算法稳定币"><a href="#Basis-Cash-第二代的算法稳定币" class="headerlink" title="Basis Cash 第二代的算法稳定币"></a>Basis Cash 第二代的算法稳定币</h2><p>Basis Cash协议包括三个代币（Basic Cash(BAC)，Basis Share(BAS)，Basis Bond），Basis Share和Basis Bond旨在将Basis Cash朝1美元的价格移动。它用三种代币实现通胀和通缩：BAC 对标现实生活中的美元，BAS 对标拥有美联储投票权和分红权的股票，BAB 对标美元债券，同时针对 ESD 债券设计导致的僵持问题引入了债券分红。</p><p>当Basis Cash的交易价格低于1美元时，用户将能够以BAC*BAC的价格购买Basis Bonds债券，以此来保证BAC价格的稳定。购买的债券在BAC的价格高于1美元时可以以1：1的比例赎回。</p><p>当Basis Cash的交易价格高于1美元时，合约将先通过赎回Basis Bonds债券以调节BAC的价格，若此时BAC的价格仍然高于1美元，合约将会铸造新的BAC，优先赎回BAB，然后分配给质押BAS在Boardroom的用户。</p><p>质押BAS是可以获得增发的BAC奖励的</p><ul><li><p>持有BAC做市（YFI）产出BAS；</p></li><li><p>持有BAS质押分（存入稳定币产出YFI）红BAC。</p></li></ul><p>另一面由于BAB=BAC<em>BAC，当BAC的价格超跌时会产生极大的套利空间。这种套利空间会遏制BAC的下跌。以上我们称之为“梯云纵2.0”。*</em>Basis Cash这样的自反馈增强设计吸引了非常多的投机玩家。**</p><p>当然这其中会有一层隐含的风险，是BAB的套利空间越大，就意味着系统产生的亏空越大，需要后续进入的资金越多，当系统套利亏空过大时，系统可能跟ESD一样无法自我修复。</p><p>所有的算法稳定币的<a href="https://wiki.mbalib.com/wiki/%E6%88%B4%E7%BB%B4%E6%96%AF%E5%8F%8C%E6%9D%80%E6%95%88%E5%BA%94" target="_blank" rel="noopener">戴维斯双击（杀）效应</a>都特别厉害，所有都需要强共识去支撑起来正循环，或者是有大庄通过强势资金行为做情绪的扭转。</p><h2 id="FRAX"><a href="#FRAX" class="headerlink" title="FRAX"></a>FRAX</h2><p>fractional-algorithmic 部分抵押算法型稳定币，主要靠套利来维持 Token 价格稳定，因此相对于前面三代“凭空印钱”的风格，要稳定许多。 与 CRV、Sushi 、Convex合作。</p><p>FXS 的供应量最初设定为 1 亿个代币，但流通量可能会出现通缩，因为 FRAX 是以更高的算法比率铸造的。该协议的设计使得只要 FRAX 需求增长，FXS 的供应就会在很大程度上出现通缩。 FXS代币的价值取决于市场对FRAX的需求，FXS市值是FRAX市值的无抵押价值的总和，目前为止数量在1亿左右，锁定了4400个FXS，平均锁定年限1.74年，APR10%，市值为29亿美金，Fra的抵押率为85.25%。</p><p><strong>PID 控制算法等更加复杂的机制，且由于初期的抵押铸造、赎回与套利机制：</strong></p><ul><li><p>如果FRAX的交易价格高于1美元，该协议将降低抵押品比率，如果FRAX的交易价格低于1美元，协议将提高抵押品比率。</p></li><li><p>链上预言机：使用Uniswap（ETH, USDT, USDC时间加权平均价格TWAP）和Chainlink（美元计价价格）来做价格预言机。</p></li><li><p>双代币模型：FRAX是稳定币，目标是紧随1美元/枚左右。Frax Shares (FXS)是治理型代币，用于收取手续费用、铸币税收入和超额抵押品增值。</p></li></ul><blockquote><p>协议中的抵押率Refresh函数每小时调用一次。当FRAX高于1美元时，Refresh函数将抵押品比率降低0.25%；当FRAX的价格低于1美元时，该函数将抵押率提高0.25%。刷新率和刷新Step参数都可以通过后期治理进行调整。</p><p>例如，在98%的抵押率下，每铸造一个FRAX需要0.98美元的抵押品和燃烧0.02美元FXS，在97%的抵押比率下，每铸造一枚FRAX需要0.97美元的抵押品和燃烧的0.03美元的FXS。</p></blockquote><p>2020 年 5 月，该协议现在允许 FXS 持有者锁定 FXS 代币以生成 veFXS 并获得特殊提升、特殊治理权和 AMO 利润。 veFXS能够LP farming加速（sushi onsen）。</p><p>随着 USDC 抵押率的逐步下降，FXS 的抵押率逐步上升，Frax 会“越来越像”前面三代的算法稳定币，届时会对系统的可靠性提出新的挑战。 铸造FRAX需要放入适当比例的抵押资产和烧掉对应的FRAX权益(FXS)。</p><p>FRAX在 IDEX v3 market（matic）<br>FRAX在moonbeam上<br>FRAX在EVMOS上<br>$GLMR/FRAX and $FXS/FRAX farming is now live at <a href="https://dex.zenlink.pro/#/earn/stake" target="_blank" rel="noopener">https://dex.zenlink.pro/#/earn/stake</a> </p><h2 id="其他新算稳"><a href="#其他新算稳" class="headerlink" title="其他新算稳"></a>其他新算稳</h2><h3 id="Abracadabra-money-DeFi-协议及其原生-SPELL（MIM）"><a href="#Abracadabra-money-DeFi-协议及其原生-SPELL（MIM）" class="headerlink" title="Abracadabra.money DeFi 协议及其原生 SPELL（MIM）"></a>Abracadabra.money DeFi 协议及其原生 SPELL（MIM）</h3><p>Abracadabra 的原生 Magic Internet Money 稳定币，从借贷协议中产生的，跟Maker DAO的区别在于它瞄准的是长尾部分的资产。它是通过在 DeFi 协议上存入有息资产来完全质押和铸造的。MIM目前在Curve上算排在前面的池子。</p><h3 id="Wonderland-TIME"><a href="#Wonderland-TIME" class="headerlink" title="Wonderland(TIME)"></a>Wonderland(TIME)</h3><p>Wonderland(TIME)是 Avalanche（雪崩协议）上的第一个去中心化储备货币应用，旨在通过特定算法创建一种由一揽子加密资产支持的自由浮动储备货币TIME。Wonderland其实是另一个算法稳定币OlympusDAO（OHM）的分叉项目，也是Daniele和他的匿名团队的系列项目。</p><p>每个TIME都由 Wonderland 金库中的一篮子加密资产支持，包括单一Token和LP Token对。</p><p>其中，单一Token资产包括MIM、wAVAX（雪崩协议原生通证AVAX封装资产）；LP Token对资产包括TIME-MIM、TIME-AVAX等。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>创新是价值，传递创新也是一种价值。</p><p>需要由人用，这个是算法稳定币最重要的。</p><p>稳定币都想做一个跨链的币，都想多样化自己的抵押物。</p><p>后续应该还会出现新的稳定币，至少在元宇宙领域会出现在元宇宙里面使用的货币。现在大家买NFT等虚拟资产都是以其它货币进行结算，在什么平台就用什么结算，其实就没一种价值的体现，对一种价值稳定的货币是必须的。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.youtube.com/watch?v=E61USVG1A7I&list=PLh7yM-DPEDYhb_wYF1cDYIoGregYlczDT&index=17&ab_channel=mrblock%E5%8D%80%E5%A1%8A%E5%85%88%E7%94%9F" target="_blank" rel="noopener">去中心化穩定幣的歷史</a></p><p><a href="https://www.youtube.com/watch?v=7dBc-nrWNMg&ab_channel=BobJiang" target="_blank" rel="noopener">算法稳定币总览</a></p><p><a href="https://cryptoyc.medium.com/%E7%A0%94%E7%A9%B6-ampl-%E7%AE%97%E7%A8%B3%E5%B1%8A%E4%B8%AD%E7%9A%84%E5%A7%8B%E7%A5%96%E5%B7%A8%E4%BA%BA-7be181925212" target="_blank" rel="noopener">AMPL, 算稳届中的始祖巨人</a></p><p><a href="https://www.yi6g.com/lian/15017.html" target="_blank" rel="noopener">AMPL、ESD 和 Basis 等的自救征程</a></p><p><a href="https://docs.frax.finance/" target="_blank" rel="noopener">https://docs.frax.finance/</a></p><p><a href="https://app.frax.finance/" target="_blank" rel="noopener">https://app.frax.finance/</a></p><p><a href="https://www.matataki.io/p/6506" target="_blank" rel="noopener">Frax: 部分（抵押）算法稳定币</a></p><p><a href="https://mirror.xyz/0x633653A579959D7e2C0331A4d0Ef0D114Fd47aA4/Hamsb5C9YsQCL705O4s3UeccE7CSR--ueSuciGnMdT4" target="_blank" rel="noopener">攻占DeFi三大场景</a></p><p><a href="https://mirror.xyz/0xe41A72239b37e72a5daAa1C7fA1d32C31B3f87Dd/BG-w6SxHEHekUWNX-iN8z0GHMuyLngI5Xdl2J2Kat80" target="_blank" rel="noopener">算法稳定币赛道分析</a> </p>]]></content>
    
    <summary type="html">
    
      介绍主要算法稳定币的发展
    
    </summary>
    
    
      <category term="区块链" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="稳定币" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/%E7%A8%B3%E5%AE%9A%E5%B8%81/"/>
    
    
      <category term="defi" scheme="https://hellolinux.xyz/tags/defi/"/>
    
      <category term="稳定币" scheme="https://hellolinux.xyz/tags/%E7%A8%B3%E5%AE%9A%E5%B8%81/"/>
    
      <category term="ampl" scheme="https://hellolinux.xyz/tags/ampl/"/>
    
      <category term="esd" scheme="https://hellolinux.xyz/tags/esd/"/>
    
      <category term="frax" scheme="https://hellolinux.xyz/tags/frax/"/>
    
      <category term="basis" scheme="https://hellolinux.xyz/tags/basis/"/>
    
  </entry>
  
  <entry>
    <title>cosmos生态-2022年的COSMOS</title>
    <link href="https://hellolinux.xyz/posts/b7666ffc.html"/>
    <id>https://hellolinux.xyz/posts/b7666ffc.html</id>
    <published>2022-04-06T03:09:17.000Z</published>
    <updated>2022-04-06T03:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.cosmos.network/cosmos-2021-a-look-back-on-an-interstellar-year-60fc755588f7" target="_blank" rel="noopener">cosmos的2021</a> 。Cosmos Hub 将在 2022 年推出许多新功能，并计划至少每季度进行一次重大升级。如果您想深入了解技术细节并获取所有单独升级的规范，请查看GitHub 上的<a href="https://github.com/cosmos/gaia/blob/main/docs/roadmap/cosmos-hub-roadmap-2.0.md" target="_blank" rel="noopener">Cosmos Hub 路线图 2.0</a> 。如果您想要鸟瞰图，请在下面找到重要内容 - 以及为什么它对您很重要。</p><h1 id="跨链安全"><a href="#跨链安全" class="headerlink" title="跨链安全"></a>跨链安全</h1><p><a href="https://blog.cosmos.network/interchain-security-is-coming-to-the-cosmos-hub-f144c45fb035" target="_blank" rel="noopener">Interchain Security</a>目前由 Interchain Foundation 和<a href="https://informal.systems/2021/11/25/interchain-security/" target="_blank" rel="noopener">Informal Systems 开发</a>。这种共享安全服务允许 Cosmos 链有效地向彼此租用安全性，以便新链可以引导它们的经济，并且更大链上的验证者和委托人可以从该服务中获得奖励。更好的是，Interchain Security 将允许验证者和委托人通过在 Hub 上质押 ATOM 来获得多个代币的多个链上的奖励。新链将受益于强大的验证者安全集，并在早期阶段将其代币呈现在 Cosmos 社区成员面前。同时，Cosmos Hub 的质押者可以及早访问创新项目并提高其 ATOM 的实用性。</p><h1 id="跨链账户"><a href="#跨链账户" class="headerlink" title="跨链账户"></a>跨链账户</h1><p>跨链账户将登陆 Cosmos Hub，预计在 2022 年第一季度完成 Theta 升级。跨链账户对 Cosmos 生态系统有几个重大影响，其中之一是将 Cosmos DeFi 提升到一个新水平的能力。这是因为跨链账户允许生态链安全地控制其他生态链上的账户，而不是简单地将代币从一条链转移到另一条链。</p><p>考虑一下以太坊。复杂的金融工具通过一组智能合约无需许可地进行交易，每个智能合约都处理整个业务流程的一部分。在 Cosmos 生态系统中，智能合约不能立即相互访问，因为每个智能合约或应用程序本质上都是区块链本身。</p><p>使用 IBC，您可以在网络之间移动代币，但您无法像在以太坊上使用智能合约那样触发另一条链上的操作。跨链账户通过提供智能合约所需的可组合性和互操作性来改变这一切，从而在特定于应用程序的区块链中创造 DeFi 爆炸！</p><p>跨链账户还将使开发人员更容易与 IBC 连接，因为新链可以利用现有账户的功能和能力，而不必从头开始重新创建这些功能。你可以在这里阅读更多关于<a href="https://medium.com/chainapsis/why-interchain-accounts-change-everything-for-cosmos-interoperability-59c19032bf11" target="_blank" rel="noopener">跨链账户如何改变一切的信息</a>。</p><h1 id="流动质押"><a href="#流动质押" class="headerlink" title="流动质押"></a>流动质押</h1><p>由 Cosmos 核心贡献者和<a href="https://www.iqlusion.io/" target="_blank" rel="noopener">Iqulsion</a>创始人 Zaki Manian 牵头的第一版 Liquid Staking 最早将于 2022 年 2 月推出，并直接集成到 Cosmos SDK 中。Liquid Staking 的第一版将允许 ATOM 持有者发送交易，这些交易会立即将其绑定的 ATOM 转换为可用于流动性池和其他活动的可转让表示。这开辟了一个 DeFi 可能性的领域，允许持有者最大化他们的 ATOM，同时仍然获得 Staking 奖励。</p><p>在 V1 的 Liquid Staking 中，流动代币与委托人质押其 ATOM 的验证人绑定。然而，这种设计可能是限制性的并且不一定是理想的。这就是 Liquid Staking V2 迅速跟进的原因。<a href="https://stake.lido.fi/" target="_blank" rel="noopener">Lido</a>背后的 P2P 团队起草<a href="https://enchanted-direction-844.notion.site/Adding-CosmWasm-to-Cosmos-Hub-9f919489029e4c9b95478b67242d20bc" target="_blank" rel="noopener">了一份提案</a>，该提案将使 Liquid Staking 成为 Cosmos Hub 的重要组成部分。作为 Cosmos 最古老的验证者之一，P2P 为以太坊 2.0 开发了 Liquid Staking 解决方案，该解决方案允许人们质押他们的以太币，但同时使用它。Lido 现在拥有 ETH 2.0 中 90% 的质押以太币，并且还运行 Terra 流行的 Liquid Staking 实施 bLUNA。</p><p>没有智能合约很难实现 Liquid Staking，因此 Cosmos Hub 团队将 CosmWasm 添加到 Cosmos Hub，允许 Lido 创建此功能所需的智能合约。将来，在 Hub 上安装 CosmWasm 可以让它连接到任何链，并通过 IBC 通信管理他们的质押程序。这将把 Cosmos Hub 直接置于跨链的核心，并根据其价值和优势提高其可用性，成为Cosmos 生态系统中<a href="https://blog.cosmos.network/the-cosmos-hub-is-a-port-city-5b7f2d28debf" target="_blank" rel="noopener">真正的港口城市</a>。观看此空间以获取更多详细信息。</p><h1 id="IBC将成为“200链”的生态系统"><a href="#IBC将成为“200链”的生态系统" class="headerlink" title="IBC将成为“200链”的生态系统"></a>IBC将成为“200链”的生态系统</h1><p>2021 年是<a href="https://blog.cosmos.network/ibc-update-the-internet-of-blockchains-is-growing-fast-dae883228ebf" target="_blank" rel="noopener">IBC 进入市场</a>的一年，主要的 Cosmos 链形成了蓬勃发展的互联经济——明年还会有更多！由于 Cosmos 强大的技术堆栈和对开发人员友好的区块链框架（如带有 IBC 互操作性的 <a href="https://starport.com/" target="_blank" rel="noopener">Starport</a>）在 2022 年，IBC 的采用将非常出色。正如 Tendermint 首席执行官彭忠告诉<a href="https://cryptoslate.com/catching-up-on-the-cosmos-ecosystem-with-tendermint-ceo-peng-zhong/" target="_blank" rel="noopener">CryptoSlate</a>的那样，“我认为我们将很容易看到 200 条链通过 IBC 连接明年的这个时候，从长远来看，甚至是一百万。”</p><p>我们还将看到各种不同团队使用 IBC 将 Cosmos 连接到他们的生态系统的完成工作。在 2022 年，这意味着与比特币、Celo、Polkadot、Kusama、Harmony、Hyperledger Besu、Hyperledger Fabric 等的安全连接。这些主要区块链之间的资产自由流动将为可扩展性和增长创造巨大的机会——最后，一个具有低费用、高吞吐量和大量产品选择的 DeFi 公平竞争环境！</p><h1 id="Cosmos-DeFi-将爆发"><a href="#Cosmos-DeFi-将爆发" class="headerlink" title="Cosmos DeFi 将爆发"></a>Cosmos DeFi 将爆发</h1><p>随着 IBC 连接的更多流动性、跨区块链账户管理复杂交易的能力，以及连接主要生态系统释放流动性的桥梁，Cosmos DeFi 将会爆炸式增长。<a href="https://medium.com/emeris-blog/emeris-the-road-to-public-launch-1f0ca00b72d0" target="_blank" rel="noopener">Emeris</a>的公开发布将于 2022 年春季推出，并将带来许多备受期待的功能，包括用于投资组合可视化、数字资产管理和服务发现的高级功能。还将通过自动组合奖励来最大化奖励生成、跨链 DEX 聚合、空投跟踪器以及与 Emeris Web 仪表板无缝协作的浏览器扩展。</p><p><a href="https://app.osmosis.zone/" target="_blank" rel="noopener">Osmosis</a>还将在未来几个月发布其名为 Superfluid Staking 的 Liquid Staking 版本。这将允许 OSMO 持有者同时使用他们的代币进行质押和提供流动性，并确保协议的治理服务于流动性提供者的利益。</p><p>另一个在 DeFi 方面取得长足进步并努力将以太坊带入 Cosmos 的团队是<a href="https://evmos.org/" target="_blank" rel="noopener">Evmos</a>，“EVM-on-Cosmos”（以前称为 Ethermint）。Evmos 旨在成为 Cosmos 的 EVM 中心，使 EVM 智能合约可以轻松地在 Cosmos 生态系统中部署和通信。已经在<a href="https://evmos.blog/evmos-incentivized-testnet-event-the-mars-meteor-missions-bbbb7ffa1b7c" target="_blank" rel="noopener">激励性测试网</a>中，EVM 兼容性将于 2022 年 1 月登陆 Cosmos。Evmos 是一个与应用程序无关的链，可通过 IBC 与以太坊主网、EVM 兼容环境和其他 BFT 链互操作，并将充当 EVM 中心任何其他 EVM Cosmos 链。</p><p>另外请务必留意2022 年的<a href="https://umee.cc/" target="_blank" rel="noopener">Umee</a>，这是第一个为跨链交互提供基础设施的 DeFi 协议。Umee在 Tendermint、Coinbase Ventures、ConsenSys 的 Jo Lubin 和其他业内知名人士的支持下，于 2021 年筹集<a href="https://medium.com/umeeblog/umee-protocol-raises-6-3mm-seed-round-for-creating-a-cross-chain-defi-hub-75cadec10e4a" target="_blank" rel="noopener">了 630 万美元的种子资金。</a>Umee 允许用户创建借贷头寸，发现收益机会，并探索去信任的跨链 DeFi 应用程序。明年 Cosmos DeFi 会以多快的速度出现，这将是疯狂的！</p><h1 id="NFT-在-Cosmos-上将是巨大的"><a href="#NFT-在-Cosmos-上将是巨大的" class="headerlink" title="NFT 在 Cosmos 上将是巨大的"></a>NFT 在 Cosmos 上将是巨大的</h1><p>除了快速增长的 DeFi 领域之外，2021 年也是 NFT 的一年，人们对数字艺术品、数字收藏品和不可变的数字所有权证明的兴趣激增。由于主流对 NFT 的需求如此之大，它们的受欢迎程度似乎将在 2022 年继续。</p><p>Cosmos 生态系统中的许多项目都在为今年的发布奠定基础，包括<a href="https://stargaze.zone/" target="_blank" rel="noopener">Stargaze</a>，一个 NFT 的公共协议，<a href="https://www.pylons.tech/" target="_blank" rel="noopener">Pylons</a>，一个供品牌和创作者使用 NFT 构建产品的互操作系统，<a href="https://bitsong.io/" target="_blank" rel="noopener">BitSong</a>，第一个音乐 NFT 市场，<a href="https://omniflix.network/" target="_blank" rel="noopener">Omniflix</a>，一个由 NFT 提供支持的去中心化媒体和网络层，以及<a href="https://scrt.network/blog/secret-feature-stashh-privacy-nft-marketplace" target="_blank" rel="noopener">Secret Network 的 Stashh</a>，一个支持 Secret NFT 的全栈平台和市场。Evmos 还将很快支持 NFT 部署并托管市场，让人们可以轻松交易和部署 NFT。</p><p>特别值得一提的是<a href="https://strangeclan.com/" target="_blank" rel="noopener">Strangeclan</a>，因为它在 2021 年发布了其冒险游戏的第一个虚拟城镇，其中包括任务、社交活动、竞争性战斗以及铸造 NFT 角色、商品和代币的能力！该游戏将逐步开发，我们期待在 2022 年发布令人兴奋的未来版本。</p><p>Cosmos 长期贡献者<a href="http://irisnet.com/" target="_blank" rel="noopener">IRISnet</a>也在 2021 年完成了 NFT 领域的开创性工作，在许可环境和公链领域成功进行了<a href="https://blog.cosmos.network/nfts-travel-from-wenchang-chain-to-ethereum-for-the-first-time-through-ibcgang-member-irisnet-8b86490c5e45" target="_blank" rel="noopener">第一次跨链 NFT 跨链转移</a>：BSN 中的文昌链和 IRITA Hub，IRIS Hub（又名 IRISnet ) 和以太坊。现在，作为两幅精美中国画的数字孪生的 NFT 在 OpenSea EASTIP 上面向全球市场提供。</p><p>我们很高兴在接下来的几个月中关注所有这些令人难以置信的 NFT 项目的进展，并将在它们发生时向您更新。</p><h1 id="2022-年更重要的空投"><a href="#2022-年更重要的空投" class="headerlink" title="2022 年更重要的空投"></a>2022 年更重要的空投</h1><p>最后，一定不要错过 2022 年即将到来的一系列惊人的空投。Cosmos 生态系统中一些最具创新性的项目将于明年投入生产，涵盖从 NFT 到去中心化社交媒体、DeFi 到游戏的各个领域。请密切注意来自<a href="https://medium.com/@TharsisHQ/abbe931ba823" target="_blank" rel="noopener">Evmos</a>、<a href="https://www.youtube.com/watch?v=MAOJyS8bzGM" target="_blank" rel="noopener">Umee</a>、<a href="https://blog.cosmos.network/the-gravity-bridge-chain-is-coming-to-cosmos-7010ec7bd0ea" target="_blank" rel="noopener">Gravity Bridge</a>、<a href="https://like.co/" target="_blank" rel="noopener">LikeCoin</a>、<a href="https://medium.com/game/game-airdrop-for-atom-holder-563336c5f32e" target="_blank" rel="noopener">Game</a>、<a href="https://stargaze.zone/airdrop" target="_blank" rel="noopener">Stargaze</a>、<a href="https://bitsong.io/" target="_blank" rel="noopener">BitSong</a>和 Cyber 的空投，并确保将您的 ATOM 与 Cosmos 验证者进行质押以获得资格。</p><h1 id="开发者社区将继续扩大"><a href="#开发者社区将继续扩大" class="headerlink" title="开发者社区将继续扩大"></a>开发者社区将继续扩大</h1><p><a href="https://starport.com/" target="_blank" rel="noopener">Starport</a>将帮助我们实现到 2022 年底与 IBC 连接的 200 个区块链的目标，这是一个使用 Cosmos SDK 在主权和安全区块链上构建、启动和维护任何加密应用程序的一体化平台。Starport 提供业内最佳的开发者体验，并赋能开发者为多链未来构建区块链。</p><p>Starport 开发者社区正在迅速发展，迄今为止已创建并推送到 GitHub的<a href="https://github.com/search?o=desc&q=" target="_blank" rel="noopener"initialized+with+starport"&s=author-date&type=Commits">422 个区块链。</a>仅今年一年，Cosmos 的一些最有趣的项目就是使用 Starport 创建的，包括<a href="https://sifchain.finance/" target="_blank" rel="noopener">SifChain</a>、<a href="https://junochain.com/" target="_blank" rel="noopener">Juno</a>、<a href="https://app.osmosis.zone/" target="_blank" rel="noopener">Osmosis</a>、<a href="https://umee.cc/" target="_blank" rel="noopener">Umee</a>和<a href="https://lum.network/" target="_blank" rel="noopener">Lum Network</a>。在短短两个月内，<a href="https://discord.com/invite/starport" target="_blank" rel="noopener">Starport Discord</a>小组已经发展成为一个拥有近 600 名开发者的活跃社区。新推出的<a href="https://twitter.com/StarportHQ" target="_blank" rel="noopener">Starport Twitter</a>已拥有 5,000 名关注者，每天约有 200 名开发人员访问<a href="https://docs.starport.com/" target="_blank" rel="noopener">Starport 文档</a>以获取说明和教程——这些数字都将在 2022 年呈指数级增长。</p><p>在<a href="https://hackatom.org/" target="_blank" rel="noopener">HackAtom VI</a>期间，我们收到了一些针对 Starport 挑战的高质量提交，我们期待将这些想法融入生产，并与更多的开源贡献者合作。Starport 将在 2022 年添加一些关键的新产品和功能，这将使开发人员在启动其区块链时获得最大的成功。在接下来的几个月中，您将听到更多关于此的信息！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.cosmos.network/whats-coming-to-cosmos-in-2022-ce8e48d383ab" target="_blank" rel="noopener">What’s Coming to Cosmos in 2022</a> </p><p>欢迎交流： <a href="https://twitter.com/Changeli0n" target="_blank" rel="noopener">个人推特</a> <a href="https://matters.news/@hellolinux" target="_blank" rel="noopener">matters</a> <a href="https://t.me/hellolinuxLab" target="_blank" rel="noopener">个人分享TG频道</a> </p>]]></content>
    
    <summary type="html">
    
      2022年cosmos的跨链安全、跨链账户、超流质押等
    
    </summary>
    
    
      <category term="区块链" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="cosmos" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/cosmos/"/>
    
    
      <category term="cosmos" scheme="https://hellolinux.xyz/tags/cosmos/"/>
    
  </entry>
  
  <entry>
    <title>cosmos生态-Crescent network介绍</title>
    <link href="https://hellolinux.xyz/posts/ffe5b45f.html"/>
    <id>https://hellolinux.xyz/posts/ffe5b45f.html</id>
    <published>2022-04-05T11:16:08.000Z</published>
    <updated>2022-04-05T11:16:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>Crescent Network 将于UTC 时间 4 月 14 日</strong>登陆 Cosmos 生态系统，Gravity DEX 将正式重生为 Crescent，一个提升资本效率和有效风险管理的 DeFi Hub。</p><p>在发布时，所有用户都可以使用以下功能，更多功能即将推出：</p><p><strong>去中心化交易所（DEX）</strong></p><ul><li>AMM，fee为0</li></ul><p><strong>流动质押</strong></p><ul><li>质押原生代币 (CRE) 以获得可存入适用池中的保税 CRE (bCRE)</li><li>bCRE 可以通过在 CRE/bCRE 池中解除质押或交换来解除质押（21 天的解绑期）</li></ul><p><strong>流动性治理</strong></p><ul><li>bCRE 持有者可以通过 bCRE 内的隐性权力参与治理</li><li>持有以 bCRE 作为储备代币的 LP 的投资者，可以在 LP 中以 bCRE 内的隐性权力参与治理</li></ul><p><strong>LP farming</strong></p><p>LP奖励， bCRE 也可以存入具有 bCRE 对的池中，用于获得质押和耕作奖励</p><p>Crescent Boost 和 Derivatives 在内的更多实用程序将很快在 Crescent Network 上提供，供所有人体验。</p><h1 id="创世代币分配"><a href="#创世代币分配" class="headerlink" title="创世代币分配"></a>创世代币分配</h1><p>创世初始分配总量为 2 亿 CRE，在空投（100M）和战略储备（100M）之间平均分配。</p><h2 id="创世空投"><a href="#创世空投" class="headerlink" title="创世空投"></a>创世空投</h2><p>ATOM委托人空投总量为1亿个CRE。其中，5000 万 CRE 可在 Crescent 网络启动时推出 Crescent DEX (DEXdrop) 时索取。剩余的 5000 万在一定时期内分配给使用 Crescent Boost (Boostdrop) 的 ATOM 委托人。</p><p>DEXdrop 的申领过程，可以从 Genesis 申领。Boostdrop 的详细信息也将很快公布。</p><p>在 Crescent DEX 启动时，用户可以通过按以下顺序完成以下链上任务来领取他们的 CRE：</p><ul><li>空投20%：2022.1.1快照，共10M</li><li>流动性质押20%：参与CRE的流动质押，共10M</li><li>流动性提供20%：bCRE pool流动性，10M</li><li>swap20%：参与swap，10M</li><li>治理20%：参与投票治理，10M</li></ul><p>当用户在启动后 6 个月内完成上述任务时，可以申请全额分配。申领期内空投数量中未申领的 CRE 将分配给社区基金。</p><p>用户收到的 CRE 数量与快照时<a href="https://crescentnetwork.medium.com/crescent-token-distribution-926d90444a8b" target="_blank" rel="noopener">委托 ATOM 的平方根成正比</a>，在以下条件下为 Gravity DEX 的支持者提供三个 2x 乘数：</p><ul><li>如果参与治理提案#38 或#58</li><li>如果向 Gravity DEX 提供流动性</li><li>如果使用重力 DEX</li></ul><p>梳理查询：<a href="http://airdrop.crescent.network/" target="_blank" rel="noopener">http://airdrop.crescent.network/</a></p><p><strong>Boostdrop 可以通过使用 Crescent Boost 在设定的时间段内逐步领取。</strong></p><h2 id="战略储备-50"><a href="#战略储备-50" class="headerlink" title="战略储备 (50%)"></a>战略储备 (50%)</h2><p>1亿CRE分配给战略储备。战略储备的目的是以有利于网络及其社区的方式促进 Crescent 的扩展和发展。战略储备可用于确保关键合作伙伴关系，其中储备 CRE 将有 3 年的归属期，归属 CRE 没有资格委托或投票以防止潜在的治理集中化。这一战略储备的分配由新月基金会通过一个多重签名钱包控制。创世时将委托1000万个CRE以稳定网络的初始启动，但当除基金会以外的用户总委托量达到1000万时将取消委托。</p><h1 id="代币经济"><a href="#代币经济" class="headerlink" title="代币经济"></a>代币经济</h1><p>到第 10 年，将有 10 亿个 CRE 流通</p><p>创世占总数20%，社区基金2%，质押奖励5%，团队20%，生态激励53%</p><h2 id="生态系统激励-53"><a href="#生态系统激励-53" class="headerlink" title="生态系统激励 (53%)"></a>生态系统激励 (53%)</h2><p>生态系统激励将占 53%（5.3 亿），或占总 CRE 分配的最大部分。大部分将分发给 Crescent 社区的用户。激励的最初名称是 Crescent 的第一个实用程序 Crescent DEX。第一个激励将根据指定池中创世参数的设定比例分配。包括激励池和分配比例在内的参数将根据治理进行定义。</p><p>随着订单簿/AMM混合市场、Crescent Boost等各种产品的推出，激励分配的参数自然会多样化。生态系统激励的一部分对于采用对订单簿市场至关重要的做市商是必要的。还需要为 Crescent Boost（Crescent 的关键产品）的用户使用其他功能提供额外的激励措施。从长远来看，Crescent 的愿景是让 Boost 成为核心功能，因此我们认为最高部分的激励应该指定给 Boost 奖励。Crescent 是一个不断发展的 Hub，未来的添加也将有资格获得激励，并且生态系统激励内每个产品的激励比例可能会发生变化，以便针对未来方向进行最佳优化。</p><h2 id="社区基金-2"><a href="#社区基金-2" class="headerlink" title="社区基金 (2%)"></a>社区基金 (2%)</h2><p>随着时间的推移，将分配 2000 万 CRE 的社区基金，供 Crescent 治理用于未来做出的改变，以使 Crescent 及其用户受益。Crescent 社区将始终开放讨论和征求建议，以针对社区基金可以帮助积极发展的共同感兴趣的领域。</p><h2 id="质押奖励-5"><a href="#质押奖励-5" class="headerlink" title="质押奖励 (5%)"></a>质押奖励 (5%)</h2><p>验证者和委托者是维护网络安全的关键部分。质押奖励总供应量为5000万个CRE。奖励分配与委托的 CRE 数量成正比，但验证者设定的佣金率除外。由于 Crescent 支持流动性质押，委托人可以通过流动性质押来铸造 bCRE，这可用于其他经济活动，例如向 bCRE/ATOM 池提供流动性。请注意，既得 CRE 不能被委托，因此没有资格获得质押奖励。</p><h2 id="团队-20"><a href="#团队-20" class="headerlink" title="团队 (20%)"></a>团队 (20%)</h2><p>为团队预留的代币将在 10 年内逐步释放，达到整个 CRE 供应量的 20%。2亿华创将帮助团队持续发展支持，以及招募新人才以更好地服务于扩大的社区。B-harvest。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://crescentnetwork.medium.com/crescent-token-distribution-926d90444a8b" target="_blank" rel="noopener">Crescent Token Distribution</a></p><p><a href="https://crescentnetwork.medium.com/" target="_blank" rel="noopener">https://crescentnetwork.medium.com/</a></p><p>欢迎交流： <a href="https://twitter.com/Changeli0n" target="_blank" rel="noopener">个人推特</a> <a href="https://matters.news/@hellolinux" target="_blank" rel="noopener">matters</a> <a href="https://t.me/hellolinuxLab" target="_blank" rel="noopener">个人分享TG频道</a> </p>]]></content>
    
    <summary type="html">
    
      cosmos上原emeris项目转为独立链
    
    </summary>
    
    
      <category term="区块链" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="cosmos" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/cosmos/"/>
    
    
      <category term="cosmos" scheme="https://hellolinux.xyz/tags/cosmos/"/>
    
      <category term="cre" scheme="https://hellolinux.xyz/tags/cre/"/>
    
  </entry>
  
  <entry>
    <title>Hugo基本使用</title>
    <link href="https://hellolinux.xyz/posts/b7858f06.html"/>
    <id>https://hellolinux.xyz/posts/b7858f06.html</id>
    <published>2022-04-05T10:10:17.000Z</published>
    <updated>2022-04-05T10:10:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hugo使用"><a href="#hugo使用" class="headerlink" title="hugo使用"></a>hugo使用</h1><p>新建仓库</p><p>hugoBlog</p><p>apt install hugo</p><p>hugo new site myblog</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">archetypes</span>: 配置文章元数据</span><br><span class="line"></span><br><span class="line"><span class="attribute">content</span>: 博客文章所在目录</span><br><span class="line"></span><br><span class="line"><span class="attribute">data</span>: 用来存放数据文件，一般是 json 文件</span><br><span class="line"></span><br><span class="line"><span class="attribute">layouts</span>: 网站布局</span><br><span class="line"></span><br><span class="line"><span class="attribute">static</span>: 一些静态的内容，例如图片等</span><br><span class="line"></span><br><span class="line"><span class="attribute">themes</span>: 博客主题</span><br><span class="line"></span><br><span class="line"><span class="attribute">config.yml</span>: 站点配置文件，支持 yml.toml 和 json 三种格式的</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mivinci/hugo-theme-minima.git themes/minima</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/yoshiharuyamashita/blackburn.git</span><br></pre></td></tr></table></figure><p>hugo new theme <THEMENAME></p><p>hugo new <SECTIONNAME>/<FILENAME>.<FORMAT></p><p>hugo server</p><p>hugo server -D 本地预览</p><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p><a href="https://themes.gohugo.io/" target="_blank" rel="noopener">https://themes.gohugo.io/</a></p><p>theme = ‘minima’</p><p><a href="https://themes.gohugo.io/themes/archie/" target="_blank" rel="noopener">https://themes.gohugo.io/themes/archie/</a></p><p><a href="https://themes.gohugo.io/themes/hugo-theme-minima/" target="_blank" rel="noopener">https://themes.gohugo.io/themes/hugo-theme-minima/</a></p><p><a href="https://themes.gohugo.io/themes/blackburn/" target="_blank" rel="noopener">https://themes.gohugo.io/themes/blackburn/</a></p><p><a href="https://themes.gohugo.io/themes/gruvhugo/" target="_blank" rel="noopener">https://themes.gohugo.io/themes/gruvhugo/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hugo使用&quot;&gt;&lt;a href=&quot;#hugo使用&quot; class=&quot;headerlink&quot; title=&quot;hugo使用&quot;&gt;&lt;/a&gt;hugo使用&lt;/h1&gt;&lt;p&gt;新建仓库&lt;/p&gt;
    
    </summary>
    
    
      <category term="hugo" scheme="https://hellolinux.xyz/categories/hugo/"/>
    
    
      <category term="hugo" scheme="https://hellolinux.xyz/tags/hugo/"/>
    
  </entry>
  
  <entry>
    <title>LayerZero的 omnichain NFT介绍</title>
    <link href="https://hellolinux.xyz/posts/e5afe842.html"/>
    <id>https://hellolinux.xyz/posts/e5afe842.html</id>
    <published>2022-04-05T05:09:17.000Z</published>
    <updated>2022-04-05T05:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="omnichain-NFT介绍"><a href="#omnichain-NFT介绍" class="headerlink" title="omnichain NFT介绍"></a>omnichain NFT介绍</h1><p>第一个基于 LayerZero 的 NFT 集合 Gh0stly Gh0sts，不久刚上线，<a href="https://www.gem.xyz/collection/gh0stlygh0sts/" target="_blank" rel="noopener">gem查看</a> 。</p><p>以幽灵为主题、免费铸造的 CC0 项目迄今为止在以太坊上的交易活动最多，尽管值得注意的是，上述所有 7 个与 LayerZero 兼容的链都已经看到了 Gh0stly Gh0sts 交易。</p><p>其实说全链，有那么一点点夸张，一万张图片，每个链都单独发布1万张，唯一的一个特点就是，不同链的图片现实出来的背景和边框不一样，用来区分是哪条链转移过来的。</p><p>跟cosmos的跨链NFT还是不一样的。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://newsletter.banklesshq.com/p/omnichain-nfts?s=r" target="_blank" rel="noopener">https://newsletter.banklesshq.com/p/omnichain-nfts?s=r</a> </p>]]></content>
    
    <summary type="html">
    
      LayerZero的跨链 NFT介绍
    
    </summary>
    
    
      <category term="区块链" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="NFT" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/NFT/"/>
    
    
      <category term="nft" scheme="https://hellolinux.xyz/tags/nft/"/>
    
      <category term="跨链" scheme="https://hellolinux.xyz/tags/%E8%B7%A8%E9%93%BE/"/>
    
      <category term="layerzero" scheme="https://hellolinux.xyz/tags/layerzero/"/>
    
  </entry>
  
  <entry>
    <title>Defi世界-AMM Uniswap</title>
    <link href="https://hellolinux.xyz/posts/335282b3.html"/>
    <id>https://hellolinux.xyz/posts/335282b3.html</id>
    <published>2022-04-05T03:09:17.000Z</published>
    <updated>2022-04-05T03:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V1"><a href="#V1" class="headerlink" title="V1"></a>V1</h1><p>价格会使用恒定产品(<a href="https://ethresear.ch/t/improving-front-running-resistance-of-x-y-k-market-makers/1281" target="_blank" rel="noopener"><code>x*y=k</code></a>)</p><p>维持 <code>eth_pool（ETH 数量） * token_pool（代币数量） = invariant（不变量）</code> 这个关系来实现</p><p>ETH → OMG</p><blockquote><p>TH_pool（ETH 资金池） = 10</p><p>OMG_pool（OMG 资金池） = 500</p><p>invariant（不变量） = 10 * 500 = 5000</p></blockquote><p>OMG 购买者发送 1 ETH 到这个合约。其中 0.25% 的手续费会被划分给流动性提供者，剩余的 0.9975 ETH 会被放入 <code>ETH_pool</code>。不变量除以流动性池里 ETH 新增后的数量，得到新的 <code>OMG_pool</code> 的代币数量。剩下来的 OMG 会转给购买者。</p><blockquote><p>购买者发送: 1 ETH</p><p>Fee（费用） = 1 ETH / 500 = 0.0025 ETH</p><p>ETH_pool（ETH 资金池） = 10 + 1 - 0.0025 = 10.9975</p><p>OMG_pool（OMG 资金池） = 5000/10.9975 = 454.65</p><p>购买者收到: 500 - 454.65 = 45.35 OMG</p></blockquote><p>不变量表示的是上次交易结束后<code>ETH_pool（ETH 资金池） * OMG_pool（OMG 资金池）</code>的值。</p><blockquote><p>ETH_pool（ETH 资金池） = 10.9975 + 0.0025 = 11</p><p>OMG_pool（OMG 资金池） = 454.65</p><p>new invariant（新的不变量） = 11 * 454.65 = 5,001.15</p></blockquote><p>相对于流动性资金池较大规模的购买会导致价格明显下滑。不过在活跃的市场中，套利操作会确保价格不会和其他交易所偏移太多。</p><h2 id="手续费"><a href="#手续费" class="headerlink" title="手续费"></a>手续费</h2><p>ETH 兑换 ERC20：ETH 的 0.3%</p><p>ERC20 兑换 ETH：ERC20 代币的 0.3%</p><p>ERC20 兑换 ERC20：输入 ERC20 到 ETH 交易，手续费为 ERC20 代币的 0.3%，输出 ETH 到 ERC20 交易，手续费为 ETH 的 0.3%，实际手续费为输入 ERC20 代币的0.5991%</p><p>兑换手续费是被立即存入到流动性准备金中。由于总准备金增加了，但是没有增加额外的份额代币，所以所有的份额代币增加了同等价值。这相当于向流动性提供者支付了一笔费用，流动性提供者可以通过销毁份额来提取。</p><p>由于手续费被添加到流动性资金池中，不变量在每次交易结束时都有增长。在一次交易中，<code>invariant</code> 不变量表示的是上一次交易结束后的 <code>eth_pool（ETH资金池） * token_pool（代币资金池）</code></p><h1 id="V2"><a href="#V2" class="headerlink" title="V2"></a>V2</h1><p>Uniswap于2020年5月19日在Ethereum 主网上推出了第二个版本，以配合核心合约v1.0.1的发布</p><p>LP得到0.3%的手续费分成奖励–这个分成是基于其池中代币相对于整个池子供应量的比例。</p><ul><li><p>ERC20到ERC20的代币交换</p><p>ERC20到ERC20的代币交换，其中ETH不再需要作为中介代币来促进交换过程，取消这一要求后，交易次数减少了一半，节省了gas费。这也使得Dapps在没有设置直接交换代币池的情况下，可以有效地找到从一个代币到另一个代币的 “路线”。</p></li><li><p><strong>价格预言机</strong>：允许根据每个区块的代币对价格进行时间加权平均定价。</p><p>允许开发者根据该代币在一些区块上的价格变动计算出平均的代币价格，这些区块也通过它们的时间戳代表一段时期。这个时间段的累积可以是最近一小时、24小时或更长时间。</p><p>这些价格被称为 “时间加权平均价格”，或TWAPS。</p></li><li><p>闪电交换</p><p>能够从Uniswap池中 “借用 “代币，与外部服务进行一些任意交易，并在一次交易中偿还你最初的借贷资金。该交易是具有原子性的，这意味着如果在任何阶段交易失败，它将被全额还原。这种功能的明显用例是利用流动性池执行<strong>套利交易</strong>，但也有其他用例提供了好处，比如<strong>削减执行特定DeFi操作的gas费用，比如关闭Maker Vault</strong>。</p><p>利用Uniswap池来结算Maker Vault，你将偿还债务，并从该Vault中提取你的抵押ETH（或其他抵押代币）来偿还Uniswap池。这比使用您的自有资金来实现同样的任务所需的Gas更少。</p></li><li><p>支持非标准的ERC20代币</p><p>通过将无效返回类型的transfer和transferFrom视为成功转移，支持非标准的ERC20代币。这看起来似乎微不足道，但主要的代币如USDT（Tether）和BNB（Binance Coin）在它们的转移方法上正是这样做的。包括广泛采用的没有完全遵守ERC20标准的代币，加强了Uniswap在使用量上优先链上交易所的主张。</p><p>额外的实用方法，以防止在转移的代币数量超过Solidity所能支持的情况下出现溢出。</p></li></ul><p><strong>缺点：每笔Uniswap交易都很昂贵。Uniswap没有实时订单簿</strong></p><h1 id="V3"><a href="#V3" class="headerlink" title="V3"></a>V3</h1><p> (x+m)*(y+n)= k，在V2上增加了m，n</p><h2 id="分不同价格阶段提供流动性（集中流动性）"><a href="#分不同价格阶段提供流动性（集中流动性）" class="headerlink" title="分不同价格阶段提供流动性（集中流动性）"></a>分不同价格阶段提供流动性（集中流动性）</h2><p>V2 LP只赚取一小部分资本的费用，这可能无法适当补偿他们因持有两种代币的大量库存而承担的价格风险（<code>无常损失</code>）。 此外，由于流动性摊薄在所有价格区间，交易者往往会出现很高的价格滑点。</p><p>LP可以将任何数量的不同的集中持仓组合存入一个池子里。 例如，ETH/DAI池中的LP可以选择将100美元分配给1,000-2,000美元的价格区间，并将另外50美元分配给1,500-1,750美元的区间。</p><p><strong>用户针对所有单个曲线的综合流动性进行交易</strong>，每个流动性提供者的Gas成本不增加。 在某一价格区间收取的交易费由LP按其对该区间贡献的流动性按比例分成。</p><p>通过集中流动性，LP可以在指定的价格区间内提供<strong>与v2相同的流动性深度，同时将远低于v2的资本风险</strong>，节省下来的资本可以对外持有，投资于不同的资产，存放在DeFi的其他地方，或者用于增加指定价格区间内的风险敞口，赚取更多的交易费用。</p><p><strong>实例：</strong></p><blockquote><p>Alice和Bob都想在Uniswap v3上的ETH/DAI池中提供流动性，他们每人有100万美元。 目前ETH的价格是1500DAI。</p><p>Alice决定在整个价格范围内部署她的资本（就像她在Uniswap v2中一样）。 她存入50万DAI和333.33ETH（共值100万美元）。</p><p>Bob则建立了一个集中的仓位，只在1000到2250的价格范围内存款。 他存入了91751DAI和61.17ETH，总价值约18.35万美元。 他自己保留了另外的81.65万美元，按照自己的喜好进行投资。</p><p>虽然Alice投入的资金是Bob的5.44倍，但只要ETH/DAI价格保持在1000到2250的区间内，他们赚取的费用是一样的。</p></blockquote><p>在V3 发布后，对于在0.10%的单一价格区间内提供流动性的LP来说，资本效率收益最高将达到4000倍。 v3 资金池工厂在技术上能够支持0.02%的颗粒度，相对于v2来说，最高可获得20000倍的资本效率收益。然而，更多颗粒度的资金池会增加兑换时的 Gas成本，因此在2层网络上可能更有用。</p><blockquote><p>可以在一定程度上囤货或者出货，但是这个是基于自己对市场的判断。</p></blockquote><h2 id="提供多个收费层级"><a href="#提供多个收费层级" class="headerlink" title="提供多个收费层级"></a>提供多个收费层级</h2><p>每对LP提供三个独立的费用等级–0.05%、0.30%和1.00%。 这些选择可确保LP根据预期的货币对波动率来调整其保证金： LP在ETH/DAI等非相关货币对中承担更多的风险，反之，在USDC/DAI等相关货币对中承担最小的风险。</p><p>预计同类相关资产对会在集中在0.05%的费率附近，ETH/DAI等资产对会使用0.30%，而外来（exotic）资产可能会发现1.00%的交换费用更合适。可以根据需要通过治理增加额外的收费层。</p><h2 id="高级预言机"><a href="#高级预言机" class="headerlink" title="高级预言机"></a>高级预言机</h2><p>时间加权平均价格(TWAP)预言机</p><p>Uniswap v3对TWAP预言机进行了重大改进，使其可以在一次链上调用中计算过去约9天内的任何最近TWAP。 这是通过存储一组的累计和而不是只存储一个累加来实现。</p><p>这一系列的历史价格累积器使得创建更高级的预言机变得更加容易和便宜，包括简单移动平均线(SMA)、指数移动平均线(EMA)、异常值过滤等。</p><p>尽管有这一重大改进，但Uniswap交易商保持预言机更新的Gas成本相对v2减少了约50%。<code>外部智能合约</code>中计算TWAP的成本也明显便宜了。</p><h1 id="经济模型"><a href="#经济模型" class="headerlink" title="经济模型"></a>经济模型</h1><p>UNI初始发行总量为 10 亿枚，会在4年内完成分发，其中60%分配给社区，21.51%归属团队，17.8%分配给早期投资者，0.69%分配给顾问。团队、投资人和顾问的代币都分4年线性解锁。，4年之后保持固定的2%的通货膨胀率以维持生态的健康与稳定。</p><p>流通4.56亿，总量10亿，价格8.3，市值38亿，FDV 83亿，TVL 74.6亿 2022.3.7，ATH 44.9 2021.5.3，ATL 1.03 2020.9.17</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>无偿损失较高、资本效率低下、交易品种过少等问题，后续会有curve v2、Balancer V2对这些问题进行一定改善。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://hackmd.io/@HaydenAdams/HJ9jLsfTz" target="_blank" rel="noopener">Uniswap Whitepaper</a></p><p><a href="https://www.fxajax.com/20210626135157.html" target="_blank" rel="noopener">一篇文章了解Uniswap V2的改进与创新</a></p><p><a href="https://uniswap.org/whitepaper-v3.pdf" target="_blank" rel="noopener">Uniswap v3 Core白皮书</a></p><p><a href="https://learnblockchain.cn/article/2302" target="_blank" rel="noopener">Uniswap V3 介绍</a></p><p><a href="https://www.tuoluo.cn/article/detail-10023451.html" target="_blank" rel="noopener">全维度深入解析：Uniswap的正面与背面</a> </p>]]></content>
    
    <summary type="html">
    
      AMM uniswap V1 V2 V3介绍
    
    </summary>
    
    
      <category term="区块链" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="defi" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/defi/"/>
    
    
      <category term="defi" scheme="https://hellolinux.xyz/tags/defi/"/>
    
      <category term="uni" scheme="https://hellolinux.xyz/tags/uni/"/>
    
      <category term="amm" scheme="https://hellolinux.xyz/tags/amm/"/>
    
  </entry>
  
  <entry>
    <title>Defi世界-Curve Finance介绍</title>
    <link href="https://hellolinux.xyz/posts/1b55cb71.html"/>
    <id>https://hellolinux.xyz/posts/1b55cb71.html</id>
    <published>2022-04-04T03:09:17.000Z</published>
    <updated>2022-04-04T03:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V1"><a href="#V1" class="headerlink" title="V1"></a>V1</h1><p>价格会使用恒定产品(<a href="https://ethresear.ch/t/improving-front-running-resistance-of-x-y-k-market-makers/1281" target="_blank" rel="noopener"><code>x*y=k</code></a>)</p><p>维持 <code>eth_pool（ETH 数量） * token_pool（代币数量） = invariant（不变量）</code> 这个关系来实现</p><p>ETH → OMG</p><blockquote><p>TH_pool（ETH 资金池） = 10</p><p>OMG_pool（OMG 资金池） = 500</p><p>invariant（不变量） = 10 * 500 = 5000</p></blockquote><p>OMG 购买者发送 1 ETH 到这个合约。其中 0.25% 的手续费会被划分给流动性提供者，剩余的 0.9975 ETH 会被放入 # Curve简介</p><p>Curve.fi借鉴Uniswap、Balancer等前人经验，给稳定币的发展的提供了孵化地，各种创新稳定币可以通过Curve来为自身做初期价值锚定，为项目的场景发展争取时间。Curve作为这些稳定币之间的桥梁将会成为一个长期Defi基础设施，这些稳定币的交易量便是Curve.fi的价值根基。大规模的稳定币AMM兑换市场，他们独有的算法使得池子大部分时候滑点极低，<a href="https://curve.fi/files/stableswap-paper.pdf" target="_blank" rel="noopener">白皮书</a> 。</p><p>定位在稳定币或者等价币之间的交换（如ETH和sETH，BTC和wBTC等）：</p><ul><li><p>在流动性池中的代币充足的情况下，滑点尽可能的小甚至没有；</p></li><li><p>避免流动性池中某一种代币被全部兑换，在某一种代币数量很少的时候要提升代币价格；</p></li></ul><p>以流动性池中只有两种代币为例，如USDC/DAI，交易价格是由-dy/dx来决定的，如果让交易价格稳定为1，最简单直接的恒等式就是采用一个斜率为-1的直线</p><blockquote><p>x + y = const</p></blockquote><p>需要考虑到一个价格自调整的能力，像Uniswap、Bancor等协议，是通过乘积恒等式来实现价格调整：</p><blockquote><p>x * y = const</p></blockquote><p>价格滑点会比较明显，单笔交易量越大，价格变化越大，因此不太适合稳定币之间的交易。<br><img data-src="../images/crv1.png" alt=""> </p><p>蓝色曲线即代表稳定币之间交易的AMM曲线，和Uniswap这种乘积恒等式的AMM设计来比，在预期的稳定价格附近有比较小的滑点，和恒定总和的AMM设计相比，在某一种代币余额产生较大偏离时，交易价格会发生比较大的变化，促使流动性提供者或者套利者通过市场行为恢复流动性池中代币余额的均衡。</p><p>Curve需要做的就是通过函数关系，能够在一定范围类，通过函数某些参数，都能够切换到这两个的任意一种状态，比如，交易量特别大的时候接近恒定和，在流动性快枯竭的时候接近恒定积。</p><p>引入一个因子 X，用来调整恒定总和恒等式影响占比，值越大，则曲线更加倾向于零滑点的直线，值越小，则曲线更加倾向于高滑点的恒定乘积曲线。在curve finance的白皮书中也成为杠杆（leverage），动态杠杆需要满足两个特性：</p><ul><li>自适应梯度，当流动性池中的各个代币余额相等或者接近的时候， X 的值增大，降低滑点，反之值减小，增加曲线梯度，即交易价格，控制余额比例的偏离；</li><li>与交易池中代币种类不相关，即与维度不相关。<br><img data-src="../images/crv2.png" alt=""></li><li>在这个恒等式中，A的值是在创建流动性池的时候选择的，恒定不变，D的值在质押代币之后需进行计算，并且在swap过程中要不断的进行迭代更新。</li></ul><p><strong>Curve Finance支持与其他DeFi协议的融合，Curve的流动性池也因此分为三种类型：</strong></p><ul><li><p>Plain pools：两个或多个稳定币交易流动性池，用于交易的流动性池，目前有3CRV和其他稳定币的池子；</p></li><li><p>Lending pools：这个交易池中，对原生的代币进行了一个再包装（wrapped tokens），例如用户质押的是DAI，但实际流动性池里是cDAI，这样做的目的是为了可以将质押到流动性池中的代币再借贷出去赚取利润，而用于交易的流动性池中实际保存的是wrapped tokens，比如ETH的sETH、BTC的sBTC等；</p></li><li><p>Metapools：与另外一个流动性池中的流动性代币（LP）组成的流动性池，这种流动性池的目的是为了给用户一个重叠质押的机会，例如用户质押DAI到一个Plain pool获得LP，然后又将LP质押到Metapool继续赚取收益，就像是你买了债券，然后又用债券换了一个理财，这样你既能获得债券的收益，又能获得理财的收益，目前Curve池子中最主要的是稳定币的3CRV跟其他某代币组成的池子，获取3CRV本身收益，这个池子的收益，还有跟3CRV组的这个币本身的分红。额外token、额外奖励、gasfee。</p></li></ul><h1 id="veCRV机制"><a href="#veCRV机制" class="headerlink" title="veCRV机制"></a>veCRV机制</h1><p>质押Curve代币获取veCRV，能够对收益加速，veCRV介绍：</p><ul><li><p>收取Curve协议50%的交易手续费，收取手续费比例按照veCRV占比均分。</p></li><li><p>Vote Power。veCRV的投票权机制非常简单，投票权跟锁仓时间成正比，veCRV会随着时间衰退的，所以如果为了保持足够的投票权，意味着要一直刷新锁仓的时间。</p></li><li><p>Boost 机制。Boost是流动性挖矿的加速机制，在没有boost的情况下，流动性挖矿的基数只有40%，通过足够拥有足够量级的veCRV的情况，才能获得Boost倍速的增加，最高2.5x，是一个线性增加的机制。</p></li></ul><p>一切共识都需要时间的积累，时间-&gt;共识-&gt;价值。Curve.fi最简单的手法：锁仓，并且量化锁仓的价值 — 投票权力。其实锁仓增加投票权并非什么新鲜事物，而为什么veCRV成功了？主要还是跟boost的机制的配合，用户们有了非常直接争夺CRV的理由：更多投票代表更多收益，这便是veCRV的博弈基础。这个功能让项目方几乎是永远锁住了一部分CRV来保持自己的在Curve上的权力。同时这个veCRV也对抗了为了投票瞬间直接大量买入，再投票结束再大量抛售的情况，保持了币价的平稳。一个地址在提供流动性的同时还需要跟流动性对应足够量级的CRV才能收益最大化。</p><p>由于项目预挖和前期的通胀太快，导致后期如果用户想到最大的程度的boost需要CRV数量过于庞大，大量拥有CRV的鲸鱼和流动性提供散户最终分叉成两个无法交集的集体，veCRV机制正式成为一个缺陷，也导致了接下来介绍的优化平台的战争开端。</p><p><strong>目前为止治理白名单：yearn finance、stakeDAO、Convex</strong> 。</p><p>StakeDAO后面将旗下的CRV转入Convex中，帮助convex完成原始积累。</p><h1 id="CRV代币"><a href="#CRV代币" class="headerlink" title="CRV代币"></a>CRV代币</h1><p>CurveDAO于2020年8月13日正式启动，推出治理token CRV。CRV的最大供应量为30.3亿枚，其中62%将分配给社区流动性提供者、30%分配给项目团队和早期投资者（2-4年归属）、5%作为社区储备、3%分配给拥有2年归属权的员工。</p><p>CRV目前具有三个主要用途：社区投票，质押获取社区治理费分成和提高流动性池的收益（最高达2.5倍）。而实现以上用途的前提是将CRV锁定并获得veCRV。与常规采用DAO治理的DEX协议相比，Curve的创新之处在于在CRV的锁仓规则中添加了时间函数：veCRV=CRV*T/4（T为锁仓年限），即质押CRV的时间越长，收到的veCRV就越多，选择CRV锁仓4年才能1：1的获得veCRV。需要注意的是，且该质押锁仓行为不可逆转且veCRV不可流通。</p><h1 id="Convex"><a href="#Convex" class="headerlink" title="Convex"></a>Convex</h1><p>收益和流动性出现矛盾，所以就有Convex的出现，就是实现收益和流动性的分离，用户可以只获取较高收益，出卖自己的投票权，这就是Convex做的事情。</p><p>Convex的协议token是CVX，其最大供应量为1亿，其中的50%将分配给通过Convex平台向Curve平台提供流动性的用户（为初始的流动性提供者增厚一层收益）、25%向CVX/ETH和cvxCRV/CRV矿池提供流动性挖矿激励（矿池的建立使得cvxCRV的流动性大大改善，是Convex破解veCRV流动性不足的手段之一）、10%归属Convex团队、9.7%归属合约、3.3%归属早期投资者、2%空投给veCRV的持有者。</p><p>Convex其实就是一个像比较大银行，用户把钱存在这里，获取比Curve高一点的收益，而Curve就只能定期存取。Convex本身它是把所有的CRV都锁了四年的，因为从平台角度，越久对它来说越好，前提是不会跑路。质押一枚CRV即可获得一枚cvxCRV，这一过程有些类似资产证券化。就有点像，集中散户手中的东西干大事。</p><p><strong>CRV token持有者选择</strong></p><ul><li><p>持有CRV，等待币价上涨</p></li><li><p>Curve质押CRV换取veCRV，将获得Curve协议的投票权与管理费分成，但要牺牲流动性</p></li><li><p>前往Convex质押CRV取得cvxCRV，其将可以在不牺牲流动性的前提下获得veCRV持有者所能享受的最高收益与CVX，但加速收益的16%会作为平台费被收取。（基于Convex平台）</p></li><li><p>前往SushiSwap提供流动性，其将可以获得SUSHI、交易手续费分成与CVX激励。（基于Convex平台）</p></li></ul><p>Convex运行良好来自于CVX的价格支撑，CVX价格过低，第三种收益就会下降，SushiSwap的流动性挖矿收益率下降或将引发cvxCRV的流动性不足，Convex需要减少CVX与cvxCRV的流通盘，收取的16%费用可以激励CVX与cvxCRV的持有者质押他们手中的token。</p><ul><li><p>10% 激励cvxCRV质押者，以CRV形式给出</p></li><li><p>5% 鼓励CVX质押者，以cvxCRV形式给出</p></li><li><p>1% 偿付合约调用gas费</p></li></ul><p>引导 CVX 和 cxvCRV 早期的流动性，如果在 SushiSwap 的 cvxCRV/CRV 和 CVX/ETH 交易对提供流动性，则可将对应的 LP 令牌存放在 Convex 上，并获得对应的 CVX 奖励。cvxCRV 保留收益权 没有投票权，收益会高一点。</p><p>vICVX（convex治理权： 锁定16周 略高5%收益</p><h2 id="CVX代币"><a href="#CVX代币" class="headerlink" title="CVX代币"></a>CVX代币</h2><p>CVX 是 Convex 的原生代币，最大供应量为 1 亿枚</p><p>50%（5000 万枚）是 Curve LP 奖励，按比例直接分发</p><p>25%（2500 万枚）用于流动性挖矿奖励，支持 CVX/ETH 和 cvxCRV/CRV 交易池，分发期为 4 年</p><p>10% （1000 万枚）是 Convex 创始团队激励，在产品上线后锁定一年</p><p>9.7%（970 万枚）作为国库储备，锁定一年，用于未来的社区激励或其他社区活动</p><p>3.3%（330 万枚）分发给投资者，全部锁定一年（此部分 CVX 没有 cvxCRV 铸造）</p><p>1%（100 万枚）的 CVX 被空投给 veCRV 代币持有者</p><p>1%（100 万枚）的 CVX 奖励给参与 Curve.fi 治理投票（即支持将 Convex 列入 Curve.fi 白名单）的用户</p><h1 id="Curve的治理控制权"><a href="#Curve的治理控制权" class="headerlink" title="Curve的治理控制权"></a>Curve的治理控制权</h1><p>投票控制权的获取目前以大型的算法稳定币项目为主，一些衍生品和周边服务的游击队也不停的加入到混战当中，后续应该衍生品等项目应该也是有这个需求的。</p><ul><li><p>Frax/FXS：老牌算稳项目。Convex专门开辟了Frax专区，FXS也开启了自己的veFXS模式。</p></li><li><p>Spell/MIM：Abracadabra, 一个扬言要彻底打败Maker的生息资产稳定币项目，稳定币是MIM。MIM/3CRV池子，利用Curve的站住脚跟成功典型代表。核心人物Daniele。</p></li><li><p>UST：Terra系得算法稳定币。跟上面的Daniele合作，把两个非传统抵押型稳定币绑定在一起。Terra 2022刚开始就购入了超过60w的CVX，也加入了Curve大家庭。</p></li><li><p>OHN/Redacted：非传统形态的算法稳定币。Ohm和Frax的关系密切，在<a href="https://forum.olympusdao.finance/d/325-oip-43-launch-cvx-bonds" target="_blank" rel="noopener">OIP-43</a>中就已经提议增加CVX债权，增持CVX放入国库中，为应对未来的竞争做准备。Ohm加持的Redacted(BTRFLY)协议更是作为一种Convex之上的优化策略方案进入了战争当中，使用Ohm机制发放债券吸引了大量CRV和CVX，帮助用户更好的发挥手中的CRV和CVX收益。</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Curve还接入了iEarn、Compound、Synthetix等借贷协议与合成资产协议，在提高资金利用率的同时给予流动性提供者额外的收益，这种乐高式的金融组合也是DeFi的一大魅力。</p><p>做市收益、Convex 完成治理套娃、进阶的贿赂选票，入局的协议也从 Yearn &amp; Stake DAO、到 Olympus DAO &amp; FRAX、到各类稳定币项目 Alchemix &amp; Abracadabra、到新生项目 [Redacted] Cartel。</p><p>Curve.fi在可见的未来中，会跟Uniswap，Maker，AAVE一样，成为Defi的基石，是每个Defi玩家都应该深入理解的项目。</p><p>作为一个稳定币的DeFi协议，Curve Finance为上层的应用或者衍生品提供了基础支撑，相信未来肯定还会有更多的创新性的尝试，包括跟元宇宙的结合等。</p><p>长远来看，就如Uniswap创始人在推特上说的而言，Curve是以博弈论为基础，这种激励不能够长久。我个人的看法并不否认这种看法，我相信几年后会有新的机制和产品出来，但是，目前状况下，局面还没有打开的情况下，Curve是所有稳定币启动的最好去处，有了先发优势，但是资本本身是逐利的，谁又知道会有什么新的产品会更吸引人呢，比如AC的solid，至少是一个改进和有利的竞争，但是还是在一条路子上，尽管AC已经退出或者隐匿。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://curve.fi/files/stableswap-paper.pdf" target="_blank" rel="noopener">Curve StableSwap Whitepaper</a></p><p><a href="https://curve.fi/files/crypto-pools-paper.pdf" target="_blank" rel="noopener">Curve Crypto Pools Whitepaper</a></p><p><a href="https://zhuanlan.zhihu.com/p/461398413" target="_blank" rel="noopener">深入浅出Curve Finance的自动化做市商（AMM）原理</a></p><p><a href="https://mirror.xyz/0xd05cFA28Eaf8B4eaFD8Cd86d33c6CeD1a1875417/K6rMxszmPIWIuOKJHavs7yZnhMis_DYYFIHi690afsU" target="_blank" rel="noopener">Curve War（流动性战争）</a></p><p><a href="https://mirror.xyz/0xe3FF118cACfC37b79563D846cDe9d8C4D33E302d/qQtIuwI49ds1L5RQ9j5T7O2bhuoBidzWHgCq-Ktfqnk" target="_blank" rel="noopener">DeFi最大流动性中心：收益聚合器Convex的秘密</a></p><p><a href="https://raw.githubusercontent.com/Convex-Dev/design/main/papers/convex-whitepaper.pdf" target="_blank" rel="noopener">Convex白皮书</a> </p>]]></content>
    
    <summary type="html">
    
      Curve Finance介绍
    
    </summary>
    
    
      <category term="区块链" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="defi" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/defi/"/>
    
    
      <category term="defi" scheme="https://hellolinux.xyz/tags/defi/"/>
    
      <category term="crv" scheme="https://hellolinux.xyz/tags/crv/"/>
    
  </entry>
  
  <entry>
    <title>Defi世界-借贷Compound介绍</title>
    <link href="https://hellolinux.xyz/posts/aac4301d.html"/>
    <id>https://hellolinux.xyz/posts/aac4301d.html</id>
    <published>2022-04-04T02:09:17.000Z</published>
    <updated>2022-04-04T03:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="借贷历史"><a href="#借贷历史" class="headerlink" title="借贷历史"></a>借贷历史</h1><p>MakerDao的Maker协议，俗称多抵押DAI（MCD）系统，是最著名的DeFi借贷平台之一，也是第一个被广泛采用的去中心化金融（DeFi）应用程序。MakerDAO成立于2014年，旨在建立稳定的加密货币。DAI通过智能合约生成并与美元1：1挂钩进行借贷。DAI的稳定性是通过动态的债务抵押头寸体系、自主反馈机制和对外部参与者的激励来实现的。通过超额抵押，资产持有人通过Maker协议铸造DAI后可以自由地发送给其他人，用于支付商品和服务，或者作为长期储蓄持有。</p><p>Compound在2020年7、8月份一度超越MakerDAO，成为去中心化金融（DeFi）中最大的借贷协议。Compound之所以受人追捧最主要的原因归于其流动性挖掘（Yield Farming）。无论是贷方还是借方都能获得COMP代币奖励</p><p>2020年11 月，Compound 遭遇黑客攻击，价值约103Million美元的加密资产被系统强制清算。Compound 上的 DAI 价格来源于预言机，而该预言机的 DAI 价格采集自单一的交易所——Coinbase Pro，而黑客则操纵了 Coinbase Pro 上 DAI 的价格。</p><h1 id="Compound"><a href="#Compound" class="headerlink" title="Compound"></a>Compound</h1><p>Compound于2018年上线。2019年年中启动了V2版本，添加了cToken的机制。目前已支持ETH、USDC、WBTC等十多种代币的借贷功能。</p><h2 id="Supply和Borrow"><a href="#Supply和Borrow" class="headerlink" title="Supply和Borrow"></a>Supply和Borrow</h2><ul><li><p>Supply将代币存入协议以赚取利息</p><p>存入USDC，一定数量的cUSDC代币（理论上应该是1：1），赚取的手续费最后赎回的时候是按照自己cUSDC在总cUSDC所占比例去分取得。cToken表示了某个协议对用户的债务，这类代币也可以转让，表示将债权转让给他人。</p></li><li><p>Borrow</p><p>存入代币作为超额抵押物，根据抵押率借出一定数量的资产。通过预言机监控各用户的抵押物，在抵押物不足时将抵押物以稍低于市场价的价格回收借出的资产。</p></li><li><p>基本概念</p><p>利用率=借出款/货币量，货币量 = (现金+借出款)</p><p>借款利率 = 2.5% + 利用率 * 20%</p><p>供给利率(Supply Interest Rate) = 借款利率 * 利用率 *（1 - S）</p><p>S表示利差，为了使协议具有可持续性，且经受住经济冲击（在同一个货币市场上的供给和借贷），供给方赚钱的利息总额必须小于借款方赚钱的利息产品总额。</p></li></ul><blockquote><p>cToken 与标的资产的兑换比例，比如 cETH 的兑换率为 0.02，即 1 个 cETH 可以兑换 0.02 个 ETH。兑换率会随着时间推移不断上涨，因此，持有 cToken 就等于不断生息，所以也才叫生息代币。计算公式为：exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply</p></blockquote><p>正常情况下是这样，当利用率 达到某个高点（如80%拐点），之后的存款率陡增，借款利率也会增加较快，鼓励大家提高供给，降低整体的使用率，避免资金池枯竭。</p><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a><strong>攻击</strong></h2><ul><li><p>预言机攻击，主要是价格短暂波动</p></li><li><p>调用了外部的合约且该合约是不安全的</p></li><li><p>外部合约的函数调用早于状态变量的修改</p></li></ul><h2 id="代币"><a href="#代币" class="headerlink" title="代币"></a><strong>代币</strong></h2><p>Compound的COMP代币用于用于生态激励和社区管理，总量发行1000万枚，没有初始代币发行(ICO)，近50％分配给了投资者，创始人，当前和未来团队成员。另外剩余约50%中大约80万枚分配给社区计划，剩余的420万个令牌将在4年的时间内分配给该协议的用户（假设每天的分配量为2880个）。</p><p>Compound投资人阵容强大，包括众多区块链投资领域的知名投资机构，除了 <a href="https://www.crunchbase.com/organization/makerdao/investor_financials" target="_blank" rel="noopener">a16z Crypto，还有Polychain</a> Capital<a href="https://www.crunchbase.com/organization/makerdao/investor_financials" target="_blank" rel="noopener">， Paradigm，Coinbase Ventures</a>等。不过其代币表现一般，整体来看，从ATH到ATL跌幅超过80%。</p><h1 id="AAVE"><a href="#AAVE" class="headerlink" title="AAVE"></a>AAVE</h1><p>Aave前身是ETHLend，2017年成立，属于点对点贷款平台。后来他们改用流动资金池模式，更名为Aave。</p><p>Aave的借贷功能和Compound类似，但可借资产更多。除了浮动利率以外，Aave还给借款人提供了固定利率借款，使借款人在借款期间不必担心利率波动，但同时利率比当前浮动利率更高。</p><p>它还提供其他服务，如闪电贷等独特的抵押类型。</p><p>Aave的V2版本添加了新的功能：</p><ol><li><p>通过闪电贷进行抵押物互换（collateral swap），方便借款人快速切换抵押物代币。</p></li><li><p>批量闪电贷（batch flashloan），允许借款人一次借出多种代币。</p></li><li><p>债务代币化（debt tokenization），一种提供无抵押借款的功能，在借款人借出代币时铸造至借款人钱包，借款人还款时自动销毁。此代币作为债务的标记，无法从钱包转移，只能通过还款自动销毁。此功能开启了一种新的方式，可以使Aave给其他实体提供无抵押的授信额度，包括机构、加密货币交易所或其他DeFi协议。</p></li></ol><h2 id="创新点"><a href="#创新点" class="headerlink" title="创新点"></a>创新点</h2><ul><li><p>闪电贷（Flash Loan）。它是一个使用区块链特性的贷款产品：你可以借出一笔资金，只要你能在同一笔“区块链交易”中支付本金和利息；如果该交易最后没有偿还本金和贷款，则整个交易失败，资金就不会被借出。</p><p>闪电贷给开发人员提供了新的可能性——捕捉链上的瞬时的赚钱机会。除了上述提到的套利机会之外，还能进行抢跑攻击、通过协议机制和协议漏洞进行攻击等。</p></li><li><p>用户可以在任何借入交易的稳定和可变利率之间进行选择</p></li></ul><p><strong>Aave 协议从以太坊主网扩展到 Polygon 和 Avalanche 网络，接下来也会上线cosmos得EVMOS。</strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1）MakerDAO的定位从根本上支持DAI稳定币，整个项目根基稳；</p><p>2）Compound为流动性挖矿的鼻祖。潜在问题是，如果4年后COMP代币耗尽或者价格下跌，Compound项目又会如何？</p><p>3) Aave提供丰富的功能和更为灵活的利率，比如提供稳定和可变的利率，闪电贷等，Compound则没有。不过贷款的本质是允许用户借到比你现在拥有的更多的钱，或者更多。对于那些真正欠缺资产的群体而言，AAVE能否在解决这些问题的同时保证安全？</p><blockquote><p>其实不管是AMM还是借贷，最后都会落在一个解决资本流动，提高资本效率的问题上，从Uniswap V3得集中流动性，借贷利用率上面，再者还有Curve war，本质上都是要提升资本效率。这里面，如果还是再稳定币的市场中的话，Curve有着举足轻重的位置，Uni可以在长尾上有所改进，而对于借贷，是可以跟其他合作，也就有aave会跟Curve合作等，但是这只是目前的形式，我相信还会有更新的模式产生。</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.cyberfinance.cn/a/2021020501.html" target="_blank" rel="noopener">DeFi借贷巨头MakerDAO，Compound，Aave何以争锋？</a></p><p><a href="https://mirror.xyz/0x546086AfA3D285aCD2c84783c2dCf8F2C23b6433/yYi562kzBNUSgcuZKbN0M_hGXtNpb_Su0X6kDuAC8kY" target="_blank" rel="noopener">剖析DeFi借贷产品之Compound：延伸篇</a></p><p><a href="https://compound.finance/documents/Compound.Whitepaper.pdf" target="_blank" rel="noopener">Compound 白皮书</a> </p>]]></content>
    
    <summary type="html">
    
      借贷Compound介绍
    
    </summary>
    
    
      <category term="区块链" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="defi" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/defi/"/>
    
    
      <category term="defi" scheme="https://hellolinux.xyz/tags/defi/"/>
    
      <category term="compound" scheme="https://hellolinux.xyz/tags/compound/"/>
    
      <category term="aave" scheme="https://hellolinux.xyz/tags/aave/"/>
    
  </entry>
  
  <entry>
    <title>Defi世界-defi2.0 olympus DAO介绍</title>
    <link href="https://hellolinux.xyz/posts/9092711e.html"/>
    <id>https://hellolinux.xyz/posts/9092711e.html</id>
    <published>2022-04-03T03:09:17.000Z</published>
    <updated>2022-04-03T03:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OHM介绍"><a href="#OHM介绍" class="headerlink" title="OHM介绍"></a>OHM介绍</h1><p>Olympus 是一个2021 年 3 月推出，旨在设计一种与美元挂钩的稳定资产协议，负责发行和管理完全抵押的、算法的、自由浮动的稳定资产 OHM。</p><p>OlympusDAO 最开始是通过 Initial Discord Offering 公平发放的，在2021年 3 月 3 日前加入官方 discord 的用户将进入白名单，可以在2021年 3 月 12 日-14 日以 4 美元的价格购买 OHM，每人 600 美元额度。</p><p>OlympusDAO 中的资产也由协议控制，用户不能直接通过协议铸造 OHM，也不能销毁 OHM 而赎回对应的资产。<br>OHM 是完全抵押的，因为它由位于 Olympus DAO 范围内的加密资产金库支持，这被称为协议控制价值 (PCV)。<br>国库主要有DAI、ETH、BTC、FRAX、UST、LUSD等其他，国库的资产目前有4.34亿美金。</p><p>OHM 被认为具有“底价”或“无风险价值（RFV）”，其价值相当于支持每个代币的资产数量。协议库的当前 RFV 相当于稳定币，目前2.5亿，主要是DAI、UST、FRAX、LUSD。</p><p>OHM目前市值3.69亿，ohm价格29.41，gOHM价格2855，82%被质押，这里面2.5亿 RFV跟3.69亿的差值就是信用价值。储备型货币，溢出的价值就叫做信用价值。<br>2022.3.22 ohm 总供应1529w 循环1394w 价格30 市值4.18亿 gOHM3097</p><h1 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h1><p>OHM：项目代币，可以用来质押<br>sOHM：质押OHM获得的代币，sOHM无法流通，但是可以用来rebase，即复投，只要OHM处于质押状态，sOHM每天会自动rebase，sOHM数目实现自动增长。取消质押时，sOHM与OHM实现1:1兑换。sOHM的好处是避免了用OHM手动复投时产生的高额手续费。<br>Current Index：跟踪您从Staking中获得的收益，Index从创世时期的1开始，并在每个时期递增。 如果您在创世时质押并且从未解除任何OHM质押，那么您今天的余额将是X倍，其中 X 是Current Index。将取消质押时的Index除以质押时的Index以获得sOHM余额增加的比率。<br>wsOHM：封装后的sOHM，wsOHM方便用来计算sOHM的实时价值</p><blockquote><p>• 当您封装 sOHM 时，您获得的 wsOHM 数量为：sOHM / Index。<br>• Index为 10 时的 50 sOHM 为您提供 5 wsOHM。<br>• 展开wsOHM 后，您得到的OHM 数量为：wsOHM x Index。<br>1 wsOHM 的价格总是大约 = 1 OHM 的价格 x 当前Index</p></blockquote><p>计算</p><blockquote><p>当OHM价格为100，Index为10，此时wsOHM价格为1000，你购买了1个OHM，之后质押为sOHM，在没有解质押的情况下一直拿着。</p></blockquote><blockquote><p>后面OHM价格上涨到200，Index为30，此时wsOHM价格为6000，你在这个时候sOHM数量为30 / 10 * 1 = 3，解锁了之后你卖了3 * 200 = 600 U， 相对于你刚开始投入的100U，赚了6倍，这样计算太绕了。我们计算收益时，直接用卖出时的wsOHM/刚投入时的wsOHM价格，即6000/1000，就是我们赚了X倍。</p></blockquote><blockquote><p>可以把wsOHM当成一个代币，我们买入OHM质押时，wsOHM是什么价格，我们的成本就是什么价格。比如创世时，以4U的价格发行了50000个OHM，这个时候早期玩家的入场价格是wsOHM=4U，投入后一直质押到现在，现在的wsOHM=19395U，早期玩家赚了19395/4=5000倍左右。</p></blockquote><p>gOHM：治理 OHM，v2 迁移的一部分，取代了 wsOHM。gOHM 是 V2 中的包装 sOHM，这让你可以于不同的链上使用 sOHM V2，而它的价钱与 wsOHM 相等。<br>PCV：Protocol Controlled Value协议控制价值，金库拥有且由金库控制的资金量，越多的 PCV 对于协议及用户越好。<br>RFV：Risk Free Value无风险价值，金库保证有多少资金用来支持 OHM，一种保守的资产评估方式。协议对储备债券和流动性债券认定 RFV 的方式是不同的。</p><blockquote><p>储备债券能更有效的促进铸造 OHM。例如，当前 OHM 价格为 $1000：</p><ul><li>如果存入流动性债券：小明存 1个OHM和1000个Dai，市值为 $2000，RFV为 $62（计算公式：2_sqrt(1_1000)*99%)，只能铸造62个 OHM。</li><li>如果存入储备债券：RFV和市值均为 $2000，可以铸造 2000 个 OHM<br>POL：协议拥有流动性（protocol owned liquidity ）<br>PoR：Proof of Reserve储量证明，透过销售债券来加强 OlympusDAO 的金库储备之机制。债券人为金库提供流动性，从而协助其建立储备金，因此债券人将获得 OHM 以作为对他们的服务的回报。<br>DCV：Deflation Control Variable通货紧缩控制变，协议所规定的买压变化比例的因子。一个较高的 DCV 代表更高的买压，而导致更高的通货紧缩；一个较低的 DCV 代表较低的买压，而导致较低的通货紧缩。<br>BCV ：Bond Control Variable债券控制变量，债券价格变化比例的因子，较高的 BCV 代表债券人将获得较低的折扣购买债券而协议会有更高的通货膨胀 (利润较高)；一个较低的 BCV 代表债券人将获得较高的折扣购买债券而协议会有较低的通货膨胀 (利润较低)。</li></ul></blockquote><h1 id="OHM操作"><a href="#OHM操作" class="headerlink" title="OHM操作"></a>OHM操作</h1><p>三种操作：购买债券、质押、出售OHM。</p><ul><li>质押被认为是对所有 Olympus 参与者最有利的行动。这是因为它有助于增加 OHM 的价值，因为它通过最初购买代币产生积极的购买压力，以及由于供应被锁定导致其稀缺性增加。</li><li>债券也被认为是净正面的，尽管不如质押多，因为它为 Olympus 金库提供资产，尽管它不会直接购买以增加OHM 的价值。</li><li>出售 OHM 被认为是净负面的，因为它给 OHM 的价格带来了下行压力，价格下跌可能会鼓励其他参与者出售他们的代币。</li></ul><p>所谓的（3，3），就是说大家都一起质押，最后获得的收益是最大的，来源于博弈论。<br>该协议使用两种关键机制来实现其货币政策目标：质押和债券化（bond）。</p><h2 id="质押"><a href="#质押" class="headerlink" title="质押"></a>质押</h2><p>对质押者的主要好处来自供应增长。该协议从国库中铸造新的 OHM 代币，其中大部分分配给质押者。因此，质押者的收益将来自他们的自动复利余额，尽管价格风险仍然是一个重要的考虑因素。也就是说，如果代币余额的增加超过了价格的潜在下降（由于通货膨胀），那么质押者将获利。</p><p>质押之后：复利奖励，没8小时一次，1OHM- 1sOHM，sOHM可以到支持抵押借贷defi里面进行借贷。</p><h2 id="债券化（bond）"><a href="#债券化（bond）" class="headerlink" title="债券化（bond）"></a>债券化（bond）</h2><p><img data-src="../images/bond.png" alt=""><br>债券商的主要好处来自价格的一致性。债券人预先承诺资本，并承诺在设定的时间点获得固定回报；该回报以 OHM 计，因此债券到期时债券持有人的利润将取决于 OHM 价格。债券商受益于上涨或静态的 OHM 价格。当用户从中获得的回报大于质押的回报时，他们就会有债券化的动机。目前只有ohm-dai、ohm-eth。Bond则提供 LP 或 DAI 代币以在固定归属期后换取打折的 OHM 代币。</p><p><strong>bond作用</strong></p><ul><li>减低OHM在其他dex流动性压力，锁仓期</li><li>增加其他项目流动性</li></ul><p>债券销售为协议产生利润，财政部使用利润来铸造 OHM 并将其分配给质押者。通过流动性债券，协议能够积累自己的流动性。POL协议自流动性。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>质押 OHM 的收益很大程度上取决于后续有多少用户愿意以高价购买 OHM，这会让人认为越早买入，能够获得的收益越高，从而产生严重的 FOMO 情绪。</p><p>OHM本质是一个Ponzi，但是金融哪一个不是Ponzi，只要项目足够大，too big to fall。<br>目前的信用价值也就只有1亿美金了，再下降20%-30%估计就非常危险了，这种机制一个明显的特点，发现bond，但是不会马上被在二级市场销售，有一个缓冲期；另一个就是协议拥有自流动性，这也是defi2.0一个标志，能够跟其他项目合作，提供流动性。</p><p>项目只有足够大之后就很难忽视它，就像现在的UST，只有不断扩大用例才能存活。<br>ROI和折扣需要考虑是质押还是bond。</p><h1 id="OHM另类解说"><a href="#OHM另类解说" class="headerlink" title="OHM另类解说"></a>OHM另类解说</h1><ul><li><p>不锚定。它其实不是稳定币，是非主权货币</p></li><li><p>将传统的二池的激励卖币，变成激励买币，锁定流动性。</p><p>  第一点，放弃锚定解决了过往算稳的一个“不及格”和坐水牢的负反馈问题，大部分算稳，因为非抵押型或者部分抵押，都面临币价跌过1美金后的负反馈问题，OHM很直接，把这个目标去了。 有点像老师突然宣布，同学们，从现在开始取消及格线。</p></li><li><p>从此，小伙伴们再也没有了撸蛇（loser）的心理负担，而新进来人的也不用担心掉进撸蛇水牢出不来，因为水牢已不存在。本来是萝卜加大棒，现在天天有萝卜，大棒没有了。 但不锚定，就没了作支付媒介和稳定币的主要应用场景，这个硬伤后面再谈</p></li><li><p>进一步看，其实及格线并不是真没了，本质上及格线就是协议本身的财库的刚性资产（非平台币），现在OHM的财库/市值大概是17.5%，这里其实有2亿美金是LP里包含的OHM, 这部分扣除，实际的“刚性”财库大概等于10%的市值，这个就是很多人认为的OHM的“及格线”，也就是10美金OHM只有1美金刚性资产。</p></li><li><p>第二点是OHM的债券设计机制，以前平台币激励是为了激励提供流动性和减少无常损，现在变成激励锁仓，从中实现平台币的财库变现。  100DAI + <a href="https://twitter.com/search?q=%24100OHM&src=cashtag_click" target="_blank" rel="noopener">$100OHM</a>的LP，比如可以换210的OHM。但是，拿到OHM的人，有一定锁定期，不是掉头卖掉而大概率是做质押或者直接再配比LP币对，如210 DAI : 210 OHM, 再卖赚折扣</p></li><li><p>质押和卖债都是鼓励锁仓，通过高回报激励锁仓，但和二池激励锁仓不同 2池套利简单，很容易挖提卖，币价下跌，进入负反馈。但愿意把LP代币卖给协议，拿回来更多的平台币的人，大概率不是挖提买的，因为LP换平台币，增加了市场风险，它们大概率：1. 质押；2. 再配LP（加杠杆），再卖，这都减少了抛卖</p></li><li><p>说了基本改进，来聊聊硬伤。 第一大硬伤当然就是不锚定美金，不锚定美金的算稳，基本最后都无路可走，或死或转型成资管协议。 因为不锚定美金搞非主权货币，中心化的Libra墙头草已经十米高了；去中心化赛道，那就是比特币和以太坊这类币的赛道，竞争难度是不言而喻的。</p></li><li><p>算稳资产本质上是靠算法调整供给和市场预期实现货币政策，如果不依靠外部的可持续收入，往往很难实现正向循环，市场下跌，容易进入死亡螺旋。 这就是为什么MIM去fork TIME，OHM社区觉得是巨大威胁，因为MIM是美元超额抵押稳定币，能落地，容易有外部收入，现在又要OHM的“邪教性”加持</p></li><li><p>第三个是关于“协议控制流动性”。简单说就是平台币卖了，换来一半平台币和1半的刚性资产 ，然后协议靠这部分资产赚手续费，这样用户也不要承担无常损了，协议又有收入。 但无常损不会平白无故消失的，这部分风险必然转成了协议的系统负债由OHM的持币人都承担了（有没有Synthetix的系统负债的感觉）</p></li><li><p>只要OHM的持有人依然有信心做守夜人，如果守不住，他们照样会去卖OHM，这样财库里的LP token价值下跌，财库不断缩水，就进入一个负反馈 所以，它们搞了Pro，把这个变成服务，可以赚体系外的费用。外部收入，确实是算法资产打破死亡螺旋魔咒的唯一办法，如果有外部收入</p></li><li><p>（比如像借贷、交易类的DeFi那样），那就落地了。Olympus Pro这希望给其它项目提供服务，赚点手续费。Pro才刚开始，才8百万美金锁仓，我个人比较怀疑能真正规模化，毕竟这门槛很低，项目方看起来没太大的合作动力，这真是要拼BD能力了</p></li><li><p>而这个业务的扩展性最大的障碍，还是因为第一个硬伤（不锚定美元). 所以看下来，OHM实际上一个to protocol的流动性管理工具。 结语，算稳这个大赛道每年都有新的花样，最终的理想模型需要不断试错，而最终可能是一个混合模式，部分实际应用支撑+部分算法调整。</p></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.chaincatcher.com/article/2063842" target="_blank" rel="noopener">一文读懂算法稳定币项目Olympus DAO</a></p><p><a href="https://www.youtube.com/watch?v=WzS9t8bGy90&ab_channel=%E9%99%88%E9%BB%98BitouqVentures" target="_blank" rel="noopener">什么是OlympusDAO？(3,3) ？未来债券市场</a></p><p><a href="https://docs.olympusdao.finance/" target="_blank" rel="noopener">https://docs.olympusdao.finance/</a><br><a href="https://mirror.xyz/0xF37a413225c7A71A7CDb68A679922d3994e16faA/MURTxFjYfGHCtDPKITPyrKfCpNvEXCoej-cxV8EKAgI" target="_blank" rel="noopener">Olympus DAO</a> </p><p><a href="https://twitter.com/mindaoyang/status/1453314315444834307" target="_blank" rel="noopener">https://twitter.com/mindaoyang/status/1453314315444834307</a></p>]]></content>
    
    <summary type="html">
    
      defi2.0 olympus DAO介绍
    
    </summary>
    
    
      <category term="区块链" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="defi" scheme="https://hellolinux.xyz/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/defi/"/>
    
    
      <category term="defi" scheme="https://hellolinux.xyz/tags/defi/"/>
    
      <category term="ohm" scheme="https://hellolinux.xyz/tags/ohm/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用介绍</title>
    <link href="https://hellolinux.xyz/posts/8c1a34bd.html"/>
    <id>https://hellolinux.xyz/posts/8c1a34bd.html</id>
    <published>2020-03-12T13:32:57.000Z</published>
    <updated>2022-07-31T13:42:28.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>官网主题(模板)： <a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a><br>中文版官网：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p><h2 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h2><h2 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2.安装Hexo"></a>2.安装Hexo</h2><p>npm install -g hexo-cli</p><p>hexo init hexofolder  </p><p>cd hexofolder<br>npm install </p><p>目录</p><p>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes</p><p>_config.yml<br>网站的 配置 信息，您可以在此<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置大部分的参数</a>。</p><p>package.json<br>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。(具体看官方文档，这里就不赘述了)</p><p>scaffolds<br>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><p>source<br>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><p>themes<br>主题 文件夹。Hexo 会根据主题来生成静态页面。</p><h2 id="3-hexo命令"><a href="#3-hexo命令" class="headerlink" title="3.hexo命令"></a>3.hexo命令</h2><p>hexo g #hexo generate 生成</p><p>hexo s #启动本地web服务器</p><p>通过<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，访问页面。就可以看到，hexo默认带的主题landscap的效果</p><blockquote><p><strong>Hexo常用的几个命令</strong>：<br>hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br>hexo server (hexo s) 启动本地web服务，用于博客的预览<br>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）<br>另外还有其他几个常用命令：</p><p>hexo new “postName” #新建文章</p><p>hexo new page “pageName” #新建页面</p><p>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署</p><p>组合：</p><p>hexo d -g #生成部署</p><p>hexo s -g #生成预览</p><p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令  </p></blockquote><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="添加其他主题"><a href="#添加其他主题" class="headerlink" title="添加其他主题"></a>添加其他主题</h2><p>官网主题(模板)： <a href="https://hexo.io/themes/，在上面选择自己喜欢的模板，进入它对应的git页面，获得clone的链接。" target="_blank" rel="noopener">https://hexo.io/themes/，在上面选择自己喜欢的模板，进入它对应的git页面，获得clone的链接。</a></p><p>这里以主题Hexo-theme-zilan为例进行说明， 我这个主题增加了。</p><p><strong>安装主题</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> hexofolder/themes</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/CatherineLiyuankun/Hexo-theme-zilan.git</span></span><br></pre></td></tr></table></figure><p><strong>启用主题</strong> </p><p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为Hexo-theme-zilan。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> themes/Hexo-theme-zilan</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g <span class="comment"># 生成</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s <span class="comment"># 启动本地web服务器</span></span></span><br></pre></td></tr></table></figure><p>主题</p><p><a href="https://www.ccyh.xyz/archives/" target="_blank" rel="noopener">https://www.ccyh.xyz/archives/</a> </p><p>add next主题</p><p><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a> </p><p>打开<strong>站点</strong>的_config.yml配置文件，修改主题为next</p><p>打开<strong>主题</strong>的_config.yml配置文件，不是站点主题文件，找到Scheme Settings</p><p><a href="https://github.com/WordZzzz/hexo-next" target="_blank" rel="noopener">https://github.com/WordZzzz/hexo-next</a> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">开始正式发布上线博客文章，在命令行中输入：</span><br><span class="line">hexo n <span class="string">"博客名字"</span></span><br></pre></td></tr></table></figure><h2 id="增加侧栏菜单条目"><a href="#增加侧栏菜单条目" class="headerlink" title="增加侧栏菜单条目"></a>增加侧栏菜单条目</h2><p>默认的侧栏菜单条目有：首页、归档、标签、关于、搜索等。如果你想要增加其他的菜单条目，修改主题配置文件_config.yml里的Menu Settings中的menu和menu_icons两个地方</p><h1 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h1><p>ssh-keygen -f hexo-deploy-key </p><p><a href="https://razeen.me/posts/use-github-action-to-deploy-your-hexo-blog/" target="_blank" rel="noopener">https://razeen.me/posts/use-github-action-to-deploy-your-hexo-blog/</a></p><p><a href="https://dreamhomes.top/posts/202111101556/" target="_blank" rel="noopener">https://dreamhomes.top/posts/202111101556/</a></p><h1 id="文章使用"><a href="#文章使用" class="headerlink" title="文章使用"></a>文章使用</h1><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure><p>在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th align="left">布局</th><th align="left">路径</th></tr></thead><tbody><tr><td align="left"><code>post</code></td><td align="left"><code>source/_posts</code></td></tr><tr><td align="left"><code>page</code></td><td align="left"><code>source</code></td></tr><tr><td align="left"><code>draft</code></td><td align="left"><code>source/_drafts</code></td></tr></tbody></table><p>如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</p><h2 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h2><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>:title</code></td><td align="left">标题（小写，空格将会被替换为短杠）</td></tr><tr><td align="left"><code>:year</code></td><td align="left">建立的年份，比如， <code>2015</code></td></tr><tr><td align="left"><code>:month</code></td><td align="left">建立的月份（有前导零），比如， <code>04</code></td></tr><tr><td align="left"><code>:i_month</code></td><td align="left">建立的月份（无前导零），比如， <code>4</code></td></tr><tr><td align="left"><code>:day</code></td><td align="left">建立的日期（有前导零），比如， <code>07</code></td></tr><tr><td align="left"><code>:i_day</code></td><td align="left">建立的日期（无前导零），比如， <code>7</code></td></tr></tbody></table><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p>Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code>来预览草稿。</p><h2 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h2><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">photo</span> <span class="string">"My Gallery"</span></span><br></pre></td></tr></table></figure><p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td></tr><tr><td align="left"><code>date</code></td><td align="left">文件建立日期</td></tr></tbody></table><h2 id="支持的格式"><a href="#支持的格式" class="headerlink" title="支持的格式"></a>支持的格式</h2><p>Hexo 支持以任何格式书写文章，只要安装了相应的渲染插件。</p><p>例如，Hexo 默认安装了 <code>hexo-renderer-marked</code> 和 <code>hexo-renderer-ejs</code>，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 <code>hexo-renderer-pug</code>，你甚至可以用 Pug 模板语言书写文章。</p><p>只需要将文章的扩展名从 <code>md</code> 改成 <code>ejs</code>，Hexo 就会使用 <code>hexo-renderer-ejs</code> 渲染这个文件，其他格式同理。</p><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="string">/7/13</span> <span class="number">20</span><span class="string">:46:25</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left">true</td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章网址</td><td align="left"></td></tr></tbody></table><h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">  - </span>Diary</span><br><span class="line"><span class="bullet">  - </span>Life</span><br></pre></td></tr></table></figure><p>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">- </span>[Diary, PlayStation]</span><br><span class="line"><span class="bullet">- </span>[Diary, Games]</span><br><span class="line"><span class="bullet">- </span>[Life]</span><br></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p><h2 id="添加标签-标签云"><a href="#添加标签-标签云" class="headerlink" title="添加标签(标签云)"></a>添加标签(标签云)</h2><p>hexo new page tags</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="number">-05</span><span class="number">-27</span> <span class="number">13</span><span class="string">:47:40</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">jQuery对表单的操作及更多应用</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="number">-05</span><span class="number">-26</span> <span class="number">12</span><span class="string">:12:57</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">web前端</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">jQuery</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">表格</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">表单验证</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行<code>hexo new 文章名</code>命令生成的文件，页面里就有<code>categories:</code>项了。</p><p>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-tag-cloud <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>next下config修改配置</p><blockquote><p>tagcloud:</p><p># All values below are same as default, change them by yourself.</p><p>min: 14 # Minimun font size in px</p><p>max: 30 # Maxium font size in px</p><p>start: “#ccc” # Start color (hex, rgba, hsla or color keywords)</p><p>end: “#111” # End color (hex, rgba, hsla or color keywords)</p><p>amount: 200 # Amount of tags, change it if you have more than 200 tags</p></blockquote><p>theme/next/layout/_macro/sidebar.swig添加如下代码（放在endmacro中）</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> site.tags.length &gt; 1 %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">src</span>=<span class="string">"/js/tagcloud.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">src</span>=<span class="string">"/js/tagcanvas.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget-wrap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"widget-title"</span>&gt;</span>Tag Cloud<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myCanvasContainer"</span> <span class="attr">class</span>=<span class="string">"widget tagcloud"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"250"</span> <span class="attr">id</span>=<span class="string">"resCanvas"</span> <span class="attr">style</span>=<span class="string">"width=100%"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-variable">&#123;&#123; list_tags() &#125;&#125;</span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--</span></span><span class="template-variable">&#123;&#123; list_categories() &#125;&#125;</span><span class="xml"><span class="comment">--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><p>ist_tags()这块儿依据个人情况而定，近千个tag，最后出来的效果让人看了头皮发麻，可改成了list_categories()</p><h2 id="文章摘要和截断"><a href="#文章摘要和截断" class="headerlink" title="文章摘要和截断"></a>文章摘要和截断</h2><h3 id="more方法"><a href="#more方法" class="headerlink" title="more方法"></a>more方法</h3><p>在文章中使用 <code>&lt;!-- more --&gt;</code> 手动进行截断，Hexo 提供的方式 推荐</p><p>在文章的 <a href="https://hexo.io/docs/front-matter.html" target="_blank" rel="noopener">front-matter</a> 中添加 <code>description</code>，并提供文章摘录</p><p>自动形成摘要，在 主题配置文件 中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><p>默认截取的长度为 <code>150</code> 字符，可以根据需要自行设定</p><blockquote><p>建议使用 <code>&lt;!-- more --&gt;</code>（即第一种方式），除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。</p></blockquote><p>next V7.6之后去掉这个功能，推荐插件hexo-excerpt</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-excerpt <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h3 id="hexo-excerpt插件"><a href="#hexo-excerpt插件" class="headerlink" title="hexo-excerpt插件"></a>hexo-excerpt插件</h3><p>npm install hexo-excerpt –save</p><p>打开站点配置文件，加入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">excerpt:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="number">2</span>  <span class="comment">#按层来算，也就是按代码块来算</span></span><br><span class="line">  <span class="attr">excerpt_excludes:</span> <span class="string">[]</span></span><br><span class="line">  <span class="attr">more_excludes:</span> <span class="string">[]</span></span><br><span class="line">  <span class="attr">hideWholePostExcerpts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>打开主题配置文件，将下面两项设置为 <code>true</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p>在文章中插入引言，可包含作者、来源和标题。</p><p><strong>别号：</strong> quote</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">blockquote</span> [author[, <span class="name">source</span>]] [link] [source_link_title] %&#125;</span></span><br><span class="line"><span class="xml">content</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endblockquote</span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">blockquote</span> %&#125;</span></span><br><span class="line"><span class="xml">Lorem ipsum dolor sit amet, consectetur adipiscing elit. </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endblockquote</span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">blockquote</span> David Levithan, Wide Awake %&#125;</span></span><br><span class="line"><span class="xml">Do not just seek happiness for yourself. </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endblockquote</span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">blockquote</span> @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;</span></span><br><span class="line"><span class="xml">NEW: DevDocs now comes with syntax highlighting. http://devdocs.io</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endblockquote</span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">blockquote</span> Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span></span><br><span class="line"><span class="xml">Every interaction is both precious and an opportunity to delight.</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endblockquote</span> %&#125;</span></span><br></pre></td></tr></table></figure><h2 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="meta">%</span> youtube video_id [type] [cookie] <span class="meta">%</span>&#125;</span><br><span class="line">&#123;<span class="meta">%</span> youtube lJIrF<span class="number">4</span>YjHfQ <span class="meta">%</span>&#125; <span class="comment">//视频</span></span><br><span class="line">&#123;<span class="meta">%</span> youtube PL<span class="number">9</span>hW<span class="number">1</span>uS<span class="number">6</span>HUfscJ<span class="number">9</span>DHkOSoOX<span class="number">45</span>MjXduUxo <span class="string">'playlist'</span> <span class="meta">%</span>&#125; <span class="comment">//播放列表</span></span><br><span class="line">&#123;<span class="meta">%</span> youtube lJIrF<span class="number">4</span>YjHfQ false <span class="meta">%</span>&#125;</span><br><span class="line">&#123;<span class="meta">%</span> youtube PL<span class="number">9</span>hW<span class="number">1</span>uS<span class="number">6</span>HUfscJ<span class="number">9</span>DHkOSoOX<span class="number">45</span>MjXduUxo <span class="string">'playlist'</span> false <span class="meta">%</span>&#125; <span class="comment">//禁止 YouTube cookie</span></span><br><span class="line">&#123;<span class="meta">%</span> vimeo video_id <span class="meta">%</span>&#125; <span class="comment">//vimeo视频</span></span><br></pre></td></tr></table></figure><div class="video-container"><iframe src="https://www.youtube.com/embed/bH9HVCMCVs0" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="部署到github-pages"><a href="#部署到github-pages" class="headerlink" title="部署到github pages"></a>部署到github pages</h2><p>把在本地web环境下预览到的博客部署到github上</p><p>使用hexo deploy部署<br>hexo deploy可以部署到很多平台，具体可以参考这个链接. 如果部署到github，需要在配置文件_config.xml中作如下修改：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: git<span class="variable">@github</span>.com/CatherineLiyuankun.github.io</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure><p>注意部署到git需要提前安装一个扩展：</p><p>npm install hexo-deployer-git –save</p><p>然后在命令行中执行</p><p>hexo d</p><p>即可完成部署</p><h2 id="网站搜索"><a href="#网站搜索" class="headerlink" title="网站搜索"></a>网站搜索</h2><p>local search</p><ol><li><p>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li><li><p>编辑 站点配置文件，新增以下内容到任意位置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></li><li><p>编辑 主题配置文件，启用本地搜索功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><p><a href="https://linchao1002.github.io/2019/03/17/Hexo%20+%20Next%20%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">https://linchao1002.github.io/2019/03/17/Hexo%20+%20Next%20%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/</a> </p><h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><p>Next 可以支持多种评论系统，多说 友言等等，一番了解后，还是决定使用Hypercomments.支持google登陆</p><p><a href="https://www.hypercomments.com/" target="_blank" rel="noopener">HyperComments</a>注册得到Hypercomments_id配置</p><p>Hypercomments在2018开始收费</p><p>如需取消某个 页面/文章 的评论，在 md 文件的 <a href="https://hexo.io/docs/front-matter.html" target="_blank" rel="noopener">front-matter </a>中增加 <code>comments: false</code> </p><h2 id="访问次数阅读量-热度"><a href="#访问次数阅读量-热度" class="headerlink" title="访问次数阅读量(热度)"></a>访问次数阅读量(热度)</h2><p>leancloud</p><p>valine修改为评论数，zh-CN.yml中post下新增comments.valine: 评论数 #可以自定义</p><p>在leancloud上设置并在hexo中新增热度</p><h2 id="阅读时长"><a href="#阅读时长" class="headerlink" title="阅读时长"></a>阅读时长</h2><p>npm install hexo-symbols-count-time –save</p><p>需要hexo clean再进行本地测试。</p><p>在站点配置文件添加如下配置</p><blockquote><p>  symbols_count_time:<br>  symbols: true                # 文章字数统计<br>  time: true                   # 文章阅读时长<br>  total_symbols: true          # 站点总字数统计<br>  total_time: true             # 站点总阅读时长<br>  exclude_codeblock: false     # 排除代码字数统计</p></blockquote><p>在NexT主题配置文件添加如下配置（NexT主题已支持该插件，有的话无需再添加）</p><blockquote><p>  Post wordcount display settings</p><p>  Dependencies: <a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">https://github.com/theme-next/hexo-symbols-count-time</a></p><p>  symbols_count_time:<br>  separated_meta: true     # 是否另起一行（true的话不和发表时间等同一行）<br>  item_text_post: true     # 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）<br>  item_text_total: false   # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）<br>  awl: 4                   # Average Word Length<br>  wpm: 275                 # Words Per Minute（每分钟阅读词数）<br>  suffix: mins.</p></blockquote><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><p>next配置中creative_commons</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">deed.zh</span></span><br></pre></td></tr></table></figure><p>sidebar参数表示在侧边栏有一个版权的图片链接，post参数表示在每一篇文章末尾自动增加本文作者、本文链接、版权声明三个信息，language参数表示点击链接后显示的版权信息的语言。</p><p>如果想个性化配置版权信息，可修改配置文件(./themes/next/layout/_partials/post/post-copyright.swig)，如果想修改显示的样式可修改配置文件(./themes/next/source/css/_common/components/post/post-copyright.styl) 。 </p><h2 id="文章生成永久唯一链接"><a href="#文章生成永久唯一链接" class="headerlink" title="文章生成永久唯一链接"></a>文章生成永久唯一链接</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>如果出错缺少什么包，继续安装。</p><p>修改根目录站点配置文件<code>config.yml</code>，改为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">permalink: posts/:abbrlink.html  # 此处可以自己设置，也可以直接使用 :/abbrlink</span><br><span class="line">abbrlink:</span><br><span class="line">    alg: crc32   #算法： crc16(default) and crc32</span><br><span class="line">    rep: hex     #进制： dec(default) and hex</span><br></pre></td></tr></table></figure><h2 id="设置RSS"><a href="#设置RSS" class="headerlink" title="设置RSS"></a>设置RSS</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>然后在<code>_config.yml</code>文件中配置该插件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">feed:</span></span><br><span class="line"><span class="symbol">    type:</span> atom</span><br><span class="line"><span class="symbol">    path:</span> atom.xml</span><br><span class="line"><span class="symbol">    limit:</span> <span class="number">20</span></span><br><span class="line"><span class="symbol">    hub:</span></span><br><span class="line"><span class="symbol">    content:</span></span><br><span class="line"><span class="symbol">    content_limit:</span></span><br><span class="line"><span class="symbol">    content_limit_delim:</span> <span class="string">' '</span></span><br></pre></td></tr></table></figure><p>参数的含义：</p><ul><li><code>type</code>: <code>RSS</code>的类型(<code>atom/rss2</code>)</li><li><code>path</code>: 文件路径,默认是<code>atom.xml/rss2.xml</code></li><li><code>limit</code>: 展示文章的数量,使用<strong>0</strong>或则<strong>false</strong>代表展示全部</li><li><code>hub</code>:</li><li><code>content</code>: 在<code>RSS</code>文件中是否包含内容 ,有3个值 <code>true/false</code>默认不填为<code>false</code></li><li><code>content_limit</code>: 指定内容的长度作为摘要,仅仅在上面<code>content</code>设置为<code>false</code>和<code>没有自定义的描述出现</code></li><li><code>content_limit_delim</code>: 上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容,，防止从中间截断.</li></ul><h2 id="数据统计与分析"><a href="#数据统计与分析" class="headerlink" title="数据统计与分析"></a>数据统计与分析</h2><p>google analytics</p><p>注册analytics把userid拷贝就可以。</p><h2 id="分享功能"><a href="#分享功能" class="headerlink" title="分享功能"></a>分享功能</h2><p>addthis</p><p>注册(G)，可以使用 Google/Facebook/Twitter 账号进行第三方登陆</p><p>从下面菜单获得 AddThis id：<code>More.. --&gt; General --&gt; ID</code>。 </p><p>在 主题配置文件 中，把<code>#Share</code>下的 <code>#add_this_id</code>取消注释， 改为<code>add_this_id: put_your_add_this_id_here</code></p><p>add share button</p><p>add_this_id: ra-5e8315ca5fd61bd3</p><h2 id="公益404"><a href="#公益404" class="headerlink" title="公益404"></a>公益404</h2><p>hexo new page 404</p><p>默认在 Hexo 文件夹根目录下 /source/404/index.md ，输入以下代码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404 Not Found：该页无法显示</span><br><span class="line">toc: false</span><br><span class="line">comments: false</span><br><span class="line">permalink: /404</span><br><span class="line">---</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span>                                                                                                                                        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"</span> <span class="attr">homePageName</span>=<span class="string">"返回首页"</span> <span class="attr">homePageUrl</span>=<span class="string">"https://www.nickyam.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要部署上传才可以看到。</p><h2 id="about"><a href="#about" class="headerlink" title="about"></a>about</h2><p>hexo new page “about”</p><h2 id="近期文章"><a href="#近期文章" class="headerlink" title="近期文章"></a>近期文章</h2><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> theme.recent_posts %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll motion-element </span></span></span><span class="template-variable">&#123;&#123; "links-of-blogroll-" + theme.recent_posts_layout  &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll-title"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- modify icon to fire by szw --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-history fa-</span></span></span><span class="template-variable">&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; theme.recent_posts_title &#125;&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll-list"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> posts = site.posts.sort('-<span class="name">date</span>') %&#125;</span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> post in posts.slice('0', '5') %&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(post.path) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; post.title &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><span class="template-variable">&#123;&#123; post.title &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><p>将此代码贴在<code>next/layout/_macro/sidebar.swig</code>中的<code>if theme.links</code>对应的<code>endif</code>后面</p><p>在主题的<code>_config.yml</code>中添加了几个变量，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">recent_posts_title:</span> <span class="string">近期文章</span></span><br><span class="line"><span class="attr">recent_posts_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="attr">recent_posts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-related-popular-posts <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>在 themes/next/_config.yaml 中配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">猜你喜欢</span> <span class="comment"># 自定义标题名字</span></span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">true</span> <span class="comment"># 首页是否增加</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">5</span> <span class="comment"># 最多推荐几个</span></span><br><span class="line">    <span class="attr">PPMixingRate:</span> <span class="number">0.4</span> <span class="comment"># 同时推荐火热和相关，两者比率，不能为0</span></span><br><span class="line">    <span class="comment">#isDate: false # 文章时间</span></span><br><span class="line">    <span class="comment">#isImage: false # 文章配图</span></span><br><span class="line">    <span class="comment">#isExcerpt: false # 文章摘要</span></span><br></pre></td></tr></table></figure><p>hexo-related-popular-posts 默认展示位置是在页面底部</p><h2 id="设置favicon图标"><a href="#设置favicon图标" class="headerlink" title="设置favicon图标"></a>设置favicon图标</h2><h2 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h2><h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><p>npm uninstall hexo-generator-index –save<br>npm install hexo-generator-index-pin-top –save</p><p>在新增文章的开头中加入<strong>top: true</strong>，比如：</p><p>title: Hello World<br>abbrlink: 4a17b156<br>top: true</p><p>设置置顶标志</p><p>打开<strong>\themes\your theme\layout_macro\post.swig</strong></p><p>找到<div class="post-meta">下面插入一下代码：</p><p>文章末尾投票打分</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> post.top %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-thumb-tack"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"RED"</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><h2 id="修改默认属性"><a href="#修改默认属性" class="headerlink" title="修改默认属性"></a>修改默认属性</h2><p>在根目录下<code>scaffolds</code>文件夹打开<code>post.md</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">title:</span> &#123;&#123; title &#125;&#125;<span class="comment">//题目</span></span><br><span class="line"><span class="string">date:</span> &#123;&#123; date &#125;&#125;<span class="comment">//日期</span></span><br><span class="line"><span class="string">tags:</span><span class="comment">//标签</span></span><br><span class="line"><span class="string">categories:</span><span class="comment">//分类</span></span><br><span class="line"><span class="string">copyright:</span> <span class="literal">true</span> <span class="comment">//版权信息说明</span></span><br><span class="line"><span class="string">photos:</span>         <span class="comment">//主页文章显示图片</span></span><br></pre></td></tr></table></figure><h2 id="图片放大功能"><a href="#图片放大功能" class="headerlink" title="图片放大功能"></a>图片放大功能</h2><p>打开<strong>主题配置文件</strong><code>_config.yml</code>，搜索<code>fancybox</code>字段，设置其值为true进入到theme/next/文件夹下，打开git bash</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-fancybox3 source/<span class="class"><span class="keyword">lib</span>/<span class="title">fancybox</span></span></span><br></pre></td></tr></table></figure><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-lazyload</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span> <span class="comment">#是否只在文章中开启懒加载</span></span><br><span class="line">  <span class="comment"># className: #可选 e.g. .J-lazyload-img</span></span><br><span class="line">  <span class="comment"># loadingImg: #可选 eg. ./images/loading.png 作为图片未加载时的替代图片</span></span><br><span class="line"></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-lazyload-image</span> <span class="string">--save</span></span><br><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="string">/images/loading.gif</span></span><br></pre></td></tr></table></figure><p><a href="https://steemit.com/" target="_blank" rel="noopener">https://steemit.com</a> </p><h2 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h2><p>站点地图的作用向搜索引擎提供你的网站的概要，给你的网站做 SEO。</p><p>npm install hexo-generator-sitemap –save</p><p>sitemap:<br>path: sitemap.xml</p><ol><li>进入<a href="https://www.google.com/webmasters/verification/home?hl=en" target="_blank" rel="noopener">Google Webmaster Central</a></li><li>点击骚红色的”ADD A PROPERTY”</li><li>在弹出来的小框中加入你的站点地址 <a href="http://yoursite.com/" target="_blank" rel="noopener">http://yoursite.com</a> ，然后点击”Continue”</li><li>Tab栏选择”Alternate methods”，选中HTML tag可以看见</li></ol><meta name="google-site-verification" content="gK77_o5sjFpw2K4KqFStbOtHEl8m_97Zb9BMK88lWZY" /><p>打开next主题的配置文件_config.yml，找到google_site_verification字段（找不到就新建）：</p><p>添加content数值到这</p><p>google_site_verification: XXXXXXXXXXXXXXXXXXXXXXX</p><p>部署到网站后再回到4中的Google Webmaster Central页面，点击骚红色的”VERIFY”，done。</p><p><a href="https://lindaxiao-hust.github.io/2016/04/06/hexo-next-sitemap/" target="_blank" rel="noopener">提交到百度sitemap推荐网址</a> </p><h2 id="广告支持"><a href="#广告支持" class="headerlink" title="广告支持"></a>广告支持</h2><p>众所周知，谷歌是全球最大的广告中间商，让你可以出卖流量来换小钱钱。具体做法是将你有流量的位置告诉谷歌，他会根据浏览你网站的用户行为来动态给他们推广告。</p><p>你可以在这里：<a href="https://www.google.com/adsense" target="_blank" rel="noopener">https://www.google.com/adsense</a> 开通，将你的网站提交，然后谷歌会给你审核，这篇文章 有讲一些申请需要注意的事项，总的来说就是得让谷歌判定你的网站是有价值的，而不是垃圾网站，至于他怎么定义垃圾，上面文章有涉及。</p><h2 id="文末添加结束"><a href="#文末添加结束" class="headerlink" title="文末添加结束"></a>文末添加结束</h2><p>1.在目录 <code>themes/next/layout/_macro/</code> 下添加 <code>passage-end-tag.swig</code> ，内容如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span>------ 本文结束------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.打开 <code>themes/next/layout/_macro/post.swig</code> 文件，在passage end body下新增内容如下:</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'passage-end-tag.swig' %&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>3.打开<code>主题配置文件</code> ，添加代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line"><span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="尾部添加访问量"><a href="#尾部添加访问量" class="headerlink" title="尾部添加访问量"></a>尾部添加访问量</h2><p>具体到 next 主题来说，在 footer 模板（<code>themes/next/layout/_partials/footer.swig</code>）底部添加以下代码就行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user-md"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">        本站访客数:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">        本站访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="显示阅读进度"><a href="#显示阅读进度" class="headerlink" title="显示阅读进度"></a>显示阅读进度</h2><p>主题设置文件（<code>themes/next/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"#37c6c0"</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">2px</span></span><br></pre></td></tr></table></figure><p>放一个订阅号</p><p>放一个打赏</p><p>放分享</p><p>代码块复制功能</p><p>依次是网站标题、副标题、网站描述、作者、网站头像外部链接、网站语言、时区等。</p><p>reward</p><p>Social Links</p><p>follow_me:</p><p>更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm update -g #npm 更新全局安装的包</span><br><span class="line">~&#x2F;blog $ npm update #npm 更新站点文件夹根目录下安装的依赖包</span><br><span class="line">npm install npm -g #更新 npm 它自己</span><br><span class="line">npm install n -g #更新 Node.js 到最新版</span><br><span class="line">~&#x2F;blog&#x2F;themes&#x2F;next $ git pull #更新主题</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-feed</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure><p>动态背景</p><p>在<em>主题</em>配置文件中，靠后面，改 <code>canvas_nest: true</code></p><p>博客推广及谷歌搜索优化</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration.html</a></p><p><a href="https://xfdj_dragon.gitee.io/2020/05/02/%E4%BC%98%E5%8C%96%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9ANexT%E4%B8%BB%E9%A2%98%E4%B8%8D%E5%86%8D%E6%94%AF%E6%8C%81autoto-excerpt%E4%B9%8B%E5%90%8E/" target="_blank" rel="noopener">文章截断hexo-excerpt</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo&quot;&gt;&lt;/a&gt;Hexo&lt;/h1&gt;&lt;p&gt;官网主题(模板)： &lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/themes/&lt;/a&gt;&lt;br&gt;中文版官网：&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/zh-cn/docs/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://hellolinux.xyz/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://hellolinux.xyz/tags/hexo/"/>
    
  </entry>
  
</feed>
